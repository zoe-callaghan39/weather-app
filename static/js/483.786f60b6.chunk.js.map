{"version":3,"file":"static/js/483.786f60b6.chunk.js","mappings":"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","sources":["../node_modules/pixi.js/src/app/ResizePlugin.ts","../node_modules/pixi.js/src/app/TickerPlugin.ts","../node_modules/pixi.js/src/app/init.ts","../node_modules/pixi.js/src/filters/FilterPipe.ts","../node_modules/pixi.js/src/filters/FilterSystem.ts","../node_modules/pixi.js/src/scene/container/bounds/getRenderableBounds.ts","../node_modules/pixi.js/src/filters/init.ts","../node_modules/pixi.js/src/rendering/high-shader/shader-bits/localUniformBit.ts","../node_modules/pixi.js/src/scene/graphics/gpu/colorToUniform.ts","../node_modules/pixi.js/src/scene/graphics/shared/GraphicsPipe.ts","../node_modules/pixi.js/src/scene/graphics/init.ts","../node_modules/pixi.js/src/scene/mesh/shared/MeshPipe.ts","../node_modules/pixi.js/src/scene/mesh/init.ts","../node_modules/pixi.js/src/scene/mesh/shared/BatchableMesh.ts","../node_modules/pixi.js/src/scene/particle-container/gl/GlParticleContainerAdaptor.ts","../node_modules/pixi.js/src/scene/particle-container/shared/utils/createIndicesForQuads.ts","../node_modules/pixi.js/src/scene/particle-container/shared/utils/generateParticleUpdateFunction.ts","../node_modules/pixi.js/src/scene/particle-container/shared/ParticleBuffer.ts","../node_modules/pixi.js/src/scene/particle-container/shared/shader/ParticleShader.ts","../node_modules/pixi.js/src/scene/particle-container/shared/ParticleContainerPipe.ts","../node_modules/pixi.js/src/scene/particle-container/shared/GlParticleContainerPipe.ts","../node_modules/pixi.js/src/scene/particle-container/gpu/GpuParticleContainerAdaptor.ts","../node_modules/pixi.js/src/scene/particle-container/shared/GpuParticleContainerPipe.ts","../node_modules/pixi.js/src/scene/particle-container/init.ts","../node_modules/pixi.js/src/scene/mesh-plane/PlaneGeometry.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceGeometry.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceSpritePipe.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/init.ts","../node_modules/pixi.js/src/scene/sprite-tiling/shader/tilingBit.ts","../node_modules/pixi.js/src/scene/sprite-tiling/shader/TilingSpriteShader.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/QuadGeometry.ts","../node_modules/pixi.js/src/scene/sprite-tiling/TilingSpritePipe.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/setUvs.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/applyMatrix.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/setPositions.ts","../node_modules/pixi.js/src/scene/sprite-tiling/init.ts","../node_modules/pixi.js/src/scene/sprite/BatchableSprite.ts","../node_modules/pixi.js/src/scene/graphics/shared/Graphics.ts","../node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/localUniformMSDFBit.ts","../node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/mSDFBit.ts","../node_modules/pixi.js/src/scene/text/sdfShader/SdfShader.ts","../node_modules/pixi.js/src/scene/text-bitmap/BitmapTextPipe.ts","../node_modules/pixi.js/src/scene/text-bitmap/init.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextPipe.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextRenderData.ts","../node_modules/pixi.js/src/scene/text-html/utils/textStyleToCSS.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextStyle.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadFontCSS.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadFontAsBase64.ts","../node_modules/pixi.js/src/scene/text-html/utils/getFontCss.ts","../node_modules/pixi.js/src/scene/text-html/utils/measureHtmlText.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextSystem.ts","../node_modules/pixi.js/src/scene/text-html/utils/extractFontFamilies.ts","../node_modules/pixi.js/src/scene/text-html/utils/getSVGUrl.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadSVGImage.ts","../node_modules/pixi.js/src/utils/browser/isSafari.ts","../node_modules/pixi.js/src/scene/text-html/utils/getTemporaryCanvasFromImage.ts","../node_modules/pixi.js/src/scene/text-html/init.ts","../node_modules/pixi.js/src/scene/text/canvas/CanvasTextPipe.ts","../node_modules/pixi.js/src/utils/canvas/getCanvasBoundingBox.ts","../node_modules/pixi.js/src/scene/text/canvas/CanvasTextSystem.ts","../node_modules/pixi.js/src/scene/text/init.ts","../node_modules/pixi.js/src/scene/text/utils/getPo2TextureFromSource.ts","../node_modules/pixi.js/src/scene/text/utils/updateTextBounds.ts"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\nimport type { Renderer } from '../rendering/renderers/types';\n\ntype ResizeableRenderer = Pick<Renderer, 'resize'>;\n\n/**\n * Application options for the {@link app.ResizePlugin}.\n * @memberof app\n * @property {Window|HTMLElement} [resizeTo=window] - Element to automatically resize the renderer to.\n */\nexport interface ResizePluginOptions\n{\n    /**\n     * Element to automatically resize the renderer to.\n     * @memberof app.ApplicationOptions\n     */\n    resizeTo?: Window | HTMLElement;\n}\n\n/**\n * Middleware for Application's resize functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#resizeTo}\n * * {@link app.Application#resize}\n * * {@link app.Application#queueResize}\n * * {@link app.Application#cancelResize}\n * @example\n * import { extensions, ResizePlugin } from 'pixi.js';\n *\n * extensions.add(ResizePlugin);\n * @memberof app\n */\nexport class ResizePlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static resizeTo: Window | HTMLElement;\n    public static resize: () => void;\n    public static renderer: ResizeableRenderer;\n    public static queueResize: () => void;\n    public static render: () => void;\n    private static _resizeId: number;\n    private static _resizeTo: Window | HTMLElement;\n    private static _cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options: ResizePluginOptions): void\n    {\n        Object.defineProperty(this, 'resizeTo',\n            /**\n             * The HTML element or window to automatically resize the\n             * renderer's view element to match width and height.\n             * @member {Window|HTMLElement}\n             * @name resizeTo\n             * @memberof app.Application#\n             */\n            {\n                set(dom: Window | HTMLElement)\n                {\n                    globalThis.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        globalThis.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        /**\n         * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n         * only be called once.\n         * @memberof app.Application#\n         * @method queueResize\n         * @private\n         */\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this._cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        /**\n         * Cancel the resize queue.\n         * @memberof app.Application#\n         * @method cancelResize\n         * @private\n         */\n        this._cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        /**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         * @memberof app.Application#\n         * @method resize\n         */\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this._cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === globalThis.window)\n            {\n                width = globalThis.innerWidth;\n                height = globalThis.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n            this.render();\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this._cancelResize();\n        this._cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n","import { ExtensionType } from '../extensions/Extensions';\nimport { UPDATE_PRIORITY } from '../ticker/const';\nimport { Ticker } from '../ticker/Ticker';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\n\n/**\n * Application options for the {@link app.TickerPlugin}.\n * @memberof app\n * @property {boolean} [autoStart=true] - Automatically starts the rendering after the construction.\n * **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n * `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n * @property {boolean} [sharedTicker=false] - Set`true` to use `Ticker.shared`, `false` to create new ticker.\n * If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n * The system ticker will always run before both the shared ticker and the app ticker.\n */\nexport interface TickerPluginOptions\n{\n    /**\n     * Automatically starts the rendering after the construction.\n     *  **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n     *  `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n     * @memberof app.ApplicationOptions\n     * @default true\n     */\n    autoStart?: boolean;\n    /**\n     * Set`true` to use `Ticker.shared`, `false` to create new ticker.\n     *  If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n     *  The system ticker will always run before both the shared ticker and the app ticker.\n     * @memberof app.ApplicationOptions\n     * @default false\n     */\n    sharedTicker?: boolean;\n}\n\n/**\n * Middleware for Application's {@link ticker.Ticker} functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#start}\n * * {@link app.Application#stop}\n * * {@link app.Application#ticker}\n * @example\n * import { extensions, TickerPlugin } from 'pixi.js';\n *\n * extensions.add(TickerPlugin);\n * @memberof app\n */\nexport class TickerPlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static start: () => void;\n    public static stop: () => void;\n    private static _ticker: Ticker;\n    public static ticker: Ticker;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options?: PixiMixins.ApplicationOptions): void\n    {\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker',\n            {\n                set(ticker)\n                {\n                    if (this._ticker)\n                    {\n                        this._ticker.remove(this.render, this);\n                    }\n                    this._ticker = ticker;\n                    if (ticker)\n                    {\n                        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                    }\n                },\n                get()\n                {\n                    return this._ticker;\n                },\n            });\n\n        /**\n         * Convenience method for stopping the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.stop = (): void =>\n        {\n            this._ticker.stop();\n        };\n\n        /**\n         * Convenience method for starting the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.start = (): void =>\n        {\n            this._ticker.start();\n        };\n\n        /**\n         * Internal reference to the ticker.\n         * @type {Ticker}\n         * @name _ticker\n         * @memberof app.Application#\n         * @private\n         */\n        this._ticker = null;\n\n        /**\n         * Ticker for doing render updates.\n         * @type {ticker.Ticker}\n         * @name ticker\n         * @memberof app.Application#\n         * @default Ticker.shared\n         */\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Clean up the ticker, scoped to application.\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    }\n}\n","import { extensions } from '../extensions/Extensions';\nimport { ResizePlugin } from './ResizePlugin';\nimport { TickerPlugin } from './TickerPlugin';\n\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n","import { ExtensionType } from '../extensions/Extensions';\n\nimport type { InstructionSet } from '../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../rendering/renderers/types';\nimport type { Container } from '../scene/container/Container';\nimport type { Effect } from '../scene/container/Effect';\nimport type { FilterInstruction } from './FilterSystem';\n\nexport class FilterPipe implements InstructionPipe<FilterInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'filter',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(filterEffect: Effect, container: Container, instructionSet: InstructionSet): void\n    {\n        const renderPipes = this._renderer.renderPipes;\n\n        renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            canBundle: false,\n            action: 'pushFilter',\n            container,\n            filterEffect,\n        } as FilterInstruction);\n    }\n\n    public pop(_filterEffect: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: FilterInstruction)\n    {\n        if (instruction.action === 'pushFilter')\n        {\n            this._renderer.filter.push(instruction);\n        }\n        else if (instruction.action === 'popFilter')\n        {\n            this._renderer.filter.pop();\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","import { ExtensionType } from '../extensions/Extensions';\nimport { Matrix } from '../maths/matrix/Matrix';\nimport { Point } from '../maths/point/Point';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../rendering/renderers/types';\nimport { Bounds } from '../scene/container/bounds/Bounds';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds';\nimport { warn } from '../utils/logging/warn';\n\nimport type { WebGLRenderer } from '../rendering/renderers/gl/WebGLRenderer';\nimport type { WebGPURenderer } from '../rendering/renderers/gpu/WebGPURenderer';\nimport type { Instruction } from '../rendering/renderers/shared/instructions/Instruction';\nimport type { Renderable } from '../rendering/renderers/shared/Renderable';\nimport type { RenderTarget } from '../rendering/renderers/shared/renderTarget/RenderTarget';\nimport type { RenderSurface } from '../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type { System } from '../rendering/renderers/shared/system/System';\nimport type { Container } from '../scene/container/Container';\nimport type { Sprite } from '../scene/sprite/Sprite';\nimport type { Filter } from './Filter';\nimport type { FilterEffect } from './FilterEffect';\n\ntype FilterAction = 'pushFilter' | 'popFilter';\n\n//\nconst quadGeometry = new Geometry({\n    attributes: {\n        aPosition: {\n            buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            format: 'float32x2',\n            stride: 2 * 4,\n            offset: 0,\n        },\n    },\n    indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3]),\n});\n\n/**\n * The filter pipeline is responsible for applying filters scene items!\n *\n * KNOWN BUGS:\n * 1. Global bounds calculation is incorrect if it is used when flip flopping filters. The maths can be found below\n * eg: filters [noiseFilter, blurFilter] noiseFilter will calculate the global bounds incorrectly.\n *\n * 2. RenderGroups do not work with filters. This is because the renderGroup matrix is not currently taken into account.\n *\n * Implementation notes:\n * 1. Gotcha - nesting filters that require blending will not work correctly. This creates a chicken and egg problem\n * the complexity and performance required to do this is not worth it i feel.. but lets see if others agree!\n *\n * 2. Filters are designed to be changed on the fly, this is means that changing filter information each frame will\n * not trigger an instruction rebuild. If you are constantly turning a filter on and off.. its therefore better to set\n * enabled to true or false on the filter. Or setting an empty array.\n *\n * 3. Need to look at perhaps aliasing when flip flopping filters. Really we should only need to antialias the FIRST\n * Texture we render too. The rest can be non aliased. This might help performance.\n * Currently we flip flop with an antialiased texture if antialiasing is enabled on the filter.\n */\nexport interface FilterInstruction extends Instruction\n{\n    renderPipeId: 'filter',\n    action: FilterAction,\n    container?: Container,\n    renderables?: Renderable[],\n    filterEffect: FilterEffect,\n}\n\nexport interface FilterData\n{\n    skip: boolean;\n    enabledLength?: number;\n    inputTexture: Texture\n    bounds: Bounds,\n    blendRequired: boolean,\n    container: Container,\n    filterEffect: FilterEffect,\n    previousRenderSurface: RenderSurface,\n    backTexture?: Texture,\n}\n\n/**\n * System that manages the filter pipeline\n * @memberof rendering\n */\nexport class FilterSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'filter',\n    } as const;\n\n    public readonly renderer: Renderer;\n\n    private _filterStackIndex = 0;\n    private _filterStack: FilterData[] = [];\n\n    private readonly _filterGlobalUniforms = new UniformGroup({\n        uInputSize: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputPixel: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputClamp: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uGlobalFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputTexture: { value: new Float32Array(4), type: 'vec4<f32>' },\n    });\n\n    private readonly _globalFilterBindGroup: BindGroup = new BindGroup({});\n    private _activeFilterData: FilterData;\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n     * @readonly\n     */\n    public get activeBackTexture(): Texture | undefined\n    {\n        return this._activeFilterData?.backTexture;\n    }\n\n    public push(instruction: FilterInstruction)\n    {\n        const renderer = this.renderer;\n\n        const filters = instruction.filterEffect.filters;\n\n        if (!this._filterStack[this._filterStackIndex])\n        {\n            this._filterStack[this._filterStackIndex] = this._getFilterData();\n        }\n\n        // get a filter data from the stack. They can be reused multiple times each frame,\n        // so we don't need to worry about overwriting them in a single pass.\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        this._filterStackIndex++;\n\n        // if there are no filters, we skip the pass\n        if (filters.length === 0)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        const bounds: Bounds = filterData.bounds;\n\n        // this path is used by the blend modes mostly!\n        // they collect all renderables and push them into a list.\n        // this list is then used to calculate the bounds of the filter area\n        if (instruction.renderables)\n        {\n            getGlobalRenderableBounds(instruction.renderables, bounds);\n        }\n        // if a filterArea is provided, we save our selves some measuring and just use that area supplied\n        else if (instruction.filterEffect.filterArea)\n        {\n            bounds.clear();\n\n            // transform the filterArea into global space..\n            bounds.addRect(instruction.filterEffect.filterArea);\n\n            // new for v8, we transform the bounds into the space of the container\n            bounds.applyMatrix(instruction.container.worldTransform);\n        }\n        // classic filter path, we get the bounds of the container and use it by recursively\n        // measuring.\n        else\n        {\n            // we want to factor render layers to get the real visual bounds of this container.\n            // so the last param is true..\n            instruction.container.getFastGlobalBounds(true, bounds);\n        }\n\n        if (instruction.container)\n        {\n            // When a container is cached as a texture, its filters need to be applied relative to its\n            // cached parent's coordinate space rather than world space. This transform adjustment ensures\n            // filters are applied in the correct coordinate system.\n            const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n            const filterFrameTransform = renderGroup.cacheToLocalTransform;\n\n            if (filterFrameTransform)\n            {\n                bounds.applyMatrix(filterFrameTransform);\n            }\n        }\n\n        // get GLOBAL bounds of the item we are going to apply the filter to\n\n        const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n\n        // next we get the settings for the filter\n        // we need to find the LOWEST resolution for the filter list\n        let resolution = Infinity;\n        // Padding is additive to add padding to our padding\n        let padding = 0;\n        // if this is true for all filter, it should be true, and otherwise false\n        let antialias = true;\n        // true if any filter requires the previous render target\n        let blendRequired = false;\n        // true if any filter in the list is enabled\n        let enabled = false;\n        // false if any filter in the list has false\n        let clipToViewport = true;\n\n        for (let i = 0; i < filters.length; i++)\n        {\n            const filter = filters[i];\n\n            resolution = Math.min(resolution, filter.resolution === 'inherit'\n                ? colorTextureSource._resolution : filter.resolution);\n            padding += filter.padding;\n\n            if (filter.antialias === 'off')\n            {\n                antialias = false;\n            }\n            else if (filter.antialias === 'inherit')\n            {\n                antialias &&= colorTextureSource.antialias;\n            }\n\n            if (!filter.clipToViewport)\n            {\n                clipToViewport = false;\n            }\n\n            const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n\n            if (!isCompatible)\n            {\n                enabled = false;\n                break;\n            }\n\n            if (filter.blendRequired && !((renderer as WebGLRenderer).backBuffer?.useBackBuffer ?? true))\n            {\n                // #if _DEBUG\n                // eslint-disable-next-line max-len\n                warn('Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.');\n                // #endif\n\n                enabled = false;\n                break;\n            }\n\n            enabled = filter.enabled || enabled;\n            blendRequired ||= filter.blendRequired;\n        }\n\n        // if no filters are enabled lets skip!\n        if (!enabled)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // here we constrain the bounds to the viewport we will render too\n        // this should not take into account the x, y offset of the viewport - as this is\n        // handled by the viewport on the gpu.\n        if (clipToViewport)\n        {\n            const viewPort = renderer.renderTarget.rootViewPort;\n\n            const rootResolution = renderer.renderTarget.renderTarget.resolution;\n\n            bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n        }\n\n        // round the bounds to the nearest pixel\n        bounds\n            .scale(resolution)\n            .ceil()\n            .scale(1 / resolution)\n            .pad(padding | 0);\n\n        // skip if the bounds are negative or zero as this means they are\n        // not visible on the screen\n        if (!bounds.isPositive)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // set all the filter data\n        filterData.skip = false;\n\n        filterData.bounds = bounds;\n        filterData.blendRequired = blendRequired;\n        filterData.container = instruction.container;\n        filterData.filterEffect = instruction.filterEffect;\n\n        filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n\n        // bind...\n        // get a P02 texture from our pool...\n        filterData.inputTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            resolution,\n            antialias,\n        );\n\n        renderer.renderTarget.bind(filterData.inputTexture, true);\n        // set the global uniforms to take into account the bounds offset required\n\n        renderer.globalUniforms.push({\n            offset: bounds,\n        });\n    }\n\n    public pop()\n    {\n        const renderer = this.renderer;\n\n        this._filterStackIndex--;\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        // if we are skipping this filter then we just do nothing :D\n        if (filterData.skip)\n        {\n            return;\n        }\n\n        this._activeFilterData = filterData;\n\n        const inputTexture = filterData.inputTexture;\n\n        const bounds = filterData.bounds;\n\n        let backTexture = Texture.EMPTY;\n\n        renderer.renderTarget.finishRenderPass();\n\n        if (filterData.blendRequired)\n        {\n            // this actually forces the current commandQueue to render everything so far.\n            // if we don't do this, we won't be able to copy pixels for the background\n            const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n\n            const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n\n            backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n        }\n\n        filterData.backTexture = backTexture;\n\n        const filters = filterData.filterEffect.filters;\n\n        // get a BufferResource from the uniformBatch.\n        // this will batch the shader uniform data and give us a buffer resource we can\n        // set on our globalUniform Bind Group\n\n        // update the resources on the bind group...\n        this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n        this._globalFilterBindGroup.setResource(backTexture.source, 3);\n\n        renderer.globalUniforms.pop();\n\n        if (filters.length === 1)\n        {\n            // render a single filter...\n            // this.applyFilter(filters[0], inputTexture, filterData.previousRenderSurface, false);\n            filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n\n            // return the texture to the pool so we can reuse the next frame\n            TexturePool.returnTexture(inputTexture);\n        }\n        else\n        {\n            let flip = filterData.inputTexture;\n\n            // get another texture that we will render the next filter too\n            let flop = TexturePool.getOptimalTexture(\n                bounds.width,\n                bounds.height,\n                flip.source._resolution,\n                false\n            );\n\n            let i = 0;\n\n            // loop and apply the filters, omitting the last one as we will render that to the final target\n            for (i = 0; i < filters.length - 1; ++i)\n            {\n                const filter = filters[i];\n\n                filter.apply(this, flip, flop, true);\n                const t = flip;\n\n                flip = flop;\n                flop = t;\n            }\n\n            filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n\n            // return those textures for later!\n            TexturePool.returnTexture(flip);\n            TexturePool.returnTexture(flop);\n        }\n\n        // if we made a background texture, lets return that also\n        if (filterData.blendRequired)\n        {\n            TexturePool.returnTexture(backTexture);\n        }\n    }\n\n    public getBackTexture(lastRenderSurface: RenderTarget, bounds: Bounds, previousBounds?: Bounds)\n    {\n        const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n\n        const backTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            backgroundResolution,\n            false,\n        );\n\n        let x = bounds.minX;\n        let y = bounds.minY;\n\n        if (previousBounds)\n        {\n            x -= previousBounds.minX;\n            y -= previousBounds.minY;\n        }\n\n        x = Math.floor(x * backgroundResolution);\n        y = Math.floor(y * backgroundResolution);\n\n        const width = Math.ceil(bounds.width * backgroundResolution);\n        const height = Math.ceil(bounds.height * backgroundResolution);\n\n        this.renderer.renderTarget.copyToTexture(\n            lastRenderSurface,\n            backTexture,\n            { x, y },\n            { width, height },\n            { x: 0, y: 0 }\n        );\n\n        return backTexture;\n    }\n\n    public applyFilter(filter: Filter, input: Texture, output: RenderSurface, clear: boolean)\n    {\n        const renderer = this.renderer;\n\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        const bounds = filterData.bounds;\n\n        const offset = Point.shared;\n        const previousRenderSurface = filterData.previousRenderSurface;\n\n        const isFinalTarget = previousRenderSurface === output;\n\n        let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n\n        // to find the previous resolution we need to account for the skipped filters\n        // the following will find the last non skipped filter...\n        let currentIndex = this._filterStackIndex - 1;\n\n        while (currentIndex > 0 && this._filterStack[currentIndex].skip)\n        {\n            --currentIndex;\n        }\n\n        if (currentIndex > 0)\n        {\n            resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n        }\n\n        const filterUniforms = this._filterGlobalUniforms;\n        const uniforms = filterUniforms.uniforms;\n\n        const outputFrame = uniforms.uOutputFrame;\n        const inputSize = uniforms.uInputSize;\n        const inputPixel = uniforms.uInputPixel;\n        const inputClamp = uniforms.uInputClamp;\n        const globalFrame = uniforms.uGlobalFrame;\n        const outputTexture = uniforms.uOutputTexture;\n\n        // are we rendering back to the original surface?\n        if (isFinalTarget)\n        {\n            let lastIndex = this._filterStackIndex;\n\n            // get previous bounds.. we must take into account skipped filters also..\n            while (lastIndex > 0)\n            {\n                lastIndex--;\n                const filterData = this._filterStack[this._filterStackIndex - 1];\n\n                if (!filterData.skip)\n                {\n                    offset.x = filterData.bounds.minX;\n                    offset.y = filterData.bounds.minY;\n\n                    break;\n                }\n            }\n\n            outputFrame[0] = bounds.minX - offset.x;\n            outputFrame[1] = bounds.minY - offset.y;\n        }\n        else\n        {\n            outputFrame[0] = 0;\n            outputFrame[1] = 0;\n        }\n\n        outputFrame[2] = input.frame.width;\n        outputFrame[3] = input.frame.height;\n\n        inputSize[0] = input.source.width;\n        inputSize[1] = input.source.height;\n        inputSize[2] = 1 / inputSize[0];\n        inputSize[3] = 1 / inputSize[1];\n\n        inputPixel[0] = input.source.pixelWidth;\n        inputPixel[1] = input.source.pixelHeight;\n        inputPixel[2] = 1.0 / inputPixel[0];\n        inputPixel[3] = 1.0 / inputPixel[1];\n\n        inputClamp[0] = 0.5 * inputPixel[2];\n        inputClamp[1] = 0.5 * inputPixel[3];\n        inputClamp[2] = (input.frame.width * inputSize[2]) - (0.5 * inputPixel[2]);\n        inputClamp[3] = (input.frame.height * inputSize[3]) - (0.5 * inputPixel[3]);\n\n        const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n\n        globalFrame[0] = offset.x * resolution;\n        globalFrame[1] = offset.y * resolution;\n\n        globalFrame[2] = rootTexture.source.width * resolution;\n        globalFrame[3] = rootTexture.source.height * resolution;\n\n        // set the output texture - this is where we are going to render to\n\n        const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n\n        renderer.renderTarget.bind(output, !!clear);\n\n        if (output instanceof Texture)\n        {\n            outputTexture[0] = output.frame.width;\n            outputTexture[1] = output.frame.height;\n        }\n        else\n        {\n            // this means a renderTarget was passed directly\n            outputTexture[0] = renderTarget.width;\n            outputTexture[1] = renderTarget.height;\n        }\n\n        outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n        filterUniforms.update();\n\n        // TODO - should prolly use a adaptor...\n        if ((renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            const batchUniforms = (renderer as WebGPURenderer).renderPipes.uniformBatch\n                .getUboResource(filterUniforms);\n\n            this._globalFilterBindGroup.setResource(batchUniforms, 0);\n        }\n        else\n        {\n            this._globalFilterBindGroup.setResource(filterUniforms, 0);\n        }\n\n        // now lets update the output texture...\n\n        // set bind group..\n        this._globalFilterBindGroup.setResource(input.source, 1);\n        this._globalFilterBindGroup.setResource(input.source.style, 2);\n\n        filter.groups[0] = this._globalFilterBindGroup;\n\n        renderer.encoder.draw({\n            geometry: quadGeometry,\n            shader: filter,\n            state: filter._state,\n            topology: 'triangle-list'\n        });\n\n        // WebGPU blit's automatically, but WebGL does not!\n        if (renderer.type === RendererType.WEBGL)\n        {\n            renderer.renderTarget.finishRenderPass();\n        }\n    }\n\n    private _getFilterData(): FilterData\n    {\n        return {\n            skip: false,\n            inputTexture: null,\n            bounds: new Bounds(),\n            container: null,\n            filterEffect: null,\n            blendRequired: false,\n            previousRenderSurface: null,\n        };\n    }\n\n    /**\n     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n     *\n     * Use `outputMatrix * vTextureCoord` in the shader.\n     * @param outputMatrix - The matrix to output to.\n     * @param {Sprite} sprite - The sprite to map to.\n     * @returns The mapped matrix.\n     */\n    public calculateSpriteMatrix(outputMatrix: Matrix, sprite: Sprite): Matrix\n    {\n        const data = this._activeFilterData;\n\n        const mappedMatrix = outputMatrix.set(\n            data.inputTexture._source.width,\n            0, 0,\n            data.inputTexture._source.height,\n            data.bounds.minX, data.bounds.minY\n        );\n\n        const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n\n        const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n\n        if (renderGroup && renderGroup.cacheToLocalTransform)\n        {\n            // get the matrix relative to the render group..\n            worldTransform.prepend(renderGroup.cacheToLocalTransform);\n        }\n\n        worldTransform.invert();\n        mappedMatrix.prepend(worldTransform);\n        mappedMatrix.scale(\n            1.0 / sprite.texture.frame.width,\n            1.0 / sprite.texture.frame.height\n        );\n\n        mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n\n        return mappedMatrix;\n    }\n\n    public destroy?: () => void;\n}\n","import type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Bounds } from './Bounds';\n\nexport function getGlobalRenderableBounds(renderables: Renderable[], bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    // instead of copying the matrix each time we are assigning it in bounds\n    // this is a performance hack :D\n    // so we need to restore the matrix after we are done\n\n    const tempMatrix = bounds.matrix;\n\n    for (let i = 0; i < renderables.length; i++)\n    {\n        const renderable = renderables[i];\n\n        if (renderable.globalDisplayStatus < 0b111)\n        {\n            continue;\n        }\n\n        bounds.matrix = renderable.worldTransform;\n        bounds.addBounds(renderable.bounds);\n    }\n\n    bounds.matrix = tempMatrix;\n\n    return bounds;\n}\n","import { extensions } from '../extensions/Extensions';\nimport { FilterPipe } from './FilterPipe';\nimport { FilterSystem } from './FilterSystem';\n\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n","export const localUniformBit = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* wgsl */`\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n};\n\n// TODO this works, but i think down the road it will be better to manage groups automatically if there are clashes\nexport const localUniformBitGroup2 = {\n    ...localUniformBit,\n    vertex: {\n        ...localUniformBit.vertex,\n        // replace the group!\n        header: localUniformBit.vertex.header.replace('group(1)', 'group(2)'),\n    }\n};\n\nexport const localUniformBitGl = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* glsl */`\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n};\n","export function colorToUniform(rgb: number, alpha: number, out: Float32Array, offset: number)\n{\n    // TODO replace with Color..\n    out[offset++] = ((rgb >> 16) & 0xFF) / 255;\n    out[offset++] = ((rgb >> 8) & 0xFF) / 255;\n    out[offset++] = (rgb & 0xFF) / 255;\n    out[offset++] = alpha;\n}\n\nexport function color32BitToUniform(abgr: number, out: Float32Array, offset: number)\n{\n    const alpha = ((abgr >> 24) & 0xFF) / 255;\n\n    out[offset++] = ((abgr & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 8) & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 16) & 0xFF) / 255) * alpha;\n    out[offset++] = alpha;\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../gpu/colorToUniform';\nimport { BatchableGraphics } from './BatchableGraphics';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { RenderableGCSystem } from '../../../rendering/renderers/shared/texture/RenderableGCSystem';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Container } from '../../container/Container';\nimport type { Graphics } from './Graphics';\nimport type { GpuGraphicsContext, GraphicsContextSystem } from './GraphicsContextSystem';\n\nexport interface GraphicsAdaptor\n{\n    shader: Shader;\n    init(): void;\n    execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void;\n    destroy(): void;\n}\nexport interface GraphicsSystem\n{\n    graphicsContext: GraphicsContextSystem;\n    renderableGC: RenderableGCSystem;\n    renderPipes: {\n        batch: BatchPipe\n    }\n    _roundPixels: 0 | 1;\n}\n\nexport class GraphicsPipe implements RenderPipe<Graphics>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public renderer: GraphicsSystem;\n    public state: State = State.for2d();\n\n    // batchable graphics list, used to render batches\n    private _graphicsBatchesHash: Record<number, BatchableGraphics[]> = Object.create(null);\n    private _adaptor: GraphicsAdaptor;\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: GraphicsSystem, adaptor: GraphicsAdaptor)\n    {\n        this.renderer = renderer;\n\n        this._adaptor = adaptor;\n        this._adaptor.init();\n\n        this.renderer.renderableGC.addManagedHash(this, '_graphicsBatchesHash');\n    }\n\n    public validateRenderable(graphics: Graphics): boolean\n    {\n        // assume context is dirty..\n\n        const context = graphics.context;\n\n        const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n\n        if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable)\n        {\n            // TODO what if they are the same size??\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // need to get batches here.. as we need to know if we can batch or not..\n        // this also overrides the current batches..\n\n        if (graphics.didViewUpdate)\n        {\n            this._rebuild(graphics);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._addToBatcher(graphics, instructionSet);\n        }\n        else\n        {\n            this.renderer.renderPipes.batch.break(instructionSet);\n            instructionSet.add(graphics);\n        }\n    }\n\n    public updateRenderable(graphics: Graphics)\n    {\n        const batches = this._graphicsBatchesHash[graphics.uid];\n\n        if (batches)\n        {\n            for (let i = 0; i < batches.length; i++)\n            {\n                const batch = batches[i];\n\n                batch._batcher.updateElement(batch);\n            }\n        }\n    }\n\n    public destroyRenderable(graphics: Graphics)\n    {\n        if (this._graphicsBatchesHash[graphics.uid])\n        {\n            this._removeBatchForRenderable(graphics.uid);\n        }\n\n        graphics.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(graphics: Graphics)\n    {\n        if (!graphics.isRenderable) return;\n\n        const renderer = this.renderer;\n        const context = graphics.context;\n        const contextSystem = renderer.graphicsContext;\n\n        // early out if there is no actual visual stuff...\n        if (!contextSystem.getGpuContext(context).batches.length)\n        { return; }\n\n        const shader = context.customShader || this._adaptor.shader;\n\n        this.state.blendMode = graphics.groupBlendMode;\n\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = graphics.groupTransform;\n        localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n\n        color32BitToUniform(\n            graphics.groupColorAlpha,\n            localUniforms.uColor,\n            0,\n        );\n\n        this._adaptor.execute(this, graphics);\n    }\n\n    private _rebuild(graphics: Graphics)\n    {\n        const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // TODO POOL the old batches!\n\n        if (wasBatched)\n        {\n            this._removeBatchForRenderable(graphics.uid);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._initBatchesForRenderable(graphics);\n        }\n\n        graphics.batched = gpuContext.isBatchable;\n    }\n\n    private _addToBatcher(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const batchPipe = this.renderer.renderPipes.batch;\n\n        const batches = this._getBatchesForRenderable(graphics);\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            const batch = batches[i];\n\n            batchPipe.addToBatch(batch, instructionSet);\n        }\n    }\n\n    private _getBatchesForRenderable(graphics: Graphics): BatchableGraphics[]\n    {\n        return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n    }\n\n    private _initBatchesForRenderable(graphics: Graphics): BatchableGraphics[]\n    {\n        const context = graphics.context;\n\n        const gpuContext: GpuGraphicsContext = this.renderer.graphicsContext.getGpuContext(context);\n\n        const roundPixels = (this.renderer._roundPixels | graphics._roundPixels) as 0 | 1;\n\n        const batches = gpuContext.batches.map((batch) =>\n        {\n            const batchClone = BigPool.get(BatchableGraphics);\n\n            batch.copyTo(batchClone);\n\n            batchClone.renderable = graphics;\n\n            batchClone.roundPixels = roundPixels;\n\n            return batchClone;\n        });\n\n        if (this._graphicsBatchesHash[graphics.uid] === undefined)\n        {\n            // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n            graphics.on('destroyed', this._destroyRenderableBound);\n        }\n\n        this._graphicsBatchesHash[graphics.uid] = batches;\n\n        return batches;\n    }\n\n    private _removeBatchForRenderable(graphicsUid: number)\n    {\n        this._graphicsBatchesHash[graphicsUid].forEach((batch) =>\n        {\n            BigPool.return(batch as PoolItem);\n        });\n\n        this._graphicsBatchesHash[graphicsUid] = null;\n    }\n\n    public destroy()\n    {\n        this.renderer = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n        this.state = null;\n\n        for (const i in this._graphicsBatchesHash)\n        {\n            this._removeBatchForRenderable(i as unknown as number);\n        }\n\n        this._graphicsBatchesHash = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem';\nimport { GraphicsPipe } from './shared/GraphicsPipe';\n\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from './BatchableMesh';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type {\n    InstructionPipe,\n    RenderPipe\n} from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Container } from '../../container/Container';\nimport type { Mesh } from './Mesh';\n\n// TODO Record mode is a P2, will get back to this as it's not a priority\n// const recordMode = true;\n\ninterface MeshData\n{\n    batched: boolean;\n    indexSize: number;\n    vertexSize: number;\n}\n\nexport interface MeshAdaptor\n{\n    init(): void;\n    execute(meshPipe: MeshPipe, mesh: Mesh): void;\n    destroy(): void;\n}\n\nexport class MeshPipe implements RenderPipe<Mesh>, InstructionPipe<Mesh>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'mesh',\n    } as const;\n\n    public localUniforms = new UniformGroup({\n        uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n        uRound: { value: 0, type: 'f32' },\n    });\n\n    public localUniformsBindGroup = new BindGroup({\n        0: this.localUniforms,\n    });\n\n    public renderer: Renderer;\n\n    private _meshDataHash: Record<number, MeshData> = Object.create(null);\n    private _gpuBatchableMeshHash: Record<number, BatchableMesh> = Object.create(null);\n    private _adaptor: MeshAdaptor;\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer, adaptor: MeshAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init();\n\n        renderer.renderableGC.addManagedHash(this, '_gpuBatchableMeshHash');\n        renderer.renderableGC.addManagedHash(this, '_meshDataHash');\n    }\n\n    public validateRenderable(mesh: Mesh): boolean\n    {\n        const meshData = this._getMeshData(mesh);\n\n        const wasBatched = meshData.batched;\n\n        const isBatched = mesh.batched;\n\n        meshData.batched = isBatched;\n\n        if (wasBatched !== isBatched)\n        {\n            return true;\n        }\n        else if (isBatched)\n        {\n            const geometry = mesh._geometry;\n\n            // no need to break the batch if it's the same size\n            if (geometry.indices.length !== meshData.indexSize\n                    || geometry.positions.length !== meshData.vertexSize)\n            {\n                meshData.indexSize = geometry.indices.length;\n                meshData.vertexSize = geometry.positions.length;\n\n                return true;\n            }\n\n            const batchableMesh = this._getBatchableMesh(mesh);\n\n            if (batchableMesh.texture.uid !== mesh._texture.uid)\n            {\n                batchableMesh._textureMatrixUpdateId = -1;\n            }\n\n            return !batchableMesh._batcher.checkAndUpdateTexture(\n                batchableMesh,\n                mesh._texture\n            );\n        }\n\n        return false;\n    }\n\n    public addRenderable(mesh: Mesh, instructionSet: InstructionSet)\n    {\n        const batcher = this.renderer.renderPipes.batch;\n\n        const { batched } = this._getMeshData(mesh);\n\n        if (batched)\n        {\n            const gpuBatchableMesh = this._getBatchableMesh(mesh);\n\n            gpuBatchableMesh.setTexture(mesh._texture);\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            batcher.addToBatch(gpuBatchableMesh, instructionSet);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            instructionSet.add(mesh);\n        }\n    }\n\n    public updateRenderable(mesh: Mesh)\n    {\n        if (mesh.batched)\n        {\n            const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n\n            gpuBatchableMesh.setTexture(mesh._texture);\n\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n        }\n    }\n\n    public destroyRenderable(mesh: Mesh)\n    {\n        this._meshDataHash[mesh.uid] = null;\n\n        const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n\n        if (gpuMesh)\n        {\n            BigPool.return(gpuMesh as PoolItem);\n            this._gpuBatchableMeshHash[mesh.uid] = null;\n        }\n\n        mesh.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(mesh: Mesh)\n    {\n        if (!mesh.isRenderable) return;\n\n        mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n\n        const localUniforms = this.localUniforms;\n\n        localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n        localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n        localUniforms.update();\n\n        color32BitToUniform(\n            mesh.groupColorAlpha,\n            localUniforms.uniforms.uColor,\n            0\n        );\n\n        this._adaptor.execute(this, mesh);\n    }\n\n    private _getMeshData(mesh: Mesh): MeshData\n    {\n        return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n    }\n\n    private _initMeshData(mesh: Mesh): MeshData\n    {\n        this._meshDataHash[mesh.uid] = {\n            batched: mesh.batched,\n            indexSize: mesh._geometry.indices?.length,\n            vertexSize: mesh._geometry.positions?.length,\n        };\n\n        mesh.on('destroyed', this._destroyRenderableBound);\n\n        return this._meshDataHash[mesh.uid];\n    }\n\n    private _getBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n    }\n\n    private _initBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        // TODO - make this batchable graphics??\n        const gpuMesh: BatchableMesh = BigPool.get(BatchableMesh);\n\n        gpuMesh.renderable = mesh;\n        gpuMesh.setTexture(mesh._texture);\n        gpuMesh.transform = mesh.groupTransform;\n        gpuMesh.roundPixels = (this.renderer._roundPixels | mesh._roundPixels) as 0 | 1;\n\n        this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n\n        return gpuMesh;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuBatchableMeshHash)\n        {\n            if (this._gpuBatchableMeshHash[i])\n            {\n                BigPool.return(this._gpuBatchableMeshHash[i] as PoolItem);\n            }\n        }\n\n        this._gpuBatchableMeshHash = null;\n        this._meshDataHash = null;\n\n        this.localUniforms = null;\n        this.localUniformsBindGroup = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n\n        this.renderer = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { MeshPipe } from './shared/MeshPipe';\n\nextensions.add(MeshPipe);\n","import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableMeshElement } from '../../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { ViewContainer } from '../../view/ViewContainer';\nimport type { MeshGeometry } from './MeshGeometry';\n\n/**\n * A batchable mesh object.\n * @ignore\n */\nexport class BatchableMesh implements DefaultBatchableMeshElement\n{\n    public batcherName = 'default';\n\n    public _topology: Topology;\n\n    public readonly packAsQuad = false;\n    public location: number;\n\n    public renderable: ViewContainer;\n\n    public indexOffset = 0;\n    public attributeOffset = 0;\n\n    public texture: Texture;\n    public geometry: MeshGeometry;\n    public transform: Matrix;\n    public roundPixels: 0 | 1 = 0;\n\n    public _attributeStart: number;\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n    public _indexStart: number;\n    public _textureId: number;\n    public _textureMatrixUpdateId: number = -1;\n\n    private _transformedUvs: Float32Array;\n    private _uvUpdateId: number = -1;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n\n    get topology() { return this._topology || this.geometry.topology; }\n    set topology(value: Topology) { this._topology = value; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.geometry = null;\n        this._uvUpdateId = -1;\n        this._textureMatrixUpdateId = -1;\n    }\n\n    /**\n     * Sets the texture for the batchable mesh.\n     * As it does so, it resets the texture matrix update ID.\n     * this is to ensure that the texture matrix is recalculated when the uvs are referenced\n     * @param value - The texture to set.\n     */\n    public setTexture(value: Texture)\n    {\n        if (this.texture === value) return;\n\n        this.texture = value;\n        this._textureMatrixUpdateId = -1;\n    }\n\n    get uvs()\n    {\n        const geometry = this.geometry;\n\n        const uvBuffer = geometry.getBuffer('aUV');\n\n        const uvs = uvBuffer.data;\n\n        let transformedUvs = uvs;\n        const textureMatrix = this.texture.textureMatrix;\n\n        if (!textureMatrix.isSimple)\n        {\n            transformedUvs = this._transformedUvs;\n\n            if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID)\n            {\n                if (!transformedUvs || transformedUvs.length < uvs.length)\n                {\n                    transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n                }\n\n                this._textureMatrixUpdateId = textureMatrix._updateID;\n                this._uvUpdateId = uvBuffer._updateID;\n\n                textureMatrix.multiplyUvs(uvs as Float32Array, transformedUvs);\n            }\n        }\n\n        return transformedUvs as Float32Array;\n    }\n\n    get positions()\n    {\n        return this.geometry.positions;\n    }\n\n    get indices()\n    {\n        return this.geometry.indices;\n    }\n\n    get color()\n    {\n        return this.renderable.groupColorAlpha;\n    }\n\n    get groupTransform()\n    {\n        return this.renderable.groupTransform;\n    }\n\n    get attributeSize()\n    {\n        return this.geometry.positions.length / 2;\n    }\n\n    get indexSize()\n    {\n        return this.geometry.indices.length;\n    }\n}\n","import type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\nimport type { ParticleContainer } from '../shared/ParticleContainer';\nimport type { ParticleContainerAdaptor, ParticleContainerPipe } from '../shared/ParticleContainerPipe';\n\nexport class GlParticleContainerAdaptor implements ParticleContainerAdaptor\n{\n    public execute(particleContainerPipe: ParticleContainerPipe, container: ParticleContainer)\n    {\n        const state = particleContainerPipe.state;\n        const renderer = particleContainerPipe.renderer as WebGLRenderer;\n        const shader = container.shader || particleContainerPipe.defaultShader;\n\n        shader.resources.uTexture = container.texture._source;\n        shader.resources.uniforms = particleContainerPipe.localUniforms;\n\n        const gl = renderer.gl;\n\n        const buffer = particleContainerPipe.getBuffers(container);\n\n        // now lets upload and render the buffers..\n        renderer.shader.bind(shader);\n        renderer.state.set(state);\n        renderer.geometry.bind(buffer.geometry, shader.glProgram);\n\n        const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n        const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n\n        gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n    }\n}\n","/**\n * Generic Mask Stack data structure\n * @function createIndicesForQuads\n * @param {number} size - Number of quads\n * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`\n * @returns {Uint16Array|Uint32Array} - Resulting index buffer\n */\nexport function createIndicesForQuads(\n    size: number,\n    outBuffer: Uint16Array | Uint32Array | null = null\n): Uint16Array | Uint32Array\n{\n    // the total number of indices in our array, there are 6 points per quad.\n    const totalIndices = size * 6;\n\n    // Check if we need to use Uint32Array\n    if (totalIndices > 65535)\n    {\n        outBuffer ||= new Uint32Array(totalIndices); // Use Uint32Array if needed\n    }\n    else\n    {\n        outBuffer ||= new Uint16Array(totalIndices);\n    }\n\n    if (outBuffer.length !== totalIndices)\n    {\n        throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n    }\n\n    // fill the indices with the quads to draw\n    for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4)\n    {\n        outBuffer[i + 0] = j + 0;\n        outBuffer[i + 1] = j + 1;\n        outBuffer[i + 2] = j + 2;\n        outBuffer[i + 3] = j + 0;\n        outBuffer[i + 4] = j + 2;\n        outBuffer[i + 5] = j + 3;\n    }\n\n    return outBuffer;\n}\n","import {\n    getAttributeInfoFromFormat\n} from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { IParticle } from '../Particle';\nimport type { ParticleRendererProperty } from '../particleData';\n\n// TODO rename to update function\nexport type ParticleUpdateFunction = (ps: IParticle[], f32v: Float32Array, u32v: Uint32Array) => void;\n\nexport function generateParticleUpdateFunction(properties: Record<string, ParticleRendererProperty>)\n{\n    return {\n        dynamicUpdate: generateUpdateFunction(properties, true),\n        staticUpdate: generateUpdateFunction(properties, false),\n    };\n}\n\nfunction generateUpdateFunction(\n    properties: Record<string, ParticleRendererProperty>,\n    dynamic: boolean\n): ParticleUpdateFunction\n{\n    const funcFragments: string[] = [];\n\n    funcFragments.push(`\n      \n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n\n    let offset = 0;\n\n    for (const i in properties)\n    {\n        const property = properties[i];\n\n        if (dynamic !== property.dynamic) continue;\n\n        funcFragments.push(`offset = index + ${offset}`);\n\n        funcFragments.push(property.code);\n\n        const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n        offset += attributeInfo.stride / 4;\n    }\n\n    funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n\n    // add to the front..\n    funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n\n    const functionSource = funcFragments.join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function('ps', 'f32v', 'u32v', functionSource) as ParticleUpdateFunction;\n}\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\nimport type { IndexBufferArray } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport type { IParticle } from './Particle';\nimport type { ParticleRendererProperty } from './particleData';\nimport type { ParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\n/**\n * Options for creating a ParticleBuffer.\n * @property {number} size - The size of the particle buffer.\n * @property {Record<string, ParticleRendererProperty>} properties - A record of attributes that the particle container uses.\n */\nexport interface ParticleBufferOptions\n{\n    size: number;\n    properties: Record<string, ParticleRendererProperty>;\n}\n\n/**\n * The ParticleBuffer holds the buffers and geometry for a particle container.\n * It also contains the upload functions for the static and dynamic properties.\n * @internal\n */\nexport class ParticleBuffer\n{\n    /** The buffer containing static attribute data for all elements in the batch. */\n    public staticAttributeBuffer: ViewableBuffer;\n    /** The buffer containing dynamic attribute data for all elements in the batch. */\n    public dynamicAttributeBuffer: ViewableBuffer;\n\n    private readonly _staticBuffer: Buffer;\n    private readonly _dynamicBuffer: Buffer;\n\n    /** The buffer containing index data for all elements in the batch. */\n    public indexBuffer: IndexBufferArray;\n\n    private readonly _dynamicStride: number;\n    private readonly _staticStride: number;\n\n    /** The geometry of the particle buffer. */\n    public readonly geometry: Geometry;\n\n    private _size = 0;\n    private readonly _dynamicUpload: ParticleUpdateFunction;\n    private readonly _staticUpload: ParticleUpdateFunction;\n    private readonly _generateParticleUpdateCache: Record<string, {\n        dynamicUpdate: ParticleUpdateFunction;\n        staticUpdate: ParticleUpdateFunction;\n    }> = {};\n\n    constructor(options: ParticleBufferOptions)\n    {\n        // size in sprites!\n        const size = this._size = options.size ?? 1000;\n\n        // TODO add the option to specify what is dynamic!\n        const properties = options.properties;\n\n        // in bytes!\n        let staticVertexSize = 0;\n        let dynamicVertexSize = 0;\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                // dynamic.\n                dynamicVertexSize += attributeInfo.stride;\n            }\n            else\n            {\n                // static.\n                staticVertexSize += attributeInfo.stride;\n            }\n        }\n\n        this._dynamicStride = dynamicVertexSize / 4;\n        this._staticStride = staticVertexSize / 4;\n\n        this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n        this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n\n        this.indexBuffer = createIndicesForQuads(size);\n\n        // build geometry..\n\n        const geometry = new Geometry();\n\n        let dynamicOffset = 0;\n        let staticOffset = 0;\n\n        this._staticBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'static-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        this._dynamicBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'dynamic-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._dynamicBuffer,\n                    stride: this._dynamicStride * 4,\n                    offset: dynamicOffset * 4,\n                    format: property.format,\n                });\n                dynamicOffset += attributeInfo.size;\n            }\n            else\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._staticBuffer,\n                    stride: this._staticStride * 4,\n                    offset: staticOffset * 4,\n                    format: property.format,\n                });\n                staticOffset += attributeInfo.size;\n            }\n        }\n\n        geometry.addIndex(this.indexBuffer);\n\n        const uploadFunction = this.getParticleUpdate(properties);\n\n        this._dynamicUpload = uploadFunction.dynamicUpdate;\n        this._staticUpload = uploadFunction.staticUpdate;\n\n        this.geometry = geometry;\n    }\n\n    public getParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        const key = getParticleSyncKey(properties);\n\n        if (this._generateParticleUpdateCache[key])\n        {\n            return this._generateParticleUpdateCache[key];\n        }\n\n        this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n\n        return this._generateParticleUpdateCache[key];\n    }\n\n    public generateParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        return generateParticleUpdateFunction(properties);\n    }\n\n    public update(particles: IParticle[], uploadStatic: boolean)\n    {\n        // first resize the buffers if needed!\n        // TODO resize!\n        if (particles.length > this._size)\n        {\n            uploadStatic = true;\n\n            this._size = Math.max(particles.length, (this._size * 1.5) | 0);\n\n            this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n            this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n            this.indexBuffer = createIndicesForQuads(this._size);\n\n            this.geometry.indexBuffer.setDataWithSize(\n                this.indexBuffer, this.indexBuffer.byteLength, true);\n        }\n\n        const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n\n        this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n\n        this._dynamicBuffer.setDataWithSize(\n            this.dynamicAttributeBuffer.float32View, particles.length * this._dynamicStride * 4, true);\n\n        if (uploadStatic)\n        {\n            const staticAttributeBuffer = this.staticAttributeBuffer;\n\n            this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n\n            this._staticBuffer.setDataWithSize(\n                staticAttributeBuffer.float32View, particles.length * this._staticStride * 4, true);\n        }\n    }\n\n    public destroy()\n    {\n        this._staticBuffer.destroy();\n        this._dynamicBuffer.destroy();\n        this.geometry.destroy();\n    }\n}\n\nfunction getParticleSyncKey(properties: Record<string, ParticleRendererProperty>)\n{\n    const keyGen: string[] = [];\n\n    for (const key in properties)\n    {\n        const property = properties[key];\n\n        keyGen.push(key, property.code, property.dynamic ? 'd' : 's');\n    }\n\n    return keyGen.join('_');\n}\n\n","import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle';\nimport fragment from './particles.frag';\nimport vertex from './particles.vert';\nimport wgsl from './particles.wgsl';\n\nexport class ParticleShader extends Shader\n{\n    constructor()\n    {\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment\n        });\n\n        const gpuProgram = GpuProgram.from({\n            fragment: {\n                source: wgsl,\n                entryPoint: 'mainFragment'\n            },\n            vertex: {\n                source: wgsl,\n                entryPoint: 'mainVertex'\n            }\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                // this will be replaced with the texture from the particle container\n                uTexture: Texture.WHITE.source,\n                // this will be replaced with the texture style from the particle container\n                uSampler: new TextureStyle({}),\n                // this will be replaced with the local uniforms from the particle container\n                uniforms: {\n                    uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Color(0xFFFFFF), type: 'vec4<f32>' },\n                    uRound: { value: 1, type: 'f32' },\n                    uResolution: { value: [0, 0], type: 'vec2<f32>' },\n                }\n            }\n        });\n    }\n}\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { ParticleBuffer } from './ParticleBuffer';\nimport { ParticleShader } from './shader/ParticleShader';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Container } from '../../container/Container';\nimport type { ParticleContainer } from './ParticleContainer';\n\nexport interface ParticleContainerAdaptor\n{\n    execute(particleContainerPop: ParticleContainerPipe, container: ParticleContainer): void;\n}\n\n/**\n * Renderer for Particles that is designer for speed over feature set.\n * @memberof scene\n */\nexport class ParticleContainerPipe implements RenderPipe<ParticleContainer>\n{\n    /** The default shader that is used if a sprite doesn't have a more specific one. */\n    public defaultShader: Shader;\n\n    public adaptor: ParticleContainerAdaptor;\n    public readonly state = State.for2d();\n    public readonly renderer: Renderer;\n\n    private _gpuBufferHash: Record<number, ParticleBuffer> = Object.create(null);\n    // eslint-disable-next-line max-len\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as unknown as (renderable: Container) => void;\n\n    public readonly localUniforms = new UniformGroup({\n        uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uRound: { value: 1, type: 'f32' },\n        uResolution: { value: [0, 0], type: 'vec2<f32>' },\n    });\n\n    /**\n     * @param renderer - The renderer this sprite batch works for.\n     * @param adaptor\n     */\n    constructor(renderer: Renderer, adaptor: ParticleContainerAdaptor)\n    {\n        this.renderer = renderer;\n\n        this.adaptor = adaptor;\n\n        this.defaultShader = new ParticleShader();\n\n        this.state = State.for2d();\n    }\n\n    public validateRenderable(_renderable: ParticleContainer): boolean\n    {\n        // always fine :D\n        return false;\n    }\n\n    public addRenderable(renderable: ParticleContainer, instructionSet: InstructionSet)\n    {\n        this.renderer.renderPipes.batch.break(instructionSet);\n        instructionSet.add(renderable);\n    }\n\n    public getBuffers(renderable: ParticleContainer): ParticleBuffer\n    {\n        return this._gpuBufferHash[renderable.uid] || this._initBuffer(renderable);\n    }\n\n    private _initBuffer(renderable: ParticleContainer): ParticleBuffer\n    {\n        this._gpuBufferHash[renderable.uid] = new ParticleBuffer({\n            size: renderable.particleChildren.length,\n            properties: renderable._properties,\n        });\n\n        renderable.on('destroyed', this._destroyRenderableBound);\n\n        return this._gpuBufferHash[renderable.uid];\n    }\n\n    public updateRenderable(_renderable: ParticleContainer)\n    {\n        // nothing to be done here!\n\n    }\n\n    public destroyRenderable(renderable: ParticleContainer)\n    {\n        const buffer = this._gpuBufferHash[renderable.uid];\n\n        buffer.destroy();\n\n        this._gpuBufferHash[renderable.uid] = null;\n\n        renderable.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(container: ParticleContainer): void\n    {\n        const children = container.particleChildren;\n\n        if (children.length === 0)\n        {\n            return;\n        }\n\n        const renderer = this.renderer;\n        const buffer = this.getBuffers(container);\n\n        container.texture ||= children[0].texture;\n\n        const state = this.state;\n\n        buffer.update(children, container._childrenDirty);\n        container._childrenDirty = false;\n\n        state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n\n        const uniforms = this.localUniforms.uniforms;\n\n        const transformationMatrix = uniforms.uTranslationMatrix;\n\n        container.worldTransform.copyTo(transformationMatrix);\n\n        transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n\n        uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n        uniforms.uRound = renderer._roundPixels | container._roundPixels;\n\n        color32BitToUniform(\n            container.groupColorAlpha,\n            uniforms.uColor,\n            0\n        );\n\n        this.adaptor.execute(this, container);\n    }\n\n    /** Destroys the ParticleRenderer. */\n    public destroy(): void\n    {\n        if (this.defaultShader)\n        {\n            this.defaultShader.destroy();\n            this.defaultShader = null;\n        }\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor';\nimport { ParticleContainerPipe } from './ParticleContainerPipe';\n\nimport type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\n\nexport class GlParticleContainerPipe extends ParticleContainerPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n        ],\n        name: 'particle',\n    } as const;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        super(renderer, new GlParticleContainerAdaptor());\n    }\n}\n","import type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\nimport type { ParticleContainer } from '../shared/ParticleContainer';\nimport type { ParticleContainerAdaptor, ParticleContainerPipe } from '../shared/ParticleContainerPipe';\n\nexport class GpuParticleContainerAdaptor implements ParticleContainerAdaptor\n{\n    public execute(particleContainerPipe: ParticleContainerPipe, container: ParticleContainer)\n    {\n        const renderer = particleContainerPipe.renderer as WebGPURenderer;\n\n        const shader = container.shader || particleContainerPipe.defaultShader;\n\n        shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n\n        shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n\n        const state = particleContainerPipe.state;\n\n        const buffer = particleContainerPipe.getBuffers(container);\n\n        renderer.encoder.draw({\n            geometry: buffer.geometry,\n            shader: container.shader || particleContainerPipe.defaultShader,\n            state,\n            size: container.particleChildren.length * 6,\n        });\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor';\nimport { ParticleContainerPipe } from './ParticleContainerPipe';\n\nimport type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\n\nexport class GpuParticleContainerPipe extends ParticleContainerPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipes,\n        ],\n        name: 'particle',\n    } as const;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        super(renderer, new GpuParticleContainerAdaptor());\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe';\n\n// NOTE: this is the first occurrence of needing both gl and gpu pipes in the same file\n// This could cause some issues with tree shaking in the future.\n// Right now these two files do not import anything specific for a renderer, so is not an issue for now.\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\n\nimport type { MeshGeometryOptions } from '../mesh/shared/MeshGeometry';\n\n/**\n * Constructor options used for `PlaneGeometry` instances.\n * ```js\n * const planeGeometry = new PlaneGeometry({\n *    width: 100,\n *    height: 100,\n *    verticesX: 10,\n *    verticesY: 10,\n * });\n * ```\n * @see {@link scene.PlaneGeometry}\n * @memberof scene\n */\nexport interface PlaneGeometryOptions\n{\n    /** Width of plane */\n    width?: number;\n    /** Height of plane */\n    height?: number;\n    /** Number of vertices on x-axis */\n    verticesX?: number;\n    /** Number of vertices on y-axis */\n    verticesY?: number;\n}\n\n/**\n * The PlaneGeometry allows you to draw a 2d plane\n * @memberof scene\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    public static defaultOptions: PlaneGeometryOptions & MeshGeometryOptions = {\n        width: 100,\n        height: 100,\n        verticesX: 10,\n        verticesY: 10,\n    };\n\n    /** The number of vertices on x-axis */\n    public verticesX: number;\n    /** The number of vertices on y-axis */\n    public verticesY: number;\n    /** The width of plane */\n    public width: number;\n    /** The height of plane */\n    public height: number;\n\n    /**\n     * @param {PlaneGeometryOptions} options - Options to be applied to plane geometry\n     */\n    constructor(options: PlaneGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(width?: number, height?: number, verticesX?: number, verticesY?: number);\n    constructor(...args: [PlaneGeometryOptions?] | [number?, number?, number?, number?])\n    {\n        super({});\n\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number')\n        {\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead');\n            // #endif\n\n            options = {\n                width: options,\n                height: args[1],\n                verticesX: args[2],\n                verticesY: args[3],\n            };\n        }\n\n        this.build(options);\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @param options - Options to be applied to plane geometry\n     */\n    public build(options: PlaneGeometryOptions): void\n    {\n        options = { ...PlaneGeometry.defaultOptions, ...options };\n\n        this.verticesX = this.verticesX ?? options.verticesX;\n        this.verticesY = this.verticesY ?? options.verticesY;\n\n        this.width = this.width ?? options.width;\n        this.height = this.height ?? options.height;\n\n        const total = this.verticesX * this.verticesY;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const verticesX = this.verticesX - 1;\n        const verticesY = this.verticesY - 1;\n\n        const sizeX = (this.width) / verticesX;\n        const sizeY = (this.height) / verticesY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.verticesX);\n            const y = ((i / this.verticesX) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / verticesX, y / verticesY);\n        }\n\n        const totalSub = verticesX * verticesY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % verticesX;\n            const ypos = (i / verticesX) | 0;\n\n            const value = (ypos * this.verticesX) + xpos;\n            const value2 = (ypos * this.verticesX) + xpos + 1;\n            const value3 = ((ypos + 1) * this.verticesX) + xpos;\n            const value4 = ((ypos + 1) * this.verticesX) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint32Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry';\nimport { type PointData } from '~/maths/point/PointData';\n\n/**\n * Options for the NineSliceGeometry.\n * @memberof scene\n */\nexport interface NineSliceGeometryOptions\n{\n\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    width?: number\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    height?: number\n    /** The original width of the texture */\n    originalWidth?: number\n    /** The original height of the texture */\n    originalHeight?: number\n    /** The width of the left column. */\n    leftWidth?: number\n    /** The height of the top row. */\n    topHeight?: number\n    /** The width of the right column. */\n    rightWidth?: number\n    /** The height of the bottom row. */\n    bottomHeight?: number\n\n    /** The anchor point of the NineSliceSprite. */\n    anchor?: PointData\n}\n\n/**\n * The NineSliceGeometry class allows you to create a NineSlicePlane object.\n * @memberof scene\n */\nexport class NineSliceGeometry extends PlaneGeometry\n{\n    /** The default options for the NineSliceGeometry. */\n    public static defaultOptions: NineSliceGeometryOptions = {\n        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        width: 100,\n        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        height: 100,\n        /** The width of the left column. */\n        leftWidth: 10,\n        /** The height of the top row. */\n        topHeight: 10,\n        /** The width of the right column. */\n        rightWidth: 10,\n        /** The height of the bottom row. */\n        bottomHeight: 10,\n\n        /** The original width of the texture */\n        originalWidth: 100,\n        /** The original height of the texture */\n        originalHeight: 100,\n    };\n\n    public _leftWidth: number;\n    public _rightWidth: number;\n    public _topHeight: number;\n    public _bottomHeight: number;\n\n    private _originalWidth: number;\n    private _originalHeight: number;\n    private _anchorX: any;\n    private _anchorY: number;\n\n    constructor(options: NineSliceGeometryOptions = {})\n    {\n        options = { ...NineSliceGeometry.defaultOptions, ...options };\n\n        super({\n            width: options.width,\n            height: options.height,\n            verticesX: 4,\n            verticesY: 4,\n        });\n\n        this.update(options);\n    }\n\n    /**\n     * Updates the NineSliceGeometry with the options.\n     * @param options - The options of the NineSliceGeometry.\n     */\n    public update(options: NineSliceGeometryOptions)\n    {\n        this.width = options.width ?? this.width;\n        this.height = options.height ?? this.height;\n        this._originalWidth = options.originalWidth ?? this._originalWidth;\n        this._originalHeight = options.originalHeight ?? this._originalHeight;\n        this._leftWidth = options.leftWidth ?? this._leftWidth;\n        this._rightWidth = options.rightWidth ?? this._rightWidth;\n        this._topHeight = options.topHeight ?? this._topHeight;\n        this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n\n        this._anchorX = options.anchor?.x;\n        this._anchorY = options.anchor?.y;\n\n        this.updateUvs();\n        this.updatePositions();\n    }\n\n    /** Updates the positions of the vertices. */\n    public updatePositions()\n    {\n        const p = this.positions;\n        const {\n            width,\n            height,\n            _leftWidth,\n            _rightWidth,\n            _topHeight,\n            _bottomHeight,\n            _anchorX,\n            _anchorY,\n        } = this;\n\n        const w = _leftWidth + _rightWidth;\n        const scaleW = width > w ? 1.0 : width / w;\n\n        const h = _topHeight + _bottomHeight;\n        const scaleH = height > h ? 1.0 : height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        const anchorOffsetX = _anchorX * width;\n        const anchorOffsetY = _anchorY * height;\n\n        p[0] = p[8] = p[16] = p[24] = -anchorOffsetX;\n        p[2] = p[10] = p[18] = p[26] = (_leftWidth * scale) - anchorOffsetX;\n        p[4] = p[12] = p[20] = p[28] = width - (_rightWidth * scale) - anchorOffsetX;\n        p[6] = p[14] = p[22] = p[30] = width - anchorOffsetX;\n\n        p[1] = p[3] = p[5] = p[7] = -anchorOffsetY;\n        p[9] = p[11] = p[13] = p[15] = (_topHeight * scale) - anchorOffsetY;\n        p[17] = p[19] = p[21] = p[23] = height - (_bottomHeight * scale) - anchorOffsetY;\n        p[25] = p[27] = p[29] = p[31] = height - anchorOffsetY;\n\n        this.getBuffer('aPosition').update();\n    }\n\n    /** Updates the UVs of the vertices. */\n    public updateUvs()\n    {\n        const uvs = this.uvs;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        const _uvw = 1.0 / this._originalWidth;\n        const _uvh = 1.0 / this._originalHeight;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.getBuffer('aUV').update();\n    }\n}\n\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { NineSliceGeometry } from './NineSliceGeometry';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Container } from '../container/Container';\nimport type { NineSliceSprite } from './NineSliceSprite';\n\nexport class NineSliceSpritePipe implements RenderPipe<NineSliceSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'nineSliceSprite',\n    } as const;\n\n    private readonly _renderer: Renderer;\n    private readonly _gpuSpriteHash: Record<number, BatchableMesh> = Object.create(null);\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_gpuSpriteHash');\n    }\n\n    public addRenderable(sprite: NineSliceSprite, instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n    }\n\n    public updateRenderable(sprite: NineSliceSprite)\n    {\n        const gpuSprite = this._gpuSpriteHash[sprite.uid];\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite._batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: NineSliceSprite): boolean\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        return !gpuSprite._batcher.checkAndUpdateTexture(\n            gpuSprite,\n            sprite._texture\n        );\n    }\n\n    public destroyRenderable(sprite: NineSliceSprite)\n    {\n        const batchableMesh = this._gpuSpriteHash[sprite.uid];\n\n        // this will call reset!\n        BigPool.return(batchableMesh.geometry as PoolItem);\n        BigPool.return(batchableMesh as PoolItem);\n\n        this._gpuSpriteHash[sprite.uid] = null;\n\n        sprite.off('destroyed', this._destroyRenderableBound);\n    }\n\n    private _updateBatchableSprite(sprite: NineSliceSprite, batchableSprite: BatchableMesh)\n    {\n        (batchableSprite.geometry as NineSliceGeometry)\n            .update(sprite);\n\n        // = sprite.bounds;\n        batchableSprite.setTexture(sprite._texture);\n    }\n\n    private _getGpuSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        const batchableMesh = BigPool.get(BatchableMesh);\n\n        batchableMesh.geometry = BigPool.get(NineSliceGeometry);\n        batchableMesh.renderable = sprite;\n        batchableMesh.transform = sprite.groupTransform;\n        batchableMesh.texture = sprite._texture;\n        batchableMesh.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        this._gpuSpriteHash[sprite.uid] = batchableMesh;\n\n        // if the sprite has not been updated by the view, we need to update the batchable mesh now.\n        if (!sprite.didViewUpdate)\n        {\n            this._updateBatchableSprite(sprite, batchableMesh);\n        }\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        sprite.on('destroyed', this._destroyRenderableBound);\n\n        return batchableMesh;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuSpriteHash)\n        {\n            const batchableMesh = this._gpuSpriteHash[i];\n\n            batchableMesh.geometry.destroy();\n        }\n\n        (this._gpuSpriteHash as null) = null;\n        (this._renderer as null) = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe';\n\nextensions.add(NineSliceSpritePipe);\n","export const tilingBit = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    }\n\n};\n\nexport const tilingBitGl = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `,\n        main: /* glsl */`\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `,\n        main: /* glsl */`\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    }\n\n};\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { tilingBit, tilingBitGl } from './tilingBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\nexport class TilingSpriteShader extends Shader\n{\n    constructor()\n    {\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBit,\n                tilingBit,\n                roundPixelsBit,\n            ],\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBitGl,\n                tilingBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        const tilingUniforms = new UniformGroup({\n            uMapCoord: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: 'vec4<f32>' },\n            uClampOffset: { value: new Float32Array([0, 0]), type: 'vec2<f32>' },\n            uTextureTransform: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: 'vec4<f32>' },\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: new UniformGroup({\n                    uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n                    uRound: { value: 0, type: 'f32' },\n                }),\n                tilingUniforms,\n                uTexture: Texture.EMPTY.source,\n                uSampler: Texture.EMPTY.source.style,\n            }\n        });\n    }\n\n    public updateUniforms(\n        width: number, height: number,\n        matrix: Matrix,\n        anchorX: number, anchorY: number,\n        texture: Texture\n    ): void\n    {\n        const tilingUniforms = this.resources.tilingUniforms;\n\n        const textureWidth = texture.width;\n        const textureHeight = texture.height;\n        const textureMatrix = texture.textureMatrix;\n\n        const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n\n        uTextureTransform.set(\n            matrix.a * textureWidth / width,\n            matrix.b * textureWidth / height,\n            matrix.c * textureHeight / width,\n            matrix.d * textureHeight / height,\n            matrix.tx / width,\n            matrix.ty / height);\n\n        uTextureTransform.invert();\n\n        tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n        tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n        tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n        tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n        tilingUniforms.uniforms.uSizeAnchor[0] = width;\n        tilingUniforms.uniforms.uSizeAnchor[1] = height;\n        tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n        tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n\n        if (texture)\n        {\n            this.resources.uTexture = texture.source;\n            this.resources.uSampler = texture.source.style;\n        }\n    }\n}\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry';\n\nexport class QuadGeometry extends MeshGeometry\n{\n    constructor()\n    {\n        super({\n            positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            indices: new Uint32Array([0, 1, 2, 0, 2, 3]),\n        });\n    }\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../rendering/renderers/shared/state/State';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader';\nimport { QuadGeometry } from './utils/QuadGeometry';\nimport { setPositions } from './utils/setPositions';\nimport { setUvs } from './utils/setUvs';\n\nimport type { WebGLRenderer } from '../../rendering/renderers/gl/WebGLRenderer';\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Container } from '../container/Container';\nimport type { TilingSprite } from './TilingSprite';\n\ninterface RenderableData\n{\n    canBatch: boolean;\n    renderable: TilingSprite\n    batchableMesh?: BatchableMesh;\n    geometry?: MeshGeometry;\n    shader?: TilingSpriteShader;\n}\n\nconst sharedQuad = new QuadGeometry();\n\nexport class TilingSpritePipe implements RenderPipe<TilingSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'tilingSprite',\n    } as const;\n\n    private _renderer: Renderer;\n    private readonly _state: State = State.default2d;\n    private readonly _tilingSpriteDataHash: Record<number, RenderableData> = Object.create(null);\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_tilingSpriteDataHash');\n    }\n\n    public validateRenderable(renderable: TilingSprite): boolean\n    {\n        const tilingSpriteData = this._getTilingSpriteData(renderable);\n\n        const couldBatch = tilingSpriteData.canBatch;\n\n        this._updateCanBatch(renderable);\n\n        const canBatch = tilingSpriteData.canBatch;\n\n        if (canBatch && canBatch === couldBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            return !batchableMesh._batcher.checkAndUpdateTexture(\n                batchableMesh,\n                renderable.texture\n            );\n        }\n\n        return (couldBatch !== canBatch);\n\n        // // TODO - only update if required?\n        // // only texture\n        // // only uvs\n        // // only positions?\n    }\n\n    public addRenderable(tilingSprite: TilingSprite, instructionSet: InstructionSet)\n    {\n        const batcher = this._renderer.renderPipes.batch;\n\n        // init\n        this._updateCanBatch(tilingSprite);\n\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry, canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            tilingSpriteData.batchableMesh ||= new BatchableMesh();\n\n            const batchableMesh = tilingSpriteData.batchableMesh;\n\n            if (tilingSprite.didViewUpdate)\n            {\n                this._updateBatchableMesh(tilingSprite);\n\n                batchableMesh.geometry = geometry;\n                batchableMesh.renderable = tilingSprite;\n                batchableMesh.transform = tilingSprite.groupTransform;\n                batchableMesh.setTexture(tilingSprite._texture);\n            }\n\n            batchableMesh.roundPixels = (this._renderer._roundPixels | tilingSprite._roundPixels) as 0 | 1;\n\n            batcher.addToBatch(batchableMesh, instructionSet);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            tilingSpriteData.shader ||= new TilingSpriteShader();\n\n            this.updateRenderable(tilingSprite);\n\n            instructionSet.add(tilingSprite);\n        }\n    }\n\n    public execute(tilingSprite: TilingSprite)\n    {\n        const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n\n        shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n\n        // deal with local uniforms...\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n        localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n\n        color32BitToUniform(\n            tilingSprite.groupColorAlpha,\n            localUniforms.uColor,\n            0\n        );\n\n        this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n\n        this._renderer.encoder.draw({\n            geometry: sharedQuad,\n            shader,\n            state: this._state,\n        });\n    }\n\n    public updateRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            if (tilingSprite.didViewUpdate) this._updateBatchableMesh(tilingSprite);\n\n            batchableMesh._batcher.updateElement(batchableMesh);\n        }\n        else if (tilingSprite.didViewUpdate)\n        {\n            const { shader } = tilingSpriteData;\n            // now update uniforms...\n\n            shader.updateUniforms(\n                tilingSprite.width,\n                tilingSprite.height,\n                tilingSprite._tileTransform.matrix,\n                tilingSprite.anchor.x,\n                tilingSprite.anchor.y,\n                tilingSprite.texture,\n            );\n        }\n    }\n\n    public destroyRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        tilingSpriteData.batchableMesh = null;\n\n        tilingSpriteData.shader?.destroy();\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = null;\n\n        tilingSprite.off('destroyed', this._destroyRenderableBound);\n    }\n\n    private _getTilingSpriteData(renderable: TilingSprite): RenderableData\n    {\n        return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n    }\n\n    private _initTilingSpriteData(tilingSprite: TilingSprite): RenderableData\n    {\n        const geometry = new MeshGeometry({\n            indices: sharedQuad.indices,\n            positions: sharedQuad.positions.slice(),\n            uvs: sharedQuad.uvs.slice(),\n        });\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = {\n            canBatch: true,\n            renderable: tilingSprite,\n            geometry,\n        };\n\n        tilingSprite.on('destroyed', this._destroyRenderableBound);\n\n        return this._tilingSpriteDataHash[tilingSprite.uid];\n    }\n\n    private _updateBatchableMesh(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry } = renderableData;\n\n        const style = tilingSprite.texture.source.style;\n\n        if (style.addressMode !== 'repeat')\n        {\n            style.addressMode = 'repeat';\n            style.update();\n        }\n\n        setUvs(tilingSprite, geometry.uvs);\n        setPositions(tilingSprite, geometry.positions);\n    }\n\n    public destroy()\n    {\n        for (const i in this._tilingSpriteDataHash)\n        {\n            this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n        }\n\n        (this._tilingSpriteDataHash as null) = null;\n        this._renderer = null;\n    }\n\n    private _updateCanBatch(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n        const texture = tilingSprite.texture;\n\n        let _nonPowOf2wrapping = true;\n\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            _nonPowOf2wrapping = (this._renderer as WebGLRenderer).context.supports.nonPowOf2wrapping;\n        }\n\n        renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n\n        return renderableData.canBatch;\n    }\n}\n\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { applyMatrix } from './applyMatrix';\n\nimport type { TilingSprite } from '../TilingSprite';\n\nexport function setUvs(tilingSprite: TilingSprite, uvs: Float32Array)\n{\n    const texture = tilingSprite.texture;\n\n    const width = texture.frame.width;\n    const height = texture.frame.height;\n\n    let anchorX = 0;\n    let anchorY = 0;\n\n    if (tilingSprite.applyAnchorToTexture)\n    {\n        anchorX = tilingSprite.anchor.x;\n        anchorY = tilingSprite.anchor.y;\n    }\n\n    uvs[0] = uvs[6] = -anchorX;\n    uvs[2] = uvs[4] = 1 - anchorX;\n    uvs[1] = uvs[3] = -anchorY;\n    uvs[5] = uvs[7] = 1 - anchorY;\n\n    const textureMatrix = Matrix.shared;\n\n    textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n\n    textureMatrix.tx /= tilingSprite.width;\n    textureMatrix.ty /= tilingSprite.height;\n\n    textureMatrix.invert();\n\n    textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n\n    applyMatrix(uvs, 2, 0, textureMatrix);\n}\n","import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { TypedArray } from '../../../rendering/renderers/shared/buffer/Buffer';\n\nexport function applyMatrix(array: TypedArray, stride: number, offset: number, matrix: Matrix)\n{\n    let index = 0;\n    const size = array.length / (stride || 2);\n\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n\n    offset *= stride;\n\n    while (index < size)\n    {\n        const x = array[offset];\n        const y = array[offset + 1];\n\n        array[offset] = (a * x) + (c * y) + tx;\n        array[offset + 1] = (b * x) + (d * y) + ty;\n\n        offset += stride;\n\n        index++;\n    }\n}\n","import type { TilingSprite } from '../TilingSprite';\n\nexport function setPositions(tilingSprite: TilingSprite, positions: Float32Array)\n{\n    const anchorX = tilingSprite.anchor.x;\n    const anchorY = tilingSprite.anchor.y;\n\n    positions[0] = -anchorX * tilingSprite.width;\n    positions[1] = -anchorY * tilingSprite.height;\n    positions[2] = (1 - anchorX) * tilingSprite.width;\n    positions[3] = -anchorY * tilingSprite.height;\n    positions[4] = (1 - anchorX) * tilingSprite.width;\n    positions[5] = (1 - anchorY) * tilingSprite.height;\n    positions[6] = -anchorX * tilingSprite.width;\n    positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { TilingSpritePipe } from './TilingSpritePipe';\n\nextensions.add(TilingSpritePipe);\n","import type { Matrix } from '../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableQuadElement } from '../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { BoundsData } from '../container/bounds/Bounds';\nimport type { Container } from '../container/Container';\n\n/**\n * A batchable sprite object.\n * @ignore\n */\nexport class BatchableSprite implements DefaultBatchableQuadElement\n{\n    public batcherName = 'default';\n    public topology: Topology = 'triangle-list';\n\n    // batch specific..\n    public readonly attributeSize = 4;\n    public readonly indexSize = 6;\n    public readonly packAsQuad = true;\n\n    public transform: Matrix;\n\n    public renderable: Container;\n    public texture: Texture;\n    public bounds: BoundsData;\n\n    public roundPixels: 0 | 1 = 0;\n\n    public _indexStart: number;\n    public _textureId: number;\n    public _attributeStart = 0; // location in the buffer\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n    get color() { return this.renderable.groupColorAlpha; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.bounds = null;\n    }\n}\n","import { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\nimport { ViewContainer, type ViewContainerOptions } from '../../view/ViewContainer';\nimport { GraphicsContext } from './GraphicsContext';\n\nimport type { ColorSource } from '../../../color/Color';\nimport type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { PointData } from '../../../maths/point/PointData';\nimport type { Instruction } from '../../../rendering/renderers/shared/instructions/Instruction';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Bounds } from '../../container/bounds/Bounds';\nimport type { ContextDestroyOptions, DestroyOptions } from '../../container/destroyTypes';\nimport type { FillInput, FillStyle, StrokeStyle } from './FillTypes';\nimport type { GraphicsPath } from './path/GraphicsPath';\nimport type { RoundedPoint } from './path/roundShape';\n\n/**\n * Constructor options used for `Graphics` instances.\n * ```js\n * const graphics = new Graphics({\n *    fillStyle: { color: 0xff0000, alpha: 0.5 },\n *    strokeStyle: { color: 0x00ff00, width: 2 },\n * });\n * ```\n * @see {@link scene.Graphics}\n * @memberof scene\n */\nexport interface GraphicsOptions extends PixiMixins.GraphicsOptions, ViewContainerOptions\n{\n    /** The GraphicsContext to use, useful for reuse and optimisation */\n    context?: GraphicsContext;\n    /** Whether or not to round the x/y position. */\n    roundPixels?: boolean;\n}\nexport interface Graphics extends PixiMixins.Graphics, ViewContainer {}\n\n/**\n * The Graphics class is primarily used to render primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.  However, you can also use a Graphics\n * object to build a list of primitives to use as a mask, or as a complex hitArea.\n * @memberof scene\n * @extends scene.Container\n */\nexport class Graphics extends ViewContainer implements Instruction\n{\n    public override readonly renderPipeId: string = 'graphics';\n    public batched: boolean;\n\n    private _context: GraphicsContext;\n    private readonly _ownedContext: GraphicsContext;\n\n    /**\n     * @param options - Options for the Graphics.\n     */\n    constructor(options?: GraphicsOptions | GraphicsContext)\n    {\n        if (options instanceof GraphicsContext)\n        {\n            options = { context: options };\n        }\n\n        const { context, roundPixels, ...rest } = options || {};\n\n        super({\n            label: 'Graphics',\n            ...rest\n        });\n\n        if (!context)\n        {\n            this._context = this._ownedContext = new GraphicsContext();\n        }\n        else\n        {\n            this._context = context;\n        }\n\n        this._context.on('update', this.onViewUpdate, this);\n\n        this.allowChildren = false;\n        this.roundPixels = roundPixels ?? false;\n    }\n\n    set context(context: GraphicsContext)\n    {\n        if (context === this._context) return;\n\n        this._context.off('update', this.onViewUpdate, this);\n\n        this._context = context;\n\n        // TODO store this bound function somewhere else..\n        this._context.on('update', this.onViewUpdate, this);\n\n        this.onViewUpdate();\n    }\n\n    get context(): GraphicsContext\n    {\n        return this._context;\n    }\n\n    /**\n     * The local bounds of the graphic.\n     * @type {rendering.Bounds}\n     */\n    override get bounds(): Bounds\n    {\n        return this._context.bounds;\n    }\n\n    /**\n     * Graphics objects do not need to update their bounds as the context handles this.\n     * @private\n     */\n    protected updateBounds(): void { /** */ }\n\n    /**\n     * Checks if the object contains the given point.\n     * @param point - The point to check\n     */\n    public override containsPoint(point: PointData)\n    {\n        return this._context.containsPoint(point);\n    }\n\n    /**\n     * Destroys this graphics renderable and optionally its context.\n     * @param options - Options parameter. A boolean will act as if all options\n     *\n     * If the context was created by this graphics and `destroy(false)` or `destroy()` is called\n     * then the context will still be destroyed.\n     *\n     * If you want to explicitly not destroy this context that this graphics created,\n     * then you should pass destroy({ context: false })\n     *\n     * If the context was passed in as an argument to the constructor then it will not be destroyed\n     * @param {boolean} [options.texture=false] - Should destroy the texture of the graphics context\n     * @param {boolean} [options.textureSource=false] - Should destroy the texture source of the graphics context\n     * @param {boolean} [options.context=false] - Should destroy the context\n     */\n    public override destroy(options?: DestroyOptions): void\n    {\n        if (this._ownedContext && !options)\n        {\n            this._ownedContext.destroy(options);\n        }\n        else if (options === true || (options as ContextDestroyOptions)?.context === true)\n        {\n            this._context.destroy(options);\n        }\n\n        (this._ownedContext as null) = null;\n        this._context = null;\n\n        super.destroy(options);\n    }\n\n    private _callContextMethod(method: keyof GraphicsContext, args: any[]): this\n    {\n        (this.context as any)[method](...args);\n\n        return this;\n    }\n\n    // --------------------------------------- GraphicsContext methods ---------------------------------------\n    /**\n     * Sets the current fill style of the graphics context. The fill style can be a color, gradient,\n     * pattern, or a more complex style defined by a FillStyle object.\n     * @param {FillInput} args - The fill style to apply. This can be a simple color, a gradient or\n     * pattern object, or a FillStyle or ConvertedFillStyle object.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setFillStyle(...args: Parameters<GraphicsContext['setFillStyle']>): this\n    {\n        return this._callContextMethod('setFillStyle', args);\n    }\n\n    /**\n     * Sets the current stroke style of the graphics context. Similar to fill styles, stroke styles can\n     * encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n     * @param {StrokeInput} args - The stroke style to apply. Can be defined as a color, a gradient or pattern,\n     * or a StrokeStyle or ConvertedStrokeStyle object.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setStrokeStyle(...args: Parameters<GraphicsContext['setStrokeStyle']>): this\n    {\n        return this._callContextMethod('setStrokeStyle', args);\n    }\n\n    /**\n     * Fills the current or given path with the current fill style. This method can optionally take\n     * a color and alpha for a simple fill, or a more complex FillStyle object for advanced fills.\n     * @param {FillInput} style - (Optional) The style to fill the path with. Can be a color, gradient, pattern, or a\n     * complex style object. If omitted, uses the current fill style.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public fill(style?: FillInput): this;\n    /** @deprecated 8.0.0 */\n    public fill(color: ColorSource, alpha?: number): this;\n    public fill(...args: [FillStyle | ColorSource, number?]): this\n    {\n        return this._callContextMethod('fill', args);\n    }\n    /**\n     * Strokes the current path with the current stroke style. This method can take an optional\n     * FillStyle parameter to define the stroke's appearance, including its color, width, and other properties.\n     * @param {FillStyle} args - (Optional) The stroke style to apply. Can be defined as a simple color or a more\n     * complex style object. If omitted, uses the current stroke style.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public stroke(...args: Parameters<GraphicsContext['stroke']>): this\n    {\n        return this._callContextMethod('stroke', args);\n    }\n    /**\n     * Adds a texture to the graphics context. This method supports multiple overloads for specifying the texture,\n     * tint, and dimensions. If only a texture is provided, it uses the texture's width and height for drawing.\n     * Additional parameters allow for specifying a tint color, and custom dimensions for the texture drawing area.\n     * @param texture - The Texture object to use.\n     * @param tint - (Optional) A ColorSource to tint the texture. If not provided, defaults to white (0xFFFFFF).\n     * @param dx - (Optional) The x-coordinate in the destination canvas at which to place the top-left corner of\n     * the source image.\n     * @param dy - (Optional) The y-coordinate in the destination canvas at which to place the top-left corner of\n     * the source image.\n     * @param dw - (Optional) The width of the rectangle within the source image to draw onto the destination canvas.\n     * If not provided, uses the texture's frame width.\n     * @param dh - (Optional) The height of the rectangle within the source image to draw onto the destination canvas.\n     * If not provided, uses the texture's frame height.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public texture(texture: Texture, tint?: ColorSource, dx?: number, dy?: number, dw?: number, dh?: number): this;\n    public texture(texture: Texture): this;\n    public texture(...args: [Texture, number?, number?, number?, number?, number?]): this\n    {\n        return this._callContextMethod('texture', args);\n    }\n    /**\n     * Resets the current path. Any previous path and its commands are discarded and a new path is\n     * started. This is typically called before beginning a new shape or series of drawing commands.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public beginPath(): this\n    {\n        return this._callContextMethod('beginPath', []);\n    }\n    /**\n     * Applies a cutout to the last drawn shape. This is used to create holes or complex shapes by\n     * subtracting a path from the previously drawn path. If a hole is not completely in a shape, it will\n     * fail to cut correctly!\n     */\n    public cut(): this\n    {\n        return this._callContextMethod('cut', []);\n    }\n    /**\n     * Adds an arc to the current path, which is centered at (x, y) with the specified radius,\n     * starting and ending angles, and direction.\n     * @param x - The x-coordinate of the arc's center.\n     * @param y - The y-coordinate of the arc's center.\n     * @param radius - The arc's radius.\n     * @param startAngle - The starting angle, in radians.\n     * @param endAngle - The ending angle, in radians.\n     * @param counterclockwise - (Optional) Specifies whether the arc is drawn counterclockwise (true) or clockwise\n     * (false). Defaults to false.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): this;\n    public arc(...args: Parameters<GraphicsContext['arc']>): this\n    {\n        return this._callContextMethod('arc', args);\n    }\n    /**\n     * Adds an arc to the current path with the given control points and radius, connected to the previous point\n     * by a straight line if necessary.\n     * @param x1 - The x-coordinate of the first control point.\n     * @param y1 - The y-coordinate of the first control point.\n     * @param x2 - The x-coordinate of the second control point.\n     * @param y2 - The y-coordinate of the second control point.\n     * @param radius - The arc's radius.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this;\n    public arcTo(...args: Parameters<GraphicsContext['arcTo']>): this\n    {\n        return this._callContextMethod('arcTo', args);\n    }\n    /**\n     * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n     * @param rx - The x-radius of the ellipse.\n     * @param ry - The y-radius of the ellipse.\n     * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n     * to the x-axis of the coordinate system, in degrees.\n     * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n     * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n     * @param x - The x-coordinate of the arc's end point.\n     * @param y - The y-coordinate of the arc's end point.\n     * @returns The instance of the current object for chaining.\n     */\n    public arcToSvg(\n        rx: number, ry: number, xAxisRotation: number, largeArcFlag: number, sweepFlag: number, x: number, y: number\n    ): this;\n    public arcToSvg(...args: Parameters<GraphicsContext['arcToSvg']>): this\n    {\n        return this._callContextMethod('arcToSvg', args);\n    }\n    /**\n     * Adds a cubic Bezier curve to the path.\n     * It requires three points: the first two are control points and the third one is the end point.\n     * The starting point is the last point in the current path.\n     * @param cp1x - The x-coordinate of the first control point.\n     * @param cp1y - The y-coordinate of the first control point.\n     * @param cp2x - The x-coordinate of the second control point.\n     * @param cp2y - The y-coordinate of the second control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public bezierCurveTo(\n        cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number, smoothness?: number\n    ): this;\n    public bezierCurveTo(...args: Parameters<GraphicsContext['bezierCurveTo']>): this\n    {\n        return this._callContextMethod('bezierCurveTo', args);\n    }\n    /**\n     * Closes the current path by drawing a straight line back to the start.\n     * If the shape is already closed or there are no points in the path, this method does nothing.\n     * @returns The instance of the current object for chaining.\n     */\n    public closePath(): this\n    {\n        return this._callContextMethod('closePath', []);\n    }\n    /**\n     * Draws an ellipse at the specified location and with the given x and y radii.\n     * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n     * @param x - The x-coordinate of the center of the ellipse.\n     * @param y - The y-coordinate of the center of the ellipse.\n     * @param radiusX - The horizontal radius of the ellipse.\n     * @param radiusY - The vertical radius of the ellipse.\n     * @returns The instance of the current object for chaining.\n     */\n    public ellipse(x: number, y: number, radiusX: number, radiusY: number): this;\n    public ellipse(...args: Parameters<GraphicsContext['ellipse']>): this\n    {\n        return this._callContextMethod('ellipse', args);\n    }\n    /**\n     * Draws a circle shape. This method adds a new circle path to the current drawing.\n     * @param x - The x-coordinate of the center of the circle.\n     * @param y - The y-coordinate of the center of the circle.\n     * @param radius - The radius of the circle.\n     * @returns The instance of the current object for chaining.\n     */\n    public circle(x: number, y: number, radius: number): this;\n    public circle(...args: Parameters<GraphicsContext['circle']>): this\n    {\n        return this._callContextMethod('circle', args);\n    }\n    /**\n     * Adds another `GraphicsPath` to this path, optionally applying a transformation.\n     * @param path - The `GraphicsPath` to add.\n     * @returns The instance of the current object for chaining.\n     */\n    public path(path: GraphicsPath): this;\n    public path(...args: Parameters<GraphicsContext['path']>): this\n    {\n        return this._callContextMethod('path', args);\n    }\n    /**\n     * Connects the current point to a new point with a straight line. This method updates the current path.\n     * @param x - The x-coordinate of the new point to connect to.\n     * @param y - The y-coordinate of the new point to connect to.\n     * @returns The instance of the current object for chaining.\n     */\n    public lineTo(x: number, y: number): this;\n    public lineTo(...args: Parameters<GraphicsContext['lineTo']>): this\n    {\n        return this._callContextMethod('lineTo', args);\n    }\n    /**\n     * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n     * @param x - The x-coordinate for the starting point.\n     * @param y - The y-coordinate for the starting point.\n     * @returns The instance of the current object for chaining.\n     */\n    public moveTo(x: number, y: number): this;\n    public moveTo(...args: Parameters<GraphicsContext['moveTo']>): this\n    {\n        return this._callContextMethod('moveTo', args);\n    }\n    /**\n     * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n     * The starting point is the last point in the current path.\n     * @param cpx - The x-coordinate of the control point.\n     * @param cpy - The y-coordinate of the control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public quadraticCurveTo(cpx: number, cpy: number, x: number, y: number, smoothness?: number): this;\n    public quadraticCurveTo(...args: Parameters<GraphicsContext['quadraticCurveTo']>): this\n    {\n        return this._callContextMethod('quadraticCurveTo', args);\n    }\n    /**\n     * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @returns The instance of the current object for chaining.\n     */\n    public rect(x: number, y: number, w: number, h: number): this;\n    public rect(...args: Parameters<GraphicsContext['rect']>): this\n    {\n        return this._callContextMethod('rect', args);\n    }\n    /**\n     * Draws a rectangle with rounded corners.\n     * The corner radius can be specified to determine how rounded the corners should be.\n     * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundRect(x: number, y: number, w: number, h: number, radius?: number): this;\n    public roundRect(...args: Parameters<GraphicsContext['roundRect']>): this\n    {\n        return this._callContextMethod('roundRect', args);\n    }\n    /**\n     * Draws a polygon shape by specifying a sequence of points. This method allows for the creation of complex polygons,\n     * which can be both open and closed. An optional transformation can be applied, enabling the polygon to be scaled,\n     * rotated, or translated as needed.\n     * @param points - An array of numbers, or an array of PointData objects eg [{x,y}, {x,y}, {x,y}]\n     * representing the x and y coordinates, of the polygon's vertices, in sequence.\n     * @param close - A boolean indicating whether to close the polygon path. True by default.\n     * @returns The instance of the current object for chaining further drawing commands.\n     */\n    public poly(points: number[] | PointData[], close?: boolean): this;\n    public poly(...args: Parameters<GraphicsContext['poly']>): this\n    {\n        return this._callContextMethod('poly', args);\n    }\n    /**\n     * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n     * @returns The instance of the current object for chaining.\n     */\n    public regularPoly(x: number, y: number, radius: number, sides: number, rotation?: number, transform?: Matrix): this;\n    public regularPoly(...args: Parameters<GraphicsContext['regularPoly']>): this\n    {\n        return this._callContextMethod('regularPoly', args);\n    }\n    /**\n     * Draws a polygon with rounded corners.\n     * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param corner - The radius of the rounding of the corners.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundPoly(x: number, y: number, radius: number, sides: number, corner: number, rotation?: number): this;\n    public roundPoly(...args: Parameters<GraphicsContext['roundPoly']>): this\n    {\n        return this._callContextMethod('roundPoly', args);\n    }\n    /**\n     * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n     * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n     * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n     * A minimum of 3 points is required.\n     * @param radius - The default radius for the corners.\n     * This radius is applied to all corners unless overridden in `points`.\n     * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n     *  method instead of an arc method. Defaults to false.\n     * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n     * Higher values make the curve smoother.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundShape(points: RoundedPoint[], radius: number, useQuadratic?: boolean, smoothness?: number): this;\n    public roundShape(...args: Parameters<GraphicsContext['roundShape']>): this\n    {\n        return this._callContextMethod('roundShape', args);\n    }\n    /**\n     * Draw Rectangle with fillet corners. This is much like rounded rectangle\n     * however it support negative numbers as well for the corner radius.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param fillet - accept negative or positive values\n     */\n    public filletRect(x: number, y: number, width: number, height: number, fillet: number): this;\n    public filletRect(...args: Parameters<GraphicsContext['filletRect']>): this\n    {\n        return this._callContextMethod('filletRect', args);\n    }\n    /**\n     * Draw Rectangle with chamfer corners. These are angled corners.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param chamfer - non-zero real number, size of corner cutout\n     * @param transform\n     */\n    public chamferRect(x: number, y: number, width: number, height: number, chamfer: number, transform?: Matrix): this;\n    public chamferRect(...args: Parameters<GraphicsContext['chamferRect']>): this\n    {\n        return this._callContextMethod('chamferRect', args);\n    }\n    /**\n     * Draws a star shape centered at a specified location. This method allows for the creation\n     *  of stars with a variable number of points, outer radius, optional inner radius, and rotation.\n     * The star is drawn as a closed polygon with alternating outer and inner vertices to create the star's points.\n     * An optional transformation can be applied to scale, rotate, or translate the star as needed.\n     * @param x - The x-coordinate of the center of the star.\n     * @param y - The y-coordinate of the center of the star.\n     * @param points - The number of points of the star.\n     * @param radius - The outer radius of the star (distance from the center to the outer points).\n     * @param innerRadius - Optional. The inner radius of the star\n     * (distance from the center to the inner points between the outer points).\n     * If not provided, defaults to half of the `radius`.\n     * @param rotation - Optional. The rotation of the star in radians, where 0 is aligned with the y-axis.\n     * Defaults to 0, meaning one point is directly upward.\n     * @returns The instance of the current object for chaining further drawing commands.\n     */\n    public star(x: number, y: number, points: number, radius: number, innerRadius?: number, rotation?: number): this;\n    public star(...args: Parameters<GraphicsContext['star']>): this\n    {\n        return this._callContextMethod('star', args);\n    }\n    /**\n     * Parses and renders an SVG string into the graphics context. This allows for complex shapes and paths\n     * defined in SVG format to be drawn within the graphics context.\n     * @param svg - The SVG string to be parsed and rendered.\n     */\n    public svg(svg: string): this;\n    public svg(...args: Parameters<GraphicsContext['svg']>): this\n    {\n        return this._callContextMethod('svg', args);\n    }\n    /**\n     * Restores the most recently saved graphics state by popping the top of the graphics state stack.\n     * This includes transformations, fill styles, and stroke styles.\n     */\n    public restore(): this;\n    public restore(...args: Parameters<GraphicsContext['restore']>): this\n    {\n        return this._callContextMethod('restore', args);\n    }\n    /** Saves the current graphics state, including transformations, fill styles, and stroke styles, onto a stack. */\n    public save(): this\n    {\n        return this._callContextMethod('save', []);\n    }\n    /**\n     * Returns the current transformation matrix of the graphics context.\n     * @returns The current transformation matrix.\n     */\n    public getTransform(): Matrix\n    {\n        return this.context.getTransform();\n    }\n    /**\n     * Resets the current transformation matrix to the identity matrix, effectively removing\n     * any transformations (rotation, scaling, translation) previously applied.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public resetTransform(): this\n    {\n        return this._callContextMethod('resetTransform', []);\n    }\n    /**\n     * Applies a rotation transformation to the graphics context around the current origin.\n     * @param angle - The angle of rotation in radians.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public rotateTransform(angle: number): this;\n    public rotateTransform(...args: Parameters<GraphicsContext['rotate']>): this\n    {\n        return this._callContextMethod('rotate', args);\n    }\n    /**\n     * Applies a scaling transformation to the graphics context, scaling drawings by x horizontally and by y vertically.\n     * @param x - The scale factor in the horizontal direction.\n     * @param y - (Optional) The scale factor in the vertical direction.\n     * If not specified, the x value is used for both directions.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public scaleTransform(x: number, y?: number): this;\n    public scaleTransform(...args: Parameters<GraphicsContext['scale']>): this\n    {\n        return this._callContextMethod('scale', args);\n    }\n    /**\n     * Sets the current transformation matrix of the graphics context to the specified matrix or values.\n     * This replaces the current transformation matrix.\n     * @param a - The value for the a property of the matrix, or a Matrix object to use directly.\n     * @param b - The value for the b property of the matrix.\n     * @param c - The value for the c property of the matrix.\n     * @param d - The value for the d property of the matrix.\n     * @param dx - The value for the tx (translate x) property of the matrix.\n     * @param dy - The value for the ty (translate y) property of the matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setTransform(transform: Matrix): this;\n    public setTransform(a: number, b: number, c: number, d: number, dx: number, dy: number): this;\n    public setTransform(a: number | Matrix, b?: number, c?: number, d?: number, dx?: number, dy?: number): this;\n    public setTransform(...args: [Matrix] | [number, number, number, number, number, number]): this\n    {\n        return this._callContextMethod('setTransform', args);\n    }\n    /**\n     * Applies the specified transformation matrix to the current graphics context by multiplying\n     * the current matrix with the specified matrix.\n     * @param a - The value for the a property of the matrix, or a Matrix object to use directly.\n     * @param b - The value for the b property of the matrix.\n     * @param c - The value for the c property of the matrix.\n     * @param d - The value for the d property of the matrix.\n     * @param dx - The value for the tx (translate x) property of the matrix.\n     * @param dy - The value for the ty (translate y) property of the matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public transform(transform: Matrix): this;\n    public transform(a: number, b: number, c: number, d: number, dx: number, dy: number): this;\n    public transform(a: number | Matrix, b?: number, c?: number, d?: number, dx?: number, dy?: number): this;\n    public transform(...args: [Matrix] | [number, number, number, number, number, number]): this\n    {\n        return this._callContextMethod('transform', args);\n    }\n    /**\n     * Applies a translation transformation to the graphics context, moving the origin by the specified amounts.\n     * @param x - The amount to translate in the horizontal direction.\n     * @param y - (Optional) The amount to translate in the vertical direction. If not specified,\n     * the x value is used for both directions.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public translateTransform(x: number, y?: number): this;\n    public translateTransform(...args: Parameters<GraphicsContext['translate']>): this\n    {\n        return this._callContextMethod('translate', args);\n    }\n    /**\n     * Clears all drawing commands from the graphics context, effectively resetting it. This includes clearing the path,\n     * and optionally resetting transformations to the identity matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public clear(): this\n    {\n        return this._callContextMethod('clear', []);\n    }\n    /**\n     * The fill style to use.\n     * @type {ConvertedFillStyle}\n     */\n    get fillStyle(): GraphicsContext['fillStyle']\n    {\n        return this._context.fillStyle;\n    }\n    set fillStyle(value: FillInput)\n    {\n        this._context.fillStyle = value;\n    }\n    /**\n     * The stroke style to use.\n     * @type {ConvertedStrokeStyle}\n     */\n    get strokeStyle(): GraphicsContext['strokeStyle']\n    {\n        return this._context.strokeStyle;\n    }\n    set strokeStyle(value: StrokeStyle)\n    {\n        this._context.strokeStyle = value;\n    }\n\n    /**\n     * Creates a new Graphics object.\n     * Note that only the context of the object is cloned, not its transform (position,scale,etc)\n     * @param deep - Whether to create a deep clone of the graphics object. If false, the context\n     * will be shared between the two objects (default false). If true, the context will be\n     * cloned (recommended if you need to modify the context in any way).\n     * @returns - A clone of the graphics object\n     */\n    public clone(deep = false): Graphics\n    {\n        if (deep)\n        {\n            return new Graphics(this._context.clone());\n        }\n\n        (this._ownedContext as null) = null;\n        const clone = new Graphics(this._context);\n\n        return clone;\n    }\n\n    // -------- v7 deprecations ---------\n\n    /**\n     * @param width\n     * @param color\n     * @param alpha\n     * @deprecated since 8.0.0 Use {@link Graphics#setStrokeStyle} instead\n     */\n    public lineStyle(width?: number, color?: ColorSource, alpha?: number): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#lineStyle is no longer needed. Use Graphics#setStrokeStyle to set the stroke style.');\n        // #endif\n\n        const strokeStyle: Partial<StrokeStyle> = {};\n\n        // avoid undefined assignment\n        width && (strokeStyle.width = width);\n        color && (strokeStyle.color = color);\n        alpha && (strokeStyle.alpha = alpha);\n\n        this.context.strokeStyle = strokeStyle;\n\n        return this;\n    }\n\n    /**\n     * @param color\n     * @param alpha\n     * @deprecated since 8.0.0 Use {@link Graphics#fill} instead\n     */\n    public beginFill(color: ColorSource, alpha?: number)\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'Graphics#beginFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.');\n        // #endif\n\n        const fillStyle: Partial<FillStyle> = {};\n\n        // avoid undefined assignment\n        if (color !== undefined) fillStyle.color = color;\n        if (alpha !== undefined) fillStyle.alpha = alpha;\n\n        this.context.fillStyle = fillStyle;\n\n        return this;\n    }\n\n    /**\n     * @deprecated since 8.0.0 Use {@link Graphics#fill} instead\n     */\n    public endFill()\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'Graphics#endFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.');\n        // #endif\n\n        this.context.fill();\n        const strokeStyle = this.context.strokeStyle;\n\n        if (strokeStyle.width !== GraphicsContext.defaultStrokeStyle.width\n            || strokeStyle.color !== GraphicsContext.defaultStrokeStyle.color\n            || strokeStyle.alpha !== GraphicsContext.defaultStrokeStyle.alpha)\n        {\n            this.context.stroke();\n        }\n\n        return this;\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#circle} instead\n     */\n    public drawCircle(...args: Parameters<GraphicsContext['circle']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawCircle has been renamed to Graphics#circle');\n        // #endif\n\n        return this._callContextMethod('circle', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#ellipse} instead\n     */\n    public drawEllipse(...args: Parameters<GraphicsContext['ellipse']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawEllipse has been renamed to Graphics#ellipse');\n        // #endif\n\n        return this._callContextMethod('ellipse', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#poly} instead\n     */\n    public drawPolygon(...args: Parameters<GraphicsContext['poly']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawPolygon has been renamed to Graphics#poly');\n        // #endif\n\n        return this._callContextMethod('poly', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#rect} instead\n     */\n    public drawRect(...args: Parameters<GraphicsContext['rect']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawRect has been renamed to Graphics#rect');\n        // #endif\n\n        return this._callContextMethod('rect', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#roundRect} instead\n     */\n    public drawRoundedRect(...args: Parameters<GraphicsContext['roundRect']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawRoundedRect has been renamed to Graphics#roundRect');\n        // #endif\n\n        return this._callContextMethod('roundRect', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#star} instead\n     */\n    public drawStar(...args: Parameters<GraphicsContext['star']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawStar has been renamed to Graphics#star');\n        // #endif\n\n        return this._callContextMethod('star', args);\n    }\n}\n","// TODO eventually we should not use this bit, but instead use the localUniformBit\n// have the MSDF bit be merged in with the localUniformBit\n\nexport const localUniformMSDFBit = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `,\n        main: /* wgsl */` \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n\n    }\n};\n\nexport const localUniformMSDFBitGl = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform float uDistance;\n         `,\n        main: /* glsl */` \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n\n    }\n};\n","export const mSDFBit = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* wgsl */`\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        `,\n    }\n\n};\n\nexport const mSDFBitGl = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* glsl */`\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        `,\n    }\n\n};\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport {\n    generateTextureBatchBit,\n    generateTextureBatchBitGl\n} from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\nexport class SdfShader extends Shader\n{\n    constructor()\n    {\n        const uniforms = new UniformGroup({\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uDistance: { value: 4, type: 'f32' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        const maxTextures = getMaxTexturesPerBatch();\n\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBit,\n                generateTextureBatchBit(maxTextures),\n                localUniformMSDFBit,\n                mSDFBit,\n                roundPixelsBit\n            ]\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(maxTextures),\n                localUniformMSDFBitGl,\n                mSDFBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: uniforms,\n                batchSamplers: getBatchSamplersUniformGroup(maxTextures),\n            }\n        });\n    }\n}\n","import { Cache } from '../../assets/cache/Cache';\nimport { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { Graphics } from '../graphics/shared/Graphics';\nimport { SdfShader } from '../text/sdfShader/SdfShader';\nimport { BitmapFontManager } from './BitmapFontManager';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../rendering/renderers/shared/Renderable';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Container } from '../container/Container';\nimport type { BitmapText } from './BitmapText';\n\nexport class BitmapTextPipe implements RenderPipe<BitmapText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'bitmapText',\n    } as const;\n\n    private _renderer: Renderer;\n    private _gpuBitmapText: Record<number, Graphics> = {};\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_gpuBitmapText');\n    }\n\n    public validateRenderable(bitmapText: BitmapText): boolean\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n\n        // TODO - need to shift all the verts in the graphicsData to the new anchor\n\n        // update the anchor...\n    }\n\n    public addRenderable(bitmapText: BitmapText, instructionSet: InstructionSet)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    public destroyRenderable(bitmapText: BitmapText)\n    {\n        bitmapText.off('destroyed', this._destroyRenderableBound);\n\n        this._destroyRenderableByUid(bitmapText.uid);\n    }\n\n    private _destroyRenderableByUid(renderableUid: number)\n    {\n        const context = this._gpuBitmapText[renderableUid].context;\n\n        if (context.customShader)\n        {\n            BigPool.return(context.customShader as PoolItem);\n\n            context.customShader = null;\n        }\n\n        BigPool.return(this._gpuBitmapText[renderableUid] as PoolItem);\n        this._gpuBitmapText[renderableUid] = null;\n    }\n\n    public updateRenderable(bitmapText: BitmapText)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    private _updateContext(bitmapText: BitmapText, proxyGraphics: Graphics)\n    {\n        const { context } = proxyGraphics;\n\n        const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n\n        context.clear();\n\n        if (bitmapFont.distanceField.type !== 'none')\n        {\n            if (!context.customShader)\n            {\n                context.customShader = BigPool.get(SdfShader);\n            }\n        }\n\n        const chars = Array.from(bitmapText.text);\n        const style = bitmapText._style;\n\n        let currentY = bitmapFont.baseLineOffset;\n\n        // measure our text...\n        const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n\n        let index = 0;\n\n        const padding = style.padding;\n        const scale = bitmapTextLayout.scale;\n\n        let tx = bitmapTextLayout.width;\n        let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n\n        if (style._stroke)\n        {\n            tx += style._stroke.width / scale;\n            ty += style._stroke.width / scale;\n        }\n\n        context\n            .translate((-bitmapText._anchor._x * tx) - padding, (-bitmapText._anchor._y * ty) - padding)\n            .scale(scale, scale);\n\n        const tint = bitmapFont.applyFillAsTint ? style._fill.color : 0xFFFFFF;\n\n        for (let i = 0; i < bitmapTextLayout.lines.length; i++)\n        {\n            const line = bitmapTextLayout.lines[i];\n\n            for (let j = 0; j < line.charPositions.length; j++)\n            {\n                const char = chars[index++];\n\n                const charData = bitmapFont.chars[char];\n\n                if (charData?.texture)\n                {\n                    context.texture(\n                        charData.texture,\n                        tint ? tint : 'black',\n                        Math.round(line.charPositions[j] + charData.xOffset),\n                        Math.round(currentY + charData.yOffset),\n                    );\n                }\n            }\n\n            currentY += bitmapFont.lineHeight;\n        }\n    }\n\n    private _getGpuBitmapText(bitmapText: BitmapText)\n    {\n        return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n    }\n\n    public initGpuText(bitmapText: BitmapText)\n    {\n        // TODO we could keep a bunch of contexts around and reuse one that has the same style!\n        const proxyRenderable = BigPool.get(Graphics);\n\n        this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n\n        this._updateContext(bitmapText, proxyRenderable);\n\n        bitmapText.on('destroyed', this._destroyRenderableBound);\n\n        return this._gpuBitmapText[bitmapText.uid];\n    }\n\n    private _updateDistanceField(bitmapText: BitmapText)\n    {\n        const context = this._getGpuBitmapText(bitmapText).context;\n\n        const fontFamily = bitmapText._style.fontFamily as string;\n        const dynamicFont = Cache.get(`${fontFamily as string}-bitmap`);\n\n        // Inject the shader code with the correct value\n        const { a, b, c, d } = bitmapText.groupTransform;\n\n        const dx = Math.sqrt((a * a) + (b * b));\n        const dy = Math.sqrt((c * c) + (d * d));\n        const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n\n        const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n\n        const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n\n        context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n    }\n\n    public destroy()\n    {\n        for (const uid in this._gpuBitmapText)\n        {\n            this._destroyRenderableByUid(uid as unknown as number);\n        }\n\n        this._gpuBitmapText = null;\n\n        this._renderer = null;\n    }\n}\n\nfunction syncWithProxy(container: Renderable, proxy: Renderable)\n{\n    proxy.groupTransform = container.groupTransform;\n    proxy.groupColorAlpha = container.groupColorAlpha;\n    proxy.groupColor = container.groupColor;\n    proxy.groupBlendMode = container.groupBlendMode;\n    proxy.globalDisplayStatus = container.globalDisplayStatus;\n    proxy.groupTransform = container.groupTransform;\n    proxy.localDisplayStatus = container.localDisplayStatus;\n    proxy.groupAlpha = container.groupAlpha;\n    proxy._roundPixels = container._roundPixels;\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { BitmapTextPipe } from './BitmapTextPipe';\n\nextensions.add(BitmapTextPipe);\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../sprite/BatchableSprite';\nimport { updateTextBounds } from '../text/utils/updateTextBounds';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { Container } from '../container/Container';\nimport type { HTMLText } from './HTMLText';\nimport type { HTMLTextStyle } from './HTMLTextStyle';\n\nexport class HTMLTextPipe implements RenderPipe<HTMLText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        textureNeedsUploading: boolean;\n        generatingTexture: boolean;\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.runners.resolutionChange.add(this);\n        this._renderer.renderableGC.addManagedHash(this, '_gpuText');\n    }\n\n    public resolutionChange()\n    {\n        for (const i in this._gpuText)\n        {\n            const gpuText = this._gpuText[i];\n\n            if (!gpuText) continue;\n\n            const text = gpuText.batchableSprite.renderable as HTMLText;\n\n            if (text._autoResolution)\n            {\n                text._resolution = this._renderer.resolution;\n                text.onViewUpdate();\n            }\n        }\n    }\n\n    public validateRenderable(htmlText: HTMLText): boolean\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const newKey = htmlText._getKey();\n\n        if (gpuText.textureNeedsUploading)\n        {\n            gpuText.textureNeedsUploading = false;\n\n            return true;\n        }\n\n        if (gpuText.currentKey !== newKey)\n        {\n            // TODO - could look into optimising this a tad!\n            // if its a single texture, then we could just swap it?\n            // same for CanvasText..\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(htmlText: HTMLText, instructionSet: InstructionSet)\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n    }\n\n    public updateRenderable(htmlText: HTMLText)\n    {\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        batchableSprite._batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(htmlText: HTMLText)\n    {\n        htmlText.off('destroyed', this._destroyRenderableBound);\n        this._destroyRenderableById(htmlText.uid);\n    }\n\n    private _destroyRenderableById(htmlTextUid: number)\n    {\n        const gpuText = this._gpuText[htmlTextUid];\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[htmlTextUid] = null;\n    }\n\n    private _updateText(htmlText: HTMLText)\n    {\n        const newKey = htmlText._getKey();\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(htmlText).catch((e) =>\n            {\n                console.error(e);\n            });\n        }\n\n        htmlText._didTextUpdate = false;\n\n        updateTextBounds(batchableSprite, htmlText);\n    }\n\n    private async _updateGpuText(htmlText: HTMLText)\n    {\n        htmlText._didTextUpdate = false;\n\n        const gpuText = this._getGpuText(htmlText);\n\n        if (gpuText.generatingTexture) return;\n\n        const newKey = htmlText._getKey();\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        gpuText.generatingTexture = true;\n\n        gpuText.currentKey = newKey;\n\n        const resolution = htmlText.resolution ?? this._renderer.resolution;\n\n        const texture = await this._renderer.htmlText.getManagedTexture(\n            htmlText.text,\n            resolution,\n            htmlText._style as HTMLTextStyle,\n            htmlText._getKey()\n        );\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        batchableSprite.texture = gpuText.texture = texture;\n\n        gpuText.generatingTexture = false;\n\n        gpuText.textureNeedsUploading = true;\n        htmlText.onViewUpdate();\n\n        updateTextBounds(batchableSprite, htmlText);\n    }\n\n    private _getGpuText(htmlText: HTMLText)\n    {\n        return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n    }\n\n    public initGpuText(htmlText: HTMLText)\n    {\n        const gpuTextData: HTMLTextPipe['_gpuText'][number] = {\n            texture: Texture.EMPTY,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n            textureNeedsUploading: false,\n            generatingTexture: false,\n        };\n\n        const batchableSprite = gpuTextData.batchableSprite;\n\n        batchableSprite.renderable = htmlText;\n        batchableSprite.transform = htmlText.groupTransform;\n        batchableSprite.texture = Texture.EMPTY;\n        batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        batchableSprite.roundPixels = (this._renderer._roundPixels | htmlText._roundPixels) as 0 | 1;\n\n        htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n        this._gpuText[htmlText.uid] = gpuTextData;\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        htmlText.on('destroyed', this._destroyRenderableBound);\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n\n","import type { CanvasAndContext } from '../../rendering/renderers/shared/texture/CanvasPool';\n\nexport const nssvg = 'http://www.w3.org/2000/svg';\nexport const nsxhtml = 'http://www.w3.org/1999/xhtml';\n\nexport class HTMLTextRenderData\n{\n    public svgRoot = document.createElementNS(nssvg, 'svg');\n    public foreignObject = document.createElementNS(nssvg, 'foreignObject');\n    public domElement = document.createElementNS(nsxhtml, 'div');\n    public styleElement = document.createElementNS(nsxhtml, 'style');\n    public image = new Image();\n    public canvasAndContext?: CanvasAndContext;\n\n    constructor()\n    {\n        const { foreignObject, svgRoot, styleElement, domElement } = this;\n        // Arbitrary max size\n\n        foreignObject.setAttribute('width', '10000');\n        foreignObject.setAttribute('height', '10000');\n        foreignObject.style.overflow = 'hidden';\n\n        svgRoot.appendChild(foreignObject);\n\n        foreignObject.appendChild(styleElement);\n        foreignObject.appendChild(domElement);\n    }\n}\n","import { Color } from '../../../color/Color';\n\nimport type { ConvertedStrokeStyle } from '../../graphics/shared/FillTypes';\nimport type { TextStyle } from '../../text/TextStyle';\nimport type { HTMLTextStyle, HTMLTextStyleOptions } from '../HTMLTextStyle';\n\n/**\n * Internally converts all of the style properties into CSS equivalents.\n * @param style\n * @returns The CSS style string, for setting `style` property of root HTMLElement.\n */\nexport function textStyleToCSS(style: HTMLTextStyle): string\n{\n    const stroke = style._stroke;\n    const fill = style._fill;\n\n    const cssStyleString = [\n        `color: ${Color.shared.setValue(fill.color).toHex()}`,\n        `font-size: ${(style.fontSize as number)}px`,\n        `font-family: ${style.fontFamily}`,\n        `font-weight: ${style.fontWeight}`,\n        `font-style: ${style.fontStyle}`,\n        `font-variant: ${style.fontVariant}`,\n        `letter-spacing: ${style.letterSpacing}px`,\n        `text-align: ${style.align}`,\n        `padding: ${style.padding}px`,\n        `white-space: ${(style.whiteSpace === 'pre' && style.wordWrap) ? 'pre-wrap' : style.whiteSpace}`,\n        ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n        ...style.wordWrap ? [\n            `word-wrap: ${style.breakWords ? 'break-all' : 'break-word'}`,\n            `max-width: ${style.wordWrapWidth}px`\n        ] : [],\n        ...stroke ? [strokeToCSS(stroke)] : [],\n        ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n        ...style.cssOverrides,\n    ].join(';');\n\n    const cssStyles = [`div { ${cssStyleString} }`];\n\n    tagStyleToCSS(style.tagStyles, cssStyles);\n\n    return cssStyles.join(' ');\n}\n\nfunction dropShadowToCSS(dropShadowStyle: TextStyle['dropShadow']): string\n{\n    const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n    const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n    const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n\n    const position = `${x}px ${y}px`;\n\n    if (dropShadowStyle.blur > 0)\n    {\n        return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n    }\n\n    return `text-shadow: ${position} ${color}`;\n}\n\nfunction strokeToCSS(stroke: ConvertedStrokeStyle): string\n{\n    return [\n        `-webkit-text-stroke-width: ${stroke.width}px`,\n        `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        `text-stroke-width: ${stroke.width}px`,\n        `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        'paint-order: stroke',\n    ].join(';');\n}\n\n/** Converts the tag styles into CSS. */\nconst templates = {\n    fontSize: `font-size: {{VALUE}}px`,\n    fontFamily: `font-family: {{VALUE}}`,\n    fontWeight: `font-weight: {{VALUE}}`,\n    fontStyle: `font-style: {{VALUE}}`,\n    fontVariant: `font-variant: {{VALUE}}`,\n    letterSpacing: `letter-spacing: {{VALUE}}px`,\n    align: `text-align: {{VALUE}}`,\n    padding: `padding: {{VALUE}}px`,\n    whiteSpace: `white-space: {{VALUE}}`,\n    lineHeight: `line-height: {{VALUE}}px`,\n    wordWrapWidth: `max-width: {{VALUE}}px`,\n};\n\n/** Converts the tag styles into CSS if modifications are required */\nconst transform = {\n    fill: (value: string) => `color: ${Color.shared.setValue(value).toHex()}`,\n    breakWords: (value: string) => `word-wrap: ${value ? 'break-all' : 'break-word'}`,\n    stroke: strokeToCSS,\n    dropShadow: dropShadowToCSS\n};\n\nfunction tagStyleToCSS(tagStyles: Record<string, HTMLTextStyleOptions>, out: string[])\n{\n    for (const i in tagStyles)\n    {\n        const tagStyle = tagStyles[i];\n        const cssTagStyle = [];\n\n        for (const j in tagStyle)\n        {\n            if (transform[j as keyof typeof transform])\n            {\n                cssTagStyle.push(transform[j as keyof typeof transform](tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n            else if (templates[j as keyof typeof templates])\n            {\n                // eslint-disable-next-line max-len\n                cssTagStyle.push(templates[j as keyof typeof templates].replace('{{VALUE}}', tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n        }\n\n        out.push(`${i} { ${cssTagStyle.join(';')} }`);\n    }\n}\n","/* eslint-disable accessor-pairs */\nimport { warn } from '../../utils/logging/warn';\nimport { TextStyle } from '../text/TextStyle';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey';\nimport { textStyleToCSS } from './utils/textStyleToCSS';\n\nimport type { FillInput, StrokeInput } from '../graphics/shared/FillTypes';\nimport type { TextStyleOptions } from '../text/TextStyle';\n\n/**\n * Options for HTML text style, extends {@link TextStyle}.\n * @memberof text\n * @extends text.TextStyleOptions\n * @property {string[]} [cssOverrides] - CSS style(s) to add.\n * @property {Record<string, text.HTMLTextStyleOptions>} [tagStyles] - Tag styles.\n */\nexport interface HTMLTextStyleOptions extends Omit<TextStyleOptions, 'leading' | 'textBaseline' | 'trim' >\n{\n    cssOverrides?: string[];\n    tagStyles?: Record<string, HTMLTextStyleOptions>;\n}\n\n/**\n * A TextStyle object rendered by the HTMLTextSystem.\n * @memberof text\n */\nexport class HTMLTextStyle extends TextStyle\n{\n    private _cssOverrides: string[] = [];\n    private _cssStyle: string;\n    /**\n     * List of styles per tag.\n     * @example\n     * new HTMLText({\n     *   text:'<red>Red</red>,<blue>Blue</blue>,<green>Green</green>',\n     *   style:{\n     *       fontFamily: 'DM Sans',\n     *       fill: 'white',\n     *       fontSize:100,\n     *       tagStyles:{\n     *           red:{\n     *               fill:'red',\n     *           },\n     *           blue:{\n     *               fill:'blue',\n     *           },\n     *           green:{\n     *               fill:'green',\n     *           }\n     *       }\n     *   }\n     * );\n     */\n    public tagStyles: Record<string, HTMLTextStyleOptions>;\n\n    constructor(options: HTMLTextStyleOptions = {})\n    {\n        super(options);\n\n        this.cssOverrides ??= options.cssOverrides;\n        this.tagStyles = options.tagStyles ?? {};\n    }\n\n    /** List of style overrides that will be applied to the HTML text. */\n    set cssOverrides(value: string | string[])\n    {\n        this._cssOverrides = value instanceof Array ? value : [value];\n        this.update();\n    }\n\n    get cssOverrides(): string[]\n    {\n        return this._cssOverrides;\n    }\n\n    protected override _generateKey(): string\n    {\n        this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join('-');\n\n        return this._styleKey;\n    }\n\n    public update()\n    {\n        this._cssStyle = null;\n        super.update();\n    }\n\n    /**\n     * Creates a new HTMLTextStyle object with the same values as this one.\n     * @returns New cloned HTMLTextStyle object\n     */\n    public clone(): HTMLTextStyle\n    {\n        return new HTMLTextStyle({\n            align: this.align,\n            breakWords: this.breakWords,\n            dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n            fill: this._fill,\n            fontFamily: this.fontFamily,\n            fontSize: this.fontSize,\n            fontStyle: this.fontStyle,\n            fontVariant: this.fontVariant,\n            fontWeight: this.fontWeight,\n            letterSpacing: this.letterSpacing,\n            lineHeight: this.lineHeight,\n            padding: this.padding,\n            stroke: this._stroke,\n            whiteSpace: this.whiteSpace,\n            wordWrap: this.wordWrap,\n            wordWrapWidth: this.wordWrapWidth,\n            cssOverrides: this.cssOverrides,\n        });\n    }\n\n    get cssStyle(): string\n    {\n        if (!this._cssStyle)\n        {\n            this._cssStyle = textStyleToCSS(this);\n        }\n\n        return this._cssStyle;\n    }\n\n    /**\n     * Add a style override, this can be any CSS property\n     * it will override any built-in style. This is the\n     * property and the value as a string (e.g., `color: red`).\n     * This will override any other internal style.\n     * @param {string} value - CSS style(s) to add.\n     * @example\n     * style.addOverride('background-color: red');\n     */\n    public addOverride(...value: string[]): void\n    {\n        const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n\n        if (toAdd.length > 0)\n        {\n            this.cssOverrides.push(...toAdd);\n            this.update();\n        }\n    }\n\n    /**\n     * Remove any overrides that match the value.\n     * @param {string} value - CSS style to remove.\n     * @example\n     * style.removeOverride('background-color: red');\n     */\n    public removeOverride(...value: string[]): void\n    {\n        const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n\n        if (toRemove.length > 0)\n        {\n            this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n            this.update();\n        }\n    }\n\n    override set fill(value: FillInput)\n    {\n        // if its not a string or a number, then its a texture!\n        if (typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color fill is not supported by HTMLText');\n            // #endif\n        }\n\n        super.fill = value;\n    }\n\n    override set stroke(value: StrokeInput)\n    {\n        // if its not a string or a number, then its a texture!\n        if (value && typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color stroke is not supported by HTMLText');\n            // #endif\n        }\n\n        super.stroke = value;\n    }\n}\n","import { loadFontAsBase64 } from './loadFontAsBase64';\n\nexport interface FontCSSStyleOptions\n{\n    fontFamily: string | string[]\n    fontWeight: string\n    fontStyle: string\n}\n\n/**\n * This will take a font url and a style and return a css string that can be injected into a style tag\n * This will contain inlined base64 font and the font family information\n * @param style - the style to generate the css for\n * @param url - The url to load the font from\n * @returns - The css string\n */\nexport async function loadFontCSS(style: FontCSSStyleOptions, url: string): Promise<string>\n{\n    const dataSrc = await loadFontAsBase64(url);\n\n    return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n","import { DOMAdapter } from '../../../environment/adapter';\n\n/**\n * Resolves a font url to a base64 string\n * @param url - The url to load the font from\n * @returns - The font as a base64 string\n */\nexport async function loadFontAsBase64(url: string): Promise<string>\n{\n    const response = await DOMAdapter.get().fetch(url);\n\n    const blob = await response.blob();\n\n    const reader = new FileReader();\n\n    const dataSrc: string = await new Promise((resolve, reject) =>\n    {\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n    });\n\n    return dataSrc;\n}\n","import { Cache } from '../../../assets/cache/Cache';\nimport { loadFontCSS } from './loadFontCSS';\n\nimport type { FontCSSStyleOptions } from './loadFontCSS';\n\nexport const FontStylePromiseCache = new Map<string, Promise<string>>();\n\n/**\n * takes the font families and returns a css string that can be injected into a style tag\n * It will contain the font families and the font urls encoded as base64\n * @param fontFamilies - The font families to load\n * @param style - The FontCSSStyleOptions to load the font with (used for the first font family)\n * @param defaultOptions - The default options to load the font with (used for the rest of the font families)\n * @param defaultOptions.fontWeight - The default font weight\n * @param defaultOptions.fontStyle - The default font style\n * @returns - The css string\n */\nexport async function getFontCss(\n    fontFamilies: string[],\n    style: FontCSSStyleOptions,\n    defaultOptions: {fontWeight: string, fontStyle: string}\n)\n{\n    const fontPromises = fontFamilies\n        .filter((fontFamily) => Cache.has(`${fontFamily}-and-url`))\n        .map((fontFamily, i) =>\n        {\n            if (!FontStylePromiseCache.has(fontFamily))\n            {\n                const { url } = Cache.get(`${fontFamily}-and-url`);\n\n                if (i === 0)\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS({\n                        fontWeight: style.fontWeight,\n                        fontStyle: style.fontStyle,\n                        fontFamily,\n                    }, url));\n                }\n\n                else\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS({\n                        fontWeight: defaultOptions.fontWeight,\n                        fontStyle: defaultOptions.fontStyle,\n                        fontFamily,\n                    }, url));\n                }\n            }\n\n            return FontStylePromiseCache.get(fontFamily);\n        });\n\n    return (await Promise.all(fontPromises)).join('\\n');\n}\n","import { HTMLTextRenderData } from '../HTMLTextRenderData';\n\nimport type { Size } from '../../../maths/misc/Size';\nimport type { HTMLTextStyle } from '../HTMLTextStyle';\n\nlet tempHTMLTextRenderData: HTMLTextRenderData;\n\n/**\n * Measures the HTML text without actually generating an image.\n * This is used to calculate the size of the text.\n * @param text - The text to measure\n * @param style - The style to use\n * @param fontStyleCSS - The font css to use\n * @param htmlTextRenderData - The HTMLTextRenderData to write the SVG to\n * @returns - The size of the text\n */\nexport function measureHtmlText(\n    text: string,\n    style: HTMLTextStyle,\n    fontStyleCSS?: string,\n    htmlTextRenderData?: HTMLTextRenderData\n): Size\n{\n    htmlTextRenderData ||= tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData());\n\n    const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n\n    domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n\n    domElement.setAttribute('style', 'transform-origin: top left; display: inline-block');\n\n    if (fontStyleCSS)\n    {\n        styleElement.textContent = fontStyleCSS;\n    }\n\n    // Measure the contents using the shadow DOM\n    document.body.appendChild(svgRoot);\n\n    const contentBounds = domElement.getBoundingClientRect();\n\n    svgRoot.remove();\n\n    // padding is included in the CSS calculation, so we need to remove it here\n    const doublePadding = style.padding * 2;\n\n    return {\n        width: contentBounds.width - doublePadding,\n        height: contentBounds.height - doublePadding,\n    };\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { type CanvasAndContext, CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { isSafari } from '../../utils/browser/isSafari';\nimport { warn } from '../../utils/logging/warn';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource';\nimport { HTMLTextRenderData } from './HTMLTextRenderData';\nimport { HTMLTextStyle } from './HTMLTextStyle';\nimport { extractFontFamilies } from './utils/extractFontFamilies';\nimport { getFontCss } from './utils/getFontCss';\nimport { getSVGUrl } from './utils/getSVGUrl';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage';\nimport { loadSVGImage } from './utils/loadSVGImage';\nimport { measureHtmlText } from './utils/measureHtmlText';\n\nimport type { System } from '../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { HTMLTextOptions } from './HTMLText';\nimport type { FontCSSStyleOptions } from './utils/loadFontCSS';\n\ninterface HTMLTextTexture\n{\n    texture: Texture,\n    usageCount: number,\n    promise: Promise<Texture>,\n}\n\n/**\n * System plugin to the renderer to manage HTMLText\n * @memberof rendering\n */\nexport class HTMLTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    public static defaultFontOptions: FontCSSStyleOptions = {\n        fontFamily: 'Arial',\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n    };\n\n    private _activeTextures: Record<string, HTMLTextTexture> = {};\n\n    /**\n     * WebGPU has a cors issue when uploading an image that is an SVGImage\n     * To get around this we need to create a canvas draw the image to it and upload that instead.\n     * Bit of a shame.. but no other work around just yet!\n     */\n    private readonly _createCanvas: boolean;\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._createCanvas = renderer.type === RendererType.WEBGPU;\n    }\n\n    public getTexture(options: HTMLTextOptions): Promise<Texture>\n    {\n        return this._buildTexturePromise(\n            options.text as string,\n            options.resolution,\n            options.style as HTMLTextStyle\n        );\n    }\n\n    public getManagedTexture(\n        text: string,\n        resolution: number,\n        style: HTMLTextStyle,\n        textKey: string\n    ): Promise<Texture>\n    {\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].promise;\n        }\n\n        const promise = this._buildTexturePromise(text, resolution, style)\n            .then((texture) =>\n            {\n                this._activeTextures[textKey].texture = texture;\n\n                return texture;\n            });\n\n        this._activeTextures[textKey] = {\n            texture: null,\n            promise,\n            usageCount: 1,\n        };\n\n        return promise;\n    }\n\n    private async _buildTexturePromise(\n        text: string,\n        resolution: number,\n        style: HTMLTextStyle,\n    )\n    {\n        const htmlTextData = BigPool.get(HTMLTextRenderData);\n        const fontFamilies = extractFontFamilies(text, style);\n        const fontCSS = await getFontCss(\n            fontFamilies,\n            style,\n            HTMLTextStyle.defaultTextStyle as {fontWeight: string, fontStyle: string}\n        );\n        const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const image = htmlTextData.image;\n\n        // this off set will ensure we don't get any UV bleeding!\n        const uvSafeOffset = 2;\n\n        image.width = (width | 0) + uvSafeOffset;\n        image.height = (height | 0) + uvSafeOffset;\n\n        const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n\n        await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n\n        const resource: HTMLImageElement | HTMLCanvasElement = image;\n        let canvasAndContext: CanvasAndContext;\n\n        if (this._createCanvas)\n        {\n            // silly webGPU workaround..\n            canvasAndContext = getTemporaryCanvasFromImage(image, resolution);\n        }\n\n        const texture = getPo2TextureFromSource(canvasAndContext ? canvasAndContext.canvas : resource,\n            image.width - uvSafeOffset,\n            image.height - uvSafeOffset,\n            resolution\n        );\n\n        if (this._createCanvas)\n        {\n            this._renderer.texture.initSource(texture.source);\n            CanvasPool.returnCanvasAndContext(canvasAndContext);\n        }\n\n        BigPool.return(htmlTextData as PoolItem);\n\n        return texture;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        // TODO SHOULD NOT BE NEEDED\n        if (!activeTexture) return;\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            if (activeTexture.texture)\n            {\n                this._cleanUp(activeTexture);\n            }\n            else\n            {\n                // we did not resolve...\n                activeTexture.promise.then((texture) =>\n                {\n                    activeTexture.texture = texture;\n\n                    this._cleanUp(activeTexture);\n                }).catch(() =>\n                {\n                    // #if _DEBUG\n                    warn('HTMLTextSystem: Failed to clean texture');\n                    // #endif\n                });\n            }\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    private _cleanUp(activeTexture: HTMLTextTexture)\n    {\n        TexturePool.returnTexture(activeTexture.texture);\n        activeTexture.texture.source.resource = null;\n        activeTexture.texture.source.uploadMethodId = 'unknown';\n    }\n\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey].usageCount;\n    }\n\n    public destroy(): void\n    {\n        this._activeTextures = null;\n    }\n}\n","import type { HTMLTextStyle } from '../HTMLTextStyle';\n\n/**\n * Extracts font families from text. It will extract font families from the style, tagStyles and any font families\n * embedded in the text. It should also strip out duplicates as it goes.\n * @param  text - The text to extract font families from\n * @param style - The style to extract font families from\n * @returns {string[]} - The font families as an array of strings\n */\nexport function extractFontFamilies(text: string, style: HTMLTextStyle): string[]\n{\n    const fontFamily = style.fontFamily;\n    const fontFamilies: string[] = [];\n    const dedupe: Record<string, boolean> = {};\n\n    // first ensure fonts are loaded inline..\n    // find any font..\n    const regex = /font-family:([^;\"\\s]+)/g;\n\n    const matches = text.match(regex);\n\n    function addFontFamily(fontFamily: string)\n    {\n        if (!dedupe[fontFamily])\n        {\n            fontFamilies.push(fontFamily);\n\n            dedupe[fontFamily] = true;\n        }\n    }\n\n    if (Array.isArray(fontFamily))\n    {\n        for (let i = 0; i < fontFamily.length; i++)\n        {\n            addFontFamily(fontFamily[i]);\n        }\n    }\n    else\n    {\n        addFontFamily(fontFamily);\n    }\n\n    if (matches)\n    {\n        matches.forEach((match) =>\n        {\n            const fontFamily = match.split(':')[1].trim();\n\n            addFontFamily(fontFamily);\n        });\n    }\n\n    for (const i in style.tagStyles)\n    {\n        const fontFamily = style.tagStyles[i].fontFamily;\n\n        addFontFamily(fontFamily as string);\n    }\n\n    return fontFamilies;\n}\n","import type { HTMLTextRenderData } from '../HTMLTextRenderData';\nimport type { HTMLTextStyle } from '../HTMLTextStyle';\n\n/**\n * takes all the data and returns a svg url string can be loaded by an image element\n * @param text - The text to measure\n * @param style - The style to use\n * @param resolution - The resolution to use\n * @param fontCSS - The font css to use\n * @param htmlTextData - The HTMLTextRenderData to write the SVG to\n * @returns - The SVG as a url string\n */\nexport function getSVGUrl(\n    text: string,\n    style: HTMLTextStyle,\n    resolution: number,\n    fontCSS: string,\n    htmlTextData: HTMLTextRenderData\n)\n{\n    const { domElement, styleElement, svgRoot } = htmlTextData;\n\n    domElement.innerHTML = `<style>${style.cssStyle}</style><div style='padding:0;'>${text}</div>`;\n    domElement.setAttribute('style', `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n    styleElement.textContent = fontCSS;\n\n    const { width, height } = htmlTextData.image;\n\n    svgRoot.setAttribute('width', width.toString());\n    svgRoot.setAttribute('height', height.toString());\n\n    return new XMLSerializer().serializeToString(svgRoot);\n}\n","/**\n * This function loads an SVG image into an HTMLImageElement.\n * The image can then be uploaded as texture to the GPU.\n * iOS has a bug where embedded fonts are not available immediately after the image loads,\n * so we wait an arbitrary amount of time before resolving the promise.\n * @param image - The image to load the SVG into\n * @param url - The url to load the SVG from\n * @param delay - Whether to delay the load\n * @returns - A promise that resolves when the image has loaded\n */\nexport function loadSVGImage(image: HTMLImageElement, url: string, delay: boolean)\n{\n    return new Promise<void>(async (resolve) =>\n    {\n        // Safari has a known bug where embedded fonts are not available\n        // immediately after the image loads, to compensate we wait an\n        // arbitrary amount of time\n        // @see https://bugs.webkit.org/show_bug.cgi?id=219770\n        if (delay)\n        {\n            await new Promise<void>((resolve) => setTimeout(resolve, 100));\n        }\n\n        image.onload = () =>\n        {\n            resolve();\n        };\n\n        image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n        image.crossOrigin = 'anonymous';\n    });\n}\n","import { DOMAdapter } from '../../environment/adapter';\n\nexport function isSafari(): boolean\n{\n    const { userAgent } = DOMAdapter.get().getNavigator();\n\n    return (/^((?!chrome|android).)*safari/i).test(userAgent);\n}\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\nimport type { CanvasAndContext } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\n/**\n * This function converts an image to a canvas, and returns the canvas.\n * It is used to convert images to canvases to work around a CORS issue where WebGPU cannot\n * upload an SVGImage to a texture.\n *\n * It uses the CanvasPool to get an optimal canvas and context, and then draws the image onto it.\n * Remember to return this canvas is immediately to the CanvasPool for reuse when you are done with it.\n * (eg upload it to the GPU!)\n * @param image - The image to convert to a canvas.\n * @param resolution - The resolution of the canvas.\n */\nexport function getTemporaryCanvasFromImage(image: HTMLImageElement, resolution: number): CanvasAndContext\n{\n    // Get an optimal canvas and context from the CanvasPool, based on the\n    // dimensions of the image and the desired resolution.\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n        image.width,\n        image.height,\n        resolution\n    );\n\n    // Clear the context of the canvas, and draw the image onto it.\n    const { context } = canvasAndContext;\n\n    context.clearRect(0, 0, image.width, image.height);\n    context.drawImage(image, 0, 0);\n\n    // Return the canvas.\n    return canvasAndContext;\n}\n\n","import { extensions } from '../../extensions/Extensions';\nimport { HTMLTextPipe } from './HTMLTextPipe';\nimport { HTMLTextSystem } from './HTMLTextSystem';\n\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../../sprite/BatchableSprite';\nimport { updateTextBounds } from '../utils/updateTextBounds';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Container } from '../../container/Container';\nimport type { Text } from '../Text';\n\nexport class CanvasTextPipe implements RenderPipe<Text>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'text',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.runners.resolutionChange.add(this);\n        this._renderer.renderableGC.addManagedHash(this, '_gpuText');\n    }\n\n    public resolutionChange()\n    {\n        for (const i in this._gpuText)\n        {\n            const gpuText = this._gpuText[i];\n\n            if (!gpuText) continue;\n\n            const text = gpuText.batchableSprite.renderable as Text;\n\n            if (text._autoResolution)\n            {\n                text._resolution = this._renderer.resolution;\n                text.onViewUpdate();\n            }\n        }\n    }\n\n    public validateRenderable(text: Text): boolean\n    {\n        const gpuText = this._getGpuText(text);\n\n        const newKey = text._getKey();\n\n        if (gpuText.currentKey !== newKey)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(text: Text, instructionSet: InstructionSet)\n    {\n        const gpuText = this._getGpuText(text);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n    }\n\n    public updateRenderable(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        batchableSprite._batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(text: Text)\n    {\n        text.off('destroyed', this._destroyRenderableBound);\n\n        this._destroyRenderableById(text.uid);\n    }\n\n    private _destroyRenderableById(textUid: number)\n    {\n        const gpuText = this._gpuText[textUid];\n\n        this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[textUid] = null;\n    }\n\n    private _updateText(text: Text)\n    {\n        const newKey = text._getKey();\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(text);\n        }\n\n        text._didTextUpdate = false;\n\n        updateTextBounds(batchableSprite, text);\n    }\n\n    private _updateGpuText(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.texture)\n        {\n            this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n        }\n\n        gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n        gpuText.currentKey = text._getKey();\n        batchableSprite.texture = gpuText.texture;\n    }\n\n    private _getGpuText(text: Text)\n    {\n        return this._gpuText[text.uid] || this.initGpuText(text);\n    }\n\n    public initGpuText(text: Text)\n    {\n        const gpuTextData: CanvasTextPipe['_gpuText'][number] = {\n            texture: null,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n        };\n\n        gpuTextData.batchableSprite.renderable = text;\n        gpuTextData.batchableSprite.transform = text.groupTransform;\n        gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        gpuTextData.batchableSprite.roundPixels = (this._renderer._roundPixels | text._roundPixels) as 0 | 1;\n\n        this._gpuText[text.uid] = gpuTextData;\n\n        text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n        this._updateText(text);\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        text.on('destroyed', this._destroyRenderableBound);\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n","import { Rectangle } from '../../maths/shapes/Rectangle';\n\nimport type { ICanvas } from '../../environment/canvas/ICanvas';\n\nfunction checkRow(data: Uint8ClampedArray, width: number, y: number)\n{\n    for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\nfunction checkColumn(data: Uint8ClampedArray, width: number, x: number, top: number, bottom: number)\n{\n    const stride = 4 * width;\n\n    for (let y = top, index = (top * stride) + (4 * x); y <= bottom; ++y, index += stride)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\n/**\n * Measuring the bounds of a canvas' visible (non-transparent) pixels.\n * @param canvas - The canvas to measure.\n * @param resolution - The resolution of the canvas.\n * @returns The bounding box of the canvas' visible pixels.\n * @since 7.1.0\n * @memberof utils\n */\nexport function getCanvasBoundingBox(canvas: ICanvas, resolution = 1): Rectangle\n{\n    // https://gist.github.com/timdown/021d9c8f2aabc7092df564996f5afbbf\n\n    const { width, height } = canvas;\n\n    const context = canvas.getContext('2d', {\n        willReadFrequently: true,\n    });\n\n    if (context === null)\n    {\n        throw new TypeError('Failed to get canvas 2D context');\n    }\n\n    const imageData = context.getImageData(0, 0, width, height);\n    const data = imageData.data;\n\n    let left = 0;\n    let top = 0;\n    let right = width - 1;\n    let bottom = height - 1;\n\n    while (top < height && checkRow(data, width, top)) ++top;\n    if (top === height) return Rectangle.EMPTY;\n    while (checkRow(data, width, bottom)) --bottom;\n    while (checkColumn(data, width, left, top, bottom)) ++left;\n    while (checkColumn(data, width, right, top, bottom)) --right;\n\n    ++right;\n    ++bottom;\n\n    return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n","import { Color } from '../../../color/Color';\nimport { ExtensionType } from '../../../extensions/Extensions';\nimport { nextPow2 } from '../../../maths/misc/pow2';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox';\nimport { deprecation } from '../../../utils/logging/deprecation';\nimport { TextStyle } from '../TextStyle';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource';\nimport { CanvasTextMetrics } from './CanvasTextMetrics';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { System } from '../../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { TextOptions } from '../AbstractText';\nimport type { Text } from '../Text';\n\ninterface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * System plugin to the renderer to manage canvas text.\n * @memberof rendering\n */\nexport class CanvasTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'canvasText',\n    } as const;\n\n    private _activeTextures: Record<string, {\n        canvasAndContext: CanvasAndContext,\n        texture: Texture,\n        usageCount: number,\n    }> = {};\n\n    private readonly _renderer: Renderer;\n\n    constructor(_renderer: Renderer)\n    {\n        this._renderer = _renderer;\n    }\n\n    public getTextureSize(text: string, resolution: number, style: TextStyle): { width: number, height: number }\n    {\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        let width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        let height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        width = Math.ceil((width) - 1e-6);\n        height = Math.ceil((height) - 1e-6);\n        width = nextPow2(width);\n        height = nextPow2(height);\n\n        return { width, height };\n    }\n\n    /**\n     * This is a function that will create a texture from a text string, style and resolution.\n     * Useful if you want to make a texture of your text and use if for various other pixi things!\n     * @param options - The options of the text that will be used to generate the texture.\n     * @param options.text - the text to render\n     * @param options.style - the style of the text\n     * @param options.resolution - the resolution of the texture\n     * @returns the newly created texture\n     */\n    /** @deprecated since 8.0.0 */\n    public getTexture(text: string, resolution: number, style: TextStyle, textKey: string): Texture;\n    public getTexture(options: TextOptions): Texture;\n    public getTexture(options: TextOptions | string, resolution?: number, style?: TextStyle, _textKey?: string): Texture\n    {\n        if (typeof options === 'string')\n        {\n            // #if _DEBUG\n            deprecation('8.0.0', 'CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments');\n            // #endif\n\n            options = {\n                text: options,\n                style,\n                resolution,\n            };\n        }\n\n        if (!(options.style instanceof TextStyle))\n        {\n            options.style = new TextStyle(options.style);\n        }\n\n        const { texture, canvasAndContext } = this.createTextureAndCanvas(\n            options as {text: string, style: TextStyle, resolution?: number}\n        );\n\n        this._renderer.texture.initSource(texture._source);\n\n        CanvasPool.returnCanvasAndContext(canvasAndContext);\n\n        return texture;\n    }\n\n    public createTextureAndCanvas(options: {text: string, style: TextStyle, resolution?: number})\n    {\n        const { text, style } = options;\n\n        const resolution = options.resolution ?? this._renderer.resolution;\n\n        // create a canvas with the word hello on it\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n\n        // create a texture from the canvas\n        const { canvas } = canvasAndContext;\n\n        this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n\n        const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n\n        if (style.trim)\n        {\n            const trimmed = getCanvasBoundingBox(canvas, resolution);\n\n            texture.frame.copyFrom(trimmed);\n\n            texture.updateUvs();\n        }\n\n        return { texture, canvasAndContext };\n    }\n\n    public getManagedTexture(text: Text)\n    {\n        text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n        const textKey = text._getKey();\n\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].texture;\n        }\n\n        const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n\n        this._activeTextures[textKey] = {\n            canvasAndContext,\n            texture,\n            usageCount: 1,\n        };\n\n        return texture;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    /**\n     * Returns a texture that was created wit the above `getTexture` function.\n     * Handy if you are done with a texture and want to return it to the pool.\n     * @param texture - The texture to be returned.\n     */\n    public returnTexture(texture: Texture)\n    {\n        const source = texture.source;\n\n        source.resource = null;\n        source.uploadMethodId = 'unknown';\n        source.alphaMode = 'no-premultiply-alpha';\n\n        TexturePool.returnTexture(texture);\n    }\n\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n\n            this.returnTexture(activeTexture.texture);\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey].usageCount;\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     *\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     * @param text\n     * @param style\n     * @param resolution\n     * @param canvasAndContext\n     */\n    public renderTextToCanvas(text: string, style: TextStyle, resolution: number, canvasAndContext: CanvasAndContext): void\n    {\n        const { canvas, context } = canvasAndContext;\n\n        const font = fontStringFromTextStyle(style);\n\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);// , canvas);\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        const height = canvas.height;\n\n        context.resetTransform();\n        context.scale(resolution, resolution);\n        context.textBaseline = style.textBaseline;\n\n        // set stroke styles..\n\n        if (style._stroke?.width)\n        {\n            const strokeStyle = style._stroke;\n\n            context.lineWidth = strokeStyle.width;\n\n            context.miterLimit = strokeStyle.miterLimit;\n            context.lineJoin = strokeStyle.join;\n            context.lineCap = strokeStyle.cap;\n        }\n\n        // return;\n        context.font = font;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (style.padding * 2)) : 0;\n            const dsOffsetShadow = dsOffsetText * resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const shadowOptions = style.dropShadow;\n\n                const dropShadowColor = shadowOptions.color;\n                const dropShadowAlpha = shadowOptions.alpha;\n\n                context.shadowColor = Color.shared\n                    .setValue(dropShadowColor)\n                    .setAlpha(dropShadowAlpha)\n                    .toRgbaString();\n\n                const dropShadowBlur = shadowOptions.blur * resolution;\n                const dropShadowDistance = shadowOptions.distance * resolution;\n\n                context.shadowBlur = dropShadowBlur;\n                context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(shadowOptions.angle) * dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context, measured) : null;\n\n                if (style._stroke?.width)\n                {\n                    const padding = style._stroke.width * style._stroke.alignment;\n\n                    context.strokeStyle = getCanvasFillStyle(style._stroke, context, measured, padding);\n                }\n\n                context.shadowColor = 'black';\n            }\n\n            let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n            if (lineHeight - fontProperties.fontSize < 0)\n            {\n                linePositionYShift = 0;\n            }\n\n            const strokeWidth = style._stroke?.width ?? 0;\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = strokeWidth / 2;\n                linePositionY = ((strokeWidth / 2) + (i * lineHeight)) + fontProperties.ascent + linePositionYShift;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style._stroke?.width)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style._fill !== undefined)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param text - The text to draw\n     * @param style\n     * @param canvasAndContext\n     * @param x - Horizontal position to draw the text\n     * @param y - Vertical position to draw the text\n     * @param isStroke - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     */\n    private _drawLetterSpacing(\n        text: string,\n        style: TextStyle,\n        canvasAndContext: CanvasAndContext,\n        x: number, y: number,\n        isStroke = false\n    ): void\n    {\n        const { context } = canvasAndContext;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        let useExperimentalLetterSpacing = false;\n\n        if (CanvasTextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (CanvasTextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        if (letterSpacing === 0 || useExperimentalLetterSpacing)\n        {\n            if (isStroke)\n            {\n                context.strokeText(text, x, y);\n            }\n            else\n            {\n                context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n        let previousWidth = context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                context.fillText(currentChar, currentPosition, y);\n            }\n            let textStr = '';\n\n            for (let j = i + 1; j < stringArray.length; ++j)\n            {\n                textStr += stringArray[j];\n            }\n            currentWidth = context.measureText(textStr).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    public destroy(): void\n    {\n        this._activeTextures = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem';\n\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { Bounds } from '../../container/bounds/Bounds';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\n\nconst tempBounds = new Bounds();\n\n/**\n * Takes an image and creates a texture from it, using a power of 2 texture from the texture pool.\n * Remember to return the texture when you don't need it any more!\n * @param image - The image to create a texture from\n * @param width - the frame width of the texture\n * @param height - the frame height of the texture\n * @param resolution - The resolution of the texture\n * @returns - The texture\n */\nexport function getPo2TextureFromSource(\n    image: HTMLImageElement | HTMLCanvasElement | ICanvas,\n    width: number,\n    height: number,\n    resolution: number\n): Texture\n{\n    const bounds = tempBounds;\n\n    bounds.minX = 0;\n    bounds.minY = 0;\n\n    bounds.maxX = (image.width / resolution) | 0;\n    bounds.maxY = (image.height / resolution) | 0;\n\n    const texture = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        resolution,\n        false\n    );\n\n    texture.source.uploadMethodId = 'image';\n    texture.source.resource = image;\n    texture.source.alphaMode = 'premultiply-alpha-on-upload';\n\n    texture.frame.width = width / resolution;\n    texture.frame.height = height / resolution;\n\n    // We want to update the resource on the GPU,\n    // but we do not want to resize the texture.\n    // calling `texture.source.update` will fit the resource to the texture\n    // causing a resize of the texture on the GPU.\n    // which is not what we want!\n    texture.source.emit('update', texture.source);\n\n    texture.updateUvs();\n\n    return texture;\n}\n","import { updateQuadBounds } from '../../../utils/data/updateQuadBounds';\nimport { type BatchableSprite } from '../../sprite/BatchableSprite';\nimport { type AbstractText } from '../AbstractText';\n\n/**\n * Updates the bounds of the given batchable sprite based on the provided text object.\n *\n * This function adjusts the bounds of the batchable sprite to match the dimensions\n * and anchor point of the text's texture. Additionally, it compensates for any padding\n * specified in the text's style to ensure the text is rendered correctly on screen.\n * @param {BatchableSprite} batchableSprite - The sprite whose bounds need to be updated.\n * @param {AbstractText} text - The text object containing the texture and style information.\n */\nexport function updateTextBounds(batchableSprite: BatchableSprite, text: AbstractText)\n{\n    const { texture, bounds } = batchableSprite;\n\n    updateQuadBounds(bounds, text._anchor, texture);\n\n    const padding = text._style.padding;\n    // When HTML text textures are created, they include the padding around the text content\n    // to prevent text clipping and provide a buffer zone. This padding is built into\n    // the texture itself. However, we don't want this padding to affect the text's\n    // actual position on screen.\n    // To compensate, we shift the render position back by the padding amount,\n    // ensuring the text appears exactly where intended while maintaining the\n    // buffer zone around it.\n\n    bounds.minX -= padding;\n    bounds.minY -= padding;\n    bounds.maxX -= padding;\n    bounds.maxY -= padding;\n}\n"],"names":["ResizePlugin","init","options","Object","defineProperty","this","set","dom","globalThis","removeEventListener","queueResize","_resizeTo","addEventListener","resize","get","_cancelResize","_resizeId","requestAnimationFrame","cancelAnimationFrame","width","height","window","innerWidth","innerHeight","clientWidth","clientHeight","renderer","render","resizeTo","destroy","extension","ExtensionType","Application","TickerPlugin","assign","autoStart","sharedTicker","ticker","_ticker","remove","add","UPDATE_PRIORITY","LOW","stop","start","Ticker","shared","oldTicker","extensions","FilterPipe","constructor","_renderer","push","filterEffect","container","instructionSet","renderPipes","batch","break","renderPipeId","canBundle","action","pop","_filterEffect","_container","execute","instruction","filter","type","WebGLPipes","WebGPUPipes","CanvasPipes","name","quadGeometry","Geometry","attributes","aPosition","buffer","Float32Array","format","stride","offset","indexBuffer","Uint32Array","FilterSystem","_filterStackIndex","_filterStack","_filterGlobalUniforms","UniformGroup","uInputSize","value","uInputPixel","uInputClamp","uOutputFrame","uGlobalFrame","uOutputTexture","_globalFilterBindGroup","BindGroup","activeBackTexture","_this$_activeFilterDa","_activeFilterData","backTexture","filters","_getFilterData","filterData","length","skip","bounds","renderables","clear","tempMatrix","matrix","i","renderable","globalDisplayStatus","worldTransform","addBounds","getGlobalRenderableBounds","filterArea","addRect","applyMatrix","getFastGlobalBounds","filterFrameTransform","renderGroup","parentRenderGroup","cacheToLocalTransform","colorTextureSource","renderTarget","colorTexture","source","resolution","Infinity","padding","antialias","blendRequired","enabled","clipToViewport","_renderer$backBuffer$","_renderer$backBuffer","Math","min","_resolution","compatibleRenderers","backBuffer","useBackBuffer","warn","viewPort","rootViewPort","rootResolution","fitBounds","scale","ceil","pad","isPositive","previousRenderSurface","renderSurface","inputTexture","TexturePool","getOptimalTexture","bind","globalUniforms","Texture","EMPTY","finishRenderPass","previousBounds","getRenderTarget","getBackTexture","setResource","style","apply","returnTexture","flip","flop","t","lastRenderSurface","backgroundResolution","x","minX","y","minY","floor","copyToTexture","applyFilter","input","output","Point","isFinalTarget","rootRenderTarget","currentIndex","filterUniforms","uniforms","outputFrame","inputSize","inputPixel","inputClamp","globalFrame","outputTexture","lastIndex","filterData2","frame","pixelWidth","pixelHeight","rootTexture","isRoot","update","uniformBatch","batchUniforms","getUboResource","groups","encoder","draw","geometry","shader","state","_state","topology","RendererType","WEBGL","Bounds","calculateSpriteMatrix","outputMatrix","sprite","data","mappedMatrix","_source","copyTo","Matrix","prepend","invert","texture","translate","anchor","WebGLSystem","WebGPUSystem","localUniformBit","vertex","header","main","end","localUniformBitGroup2","_objectSpread","replace","localUniformBitGl","color32BitToUniform","abgr","out","alpha","GraphicsPipe","adaptor","State","for2d","_graphicsBatchesHash","create","_destroyRenderableBound","destroyRenderable","_adaptor","renderableGC","addManagedHash","validateRenderable","graphics","context","wasBatched","uid","gpuContext","graphicsContext","updateGpuContext","isBatchable","addRenderable","didViewUpdate","_rebuild","_addToBatcher","updateRenderable","batches","_batcher","updateElement","_removeBatchForRenderable","off","isRenderable","getGpuContext","customShader","blendMode","groupBlendMode","localUniforms","resources","uTransformMatrix","groupTransform","uRound","_roundPixels","groupColorAlpha","uColor","_initBatchesForRenderable","batched","batchPipe","_getBatchesForRenderable","addToBatch","roundPixels","map","batchClone","BigPool","BatchableGraphics","on","graphicsUid","forEach","return","GraphicsContextSystem","MeshPipe","localUniformsBindGroup","_meshDataHash","_gpuBatchableMeshHash","mesh","meshData","_getMeshData","isBatched","_geometry","indices","indexSize","positions","vertexSize","batchableMesh","_getBatchableMesh","_texture","_textureMatrixUpdateId","checkAndUpdateTexture","batcher","gpuBatchableMesh","setTexture","gpuMesh","getAdjustedBlendModeBlend","_initMeshData","_mesh$_geometry$indic","_mesh$_geometry$posit","_initBatchableMesh","BatchableMesh","transform","batcherName","packAsQuad","indexOffset","attributeOffset","_batch","_uvUpdateId","_topology","reset","uvs","uvBuffer","getBuffer","transformedUvs","textureMatrix","isSimple","_transformedUvs","_updateID","multiplyUvs","color","attributeSize","GlParticleContainerAdaptor","particleContainerPipe","defaultShader","uTexture","gl","getBuffers","glProgram","glType","BYTES_PER_ELEMENT","UNSIGNED_SHORT","UNSIGNED_INT","drawElements","TRIANGLES","particleChildren","createIndicesForQuads","size","outBuffer","arguments","undefined","totalIndices","Uint16Array","Error","concat","j","generateUpdateFunction","properties","dynamic","funcFragments","property","code","getAttributeInfoFromFormat","unshift","functionSource","join","Function","ParticleBuffer","_options$size","_size","_generateParticleUpdateCache","staticVertexSize","dynamicVertexSize","attributeInfo","_dynamicStride","_staticStride","staticAttributeBuffer","ViewableBuffer","dynamicAttributeBuffer","dynamicOffset","staticOffset","_staticBuffer","Buffer","label","shrinkToFit","usage","BufferUsage","VERTEX","COPY_DST","_dynamicBuffer","addAttribute","attributeName","addIndex","uploadFunction","getParticleUpdate","_dynamicUpload","dynamicUpdate","_staticUpload","staticUpdate","key","keyGen","getParticleSyncKey","generateParticleUpdate","generateParticleUpdateFunction","particles","uploadStatic","max","setDataWithSize","byteLength","float32View","uint32View","ParticleShader","Shader","GlProgram","from","fragment","gpuProgram","GpuProgram","wgsl","entryPoint","WHITE","uSampler","TextureStyle","uTranslationMatrix","Color","uResolution","ParticleContainerPipe","_gpuBufferHash","_renderable","_initBuffer","_properties","children","_childrenDirty","transformationMatrix","globalUniformData","projectionMatrix","GlParticleContainerPipe","GpuParticleContainerAdaptor","getUniformBindGroup","getTextureBindGroup","GpuParticleContainerPipe","_PlaneGeometry","MeshGeometry","_ref","super","deprecation","v8_0_0","verticesX","verticesY","build","_this$verticesX","_this$verticesY","_this$width","_this$height","defaultOptions","total","verts","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","buffers","PlaneGeometry","_NineSliceGeometry","_options$width","_options$height","_options$originalWidt","_options$originalHeig","_options$leftWidth","_options$rightWidth","_options$topHeight","_options$bottomHeight","_options$anchor","_options$anchor2","_originalWidth","originalWidth","_originalHeight","originalHeight","_leftWidth","leftWidth","_rightWidth","rightWidth","_topHeight","topHeight","_bottomHeight","bottomHeight","_anchorX","_anchorY","updateUvs","updatePositions","p","w","scaleW","h","scaleH","anchorOffsetX","anchorOffsetY","_uvw","_uvh","NineSliceGeometry","NineSliceSpritePipe","_gpuSpriteHash","gpuSprite","_getGpuSprite","_updateBatchableSprite","batchableSprite","_initGPUSprite","tilingBit","tilingBitGl","TilingSpriteShader","compileHighShaderGpuProgram","bits","roundPixelsBit","compileHighShaderGlProgram","roundPixelsBitGl","tilingUniforms","uMapCoord","uClampFrame","uClampOffset","uTextureTransform","uSizeAnchor","updateUniforms","anchorX","anchorY","textureWidth","textureHeight","a","b","c","d","tx","ty","mapCoord","QuadGeometry","sharedQuad","TilingSpritePipe","default2d","_tilingSpriteDataHash","tilingSpriteData","_getTilingSpriteData","couldBatch","canBatch","_updateCanBatch","tilingSprite","_updateBatchableMesh","bindGroup","_tileTransform","_tilingSpriteData$sha","_initTilingSpriteData","slice","renderableData","addressMode","applyAnchorToTexture","copyFrom","array","index","setUvs","setPositions","_nonPowOf2wrapping","supports","nonPowOf2wrapping","isPowerOfTwo","BatchableSprite","_attributeStart","Graphics","ViewContainer","GraphicsContext","rest","_objectWithoutProperties","_excluded","_context","_ownedContext","onViewUpdate","allowChildren","updateBounds","containsPoint","point","_callContextMethod","method","args","setFillStyle","_len","Array","_key","setStrokeStyle","_len2","_key2","fill","_len3","_key3","stroke","_len4","_key4","_len5","_key5","beginPath","cut","arc","_len6","_key6","arcTo","_len7","_key7","arcToSvg","_len8","_key8","bezierCurveTo","_len9","_key9","closePath","ellipse","_len10","_key10","circle","_len11","_key11","path","_len12","_key12","lineTo","_len13","_key13","moveTo","_len14","_key14","quadraticCurveTo","_len15","_key15","rect","_len16","_key16","roundRect","_len17","_key17","poly","_len18","_key18","regularPoly","_len19","_key19","roundPoly","_len20","_key20","roundShape","_len21","_key21","filletRect","_len22","_key22","chamferRect","_len23","_key23","star","_len24","_key24","svg","_len25","_key25","restore","_len26","_key26","save","getTransform","resetTransform","rotateTransform","_len27","_key27","scaleTransform","_len28","_key28","setTransform","_len29","_key29","_len30","_key30","translateTransform","_len31","_key31","fillStyle","strokeStyle","clone","lineStyle","beginFill","endFill","defaultStrokeStyle","drawCircle","_len32","_key32","drawEllipse","_len33","_key33","drawPolygon","_len34","_key34","drawRect","_len35","_key35","drawRoundedRect","_len36","_key36","drawStar","_len37","_key37","localUniformMSDFBit","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","SdfShader","uDistance","maxTextures","getMaxTexturesPerBatch","colorBit","generateTextureBatchBit","colorBitGl","generateTextureBatchBitGl","batchSamplers","getBatchSamplersUniformGroup","BitmapTextPipe","_gpuBitmapText","bitmapText","graphicsRenderable","_getGpuBitmapText","_didTextUpdate","_updateContext","syncWithProxy","_updateDistanceField","_destroyRenderableByUid","renderableUid","proxyGraphics","bitmapFont","BitmapFontManager","getFont","text","_style","distanceField","chars","currentY","baseLineOffset","bitmapTextLayout","getBitmapTextLayout","offsetY","_stroke","_anchor","_x","_y","tint","applyFillAsTint","_fill","lines","line","charPositions","char","charData","round","xOffset","yOffset","lineHeight","initGpuText","proxyRenderable","fontFamily","dynamicFont","Cache","dx","sqrt","dy","worldScale","abs","fontScale","baseRenderedFontSize","fontSize","distance","range","proxy","groupColor","localDisplayStatus","groupAlpha","HTMLTextPipe","_gpuText","runners","resolutionChange","gpuText","_autoResolution","htmlText","_getGpuText","newKey","_getKey","textureNeedsUploading","currentKey","_updateText","_destroyRenderableById","htmlTextUid","decreaseReferenceCount","_updateGpuText","catch","e","console","error","updateTextBounds","_htmlText$resolution","generatingTexture","getManagedTexture","gpuTextData","maxX","maxY","nssvg","nsxhtml","HTMLTextRenderData","svgRoot","document","createElementNS","foreignObject","domElement","styleElement","image","Image","setAttribute","overflow","appendChild","textStyleToCSS","cssStyleString","setValue","toHex","fontWeight","fontStyle","fontVariant","letterSpacing","align","whiteSpace","wordWrap","breakWords","wordWrapWidth","strokeToCSS","dropShadow","dropShadowToCSS","cssOverrides","cssStyles","tagStyles","tagStyle","cssTagStyle","templates","tagStyleToCSS","dropShadowStyle","setAlpha","toHexa","cos","angle","sin","position","blur","HTMLTextStyle","TextStyle","_this$cssOverrides","_options$tagStyles","_cssOverrides","_generateKey","_styleKey","generateTextStyleKey","_cssStyle","cssStyle","addOverride","toAdd","v","includes","removeOverride","toRemove","loadFontCSS","url","dataSrc","response","DOMAdapter","fetch","blob","reader","FileReader","Promise","resolve","reject","onloadend","result","onerror","readAsDataURL","loadFontAsBase64","FontStylePromiseCache","Map","tempHTMLTextRenderData","HTMLTextSystem","_activeTextures","_createCanvas","WEBGPU","getTexture","_buildTexturePromise","textKey","_increaseReferenceCount","promise","then","usageCount","htmlTextData","fontFamilies","dedupe","matches","match","addFontFamily","fontFamily2","isArray","split","trim","extractFontFamilies","fontCSS","fontPromises","has","all","getFontCss","defaultTextStyle","measured","fontStyleCSS","htmlTextRenderData","innerHTML","textContent","body","contentBounds","getBoundingClientRect","doublePadding","measureHtmlText","svgURL","toString","XMLSerializer","serializeToString","getSVGUrl","delay","async","resolve2","setTimeout","onload","src","encodeURIComponent","crossOrigin","loadSVGImage","userAgent","getNavigator","test","isSafari","resource","canvasAndContext","CanvasPool","getOptimalCanvasAndContext","clearRect","drawImage","getTemporaryCanvasFromImage","getPo2TextureFromSource","canvas","initSource","returnCanvasAndContext","activeTexture","_cleanUp","uploadMethodId","getReferenceCount","CanvasSystem","defaultFontOptions","CanvasTextPipe","textUid","canvasText","checkRow","checkColumn","top","bottom","CanvasTextSystem","getTextureSize","CanvasTextMetrics","measureText","nextPow2","_textKey","createTextureAndCanvas","_options$resolution","renderTextToCanvas","trimmed","getContext","willReadFrequently","TypeError","getImageData","left","right","Rectangle","getCanvasBoundingBox","alphaMode","_style$_stroke","font","fontStringFromTextStyle","lineWidths","maxLineWidth","fontProperties","textBaseline","lineWidth","miterLimit","lineJoin","lineCap","cap","linePositionX","linePositionY","passesCount","_style$_stroke$width","_style$_stroke3","isShadowPass","dsOffsetText","dsOffsetShadow","shadowOptions","dropShadowColor","dropShadowAlpha","shadowColor","toRgbaString","dropShadowBlur","dropShadowDistance","shadowBlur","shadowOffsetX","shadowOffsetY","_style$_stroke2","getCanvasFillStyle","alignment","linePositionYShift","strokeWidth","i2","_style$_stroke4","ascent","_drawLetterSpacing","isStroke","useExperimentalLetterSpacing","experimentalLetterSpacingSupported","experimentalLetterSpacing","textLetterSpacing","strokeText","fillText","currentPosition","stringArray","graphemeSegmenter","previousWidth","currentWidth","currentChar","textStr","tempBounds","emit","updateQuadBounds"],"sourceRoot":""}