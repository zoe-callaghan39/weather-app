{"version":3,"file":"static/js/258.e6288709.chunk.js","mappings":"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","sources":["../node_modules/pixi.js/src/scene/graphics/gpu/GpuGraphicsAdaptor.ts","../node_modules/pixi.js/src/scene/mesh/gpu/GpuMeshAdapter.ts","../node_modules/pixi.js/src/rendering/batcher/gpu/GpuBatchAdaptor.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/BindGroupSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/buffer/GpuBufferSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/GpuColorMaskSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/GpuDeviceSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/GpuEncoderSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/GpuStencilSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/createUboElementsWGSL.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/generateArraySyncWGSL.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/createUboSyncFunctionWGSL.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/GpuUboSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/buffer/UboBatch.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/GpuUniformBatchPipe.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/pipeline/PipelineSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/renderTarget/GpuRenderTarget.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/renderTarget/GpuRenderTargetAdaptor.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/renderTarget/GpuRenderTargetSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/shader/GpuShaderSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/state/GpuBlendModesToPixi.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/state/GpuStateSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/texture/uploaders/gpuUploadBufferImageResource.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/texture/uploaders/gpuUploadCompressedTextureResource.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/texture/uploaders/gpuUploadImageSource.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/texture/uploaders/gpuUploadVideoSource.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/texture/utils/GpuMipmapGenerator.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/texture/GpuTextureSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/WebGPURenderer.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures';\nimport { getTextureBatchBindGroup } from '../../../rendering/batcher/gpu/getTextureBatchBindGroup';\nimport { compileHighShaderGpuProgram } from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBit } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport { generateTextureBatchBit } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { localUniformBitGroup2 } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\n\nimport type { Batch } from '../../../rendering/batcher/shared/Batcher';\nimport type { GpuEncoderSystem } from '../../../rendering/renderers/gpu/GpuEncoderSystem';\nimport type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { Graphics } from '../shared/Graphics';\nimport type { GraphicsAdaptor, GraphicsPipe } from '../shared/GraphicsPipe';\n\n/**\n * A GraphicsAdaptor that uses the GPU to render graphics.\n * @memberof rendering\n * @ignore\n */\nexport class GpuGraphicsAdaptor implements GraphicsAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipesAdaptor,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public shader: Shader;\n\n    public init()\n    {\n        const localUniforms = new UniformGroup({\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        const gpuProgram = compileHighShaderGpuProgram({\n            name: 'graphics',\n            bits: [\n                colorBit,\n                generateTextureBatchBit(getMaxTexturesPerBatch()),\n\n                localUniformBitGroup2,\n                roundPixelsBit\n            ]\n        });\n\n        this.shader = new Shader({\n            gpuProgram,\n            resources: {\n                // added on the fly!\n                localUniforms,\n            },\n        });\n    }\n\n    public execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void\n    {\n        const context = renderable.context;\n        const shader = context.customShader || this.shader;\n        const renderer = graphicsPipe.renderer as WebGPURenderer;\n        const contextSystem = renderer.graphicsContext;\n\n        const {\n            batcher, instructions\n        } = contextSystem.getContextRenderData(context);\n\n        // WebGPU specific...\n\n        // TODO perf test this a bit...\n        const encoder = renderer.encoder as GpuEncoderSystem;\n\n        encoder.setGeometry(batcher.geometry, shader.gpuProgram);\n\n        const globalUniformsBindGroup = renderer.globalUniforms.bindGroup;\n\n        encoder.setBindGroup(0, globalUniformsBindGroup, shader.gpuProgram);\n\n        const localBindGroup = (renderer as WebGPURenderer)\n            .renderPipes.uniformBatch.getUniformBindGroup(shader.resources.localUniforms, true);\n\n        encoder.setBindGroup(2, localBindGroup, shader.gpuProgram);\n\n        const batches = instructions.instructions as Batch[];\n\n        let topology: Topology = null;\n\n        for (let i = 0; i < instructions.instructionSize; i++)\n        {\n            const batch = batches[i];\n\n            if (batch.topology !== topology)\n            {\n                topology = batch.topology;\n\n                encoder.setPipelineFromGeometryProgramAndState(\n                    batcher.geometry,\n                    shader.gpuProgram,\n                    graphicsPipe.state,\n                    batch.topology\n                );\n            }\n\n            shader.groups[1] = batch.bindGroup;\n\n            if (!batch.gpuBindGroup)\n            {\n                const textureBatch = batch.textures;\n\n                batch.bindGroup = getTextureBatchBindGroup(textureBatch.textures, textureBatch.count);\n                batch.gpuBindGroup = renderer.bindGroup.getBindGroup(\n                    batch.bindGroup, shader.gpuProgram, 1\n                );\n            }\n\n            encoder.setBindGroup(1, batch.bindGroup, shader.gpuProgram);\n\n            encoder.renderPassEncoder.drawIndexed(batch.size, 1, batch.start);\n        }\n    }\n\n    public destroy(): void\n    {\n        this.shader.destroy(true);\n        this.shader = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { compileHighShaderGpuProgram } from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBit } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { textureBit } from '../../../rendering/high-shader/shader-bits/textureBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { warn } from '../../../utils/logging/warn';\n\nimport type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\nimport type { Mesh } from '../shared/Mesh';\nimport type { MeshAdaptor, MeshPipe } from '../shared/MeshPipe';\n\n/**\n * The WebGL adaptor for the mesh system. Allows the Mesh System to be used with the WebGl renderer\n * @memberof rendering\n * @ignore\n */\nexport class GpuMeshAdapter implements MeshAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipesAdaptor,\n        ],\n        name: 'mesh',\n    } as const;\n\n    private _shader: Shader;\n\n    public init(): void\n    {\n        const gpuProgram = compileHighShaderGpuProgram({\n            name: 'mesh',\n            bits: [\n                localUniformBit,\n                textureBit,\n                roundPixelsBit,\n            ]\n        });\n\n        this._shader = new Shader({\n            gpuProgram,\n            resources: {\n                uTexture: Texture.EMPTY._source,\n                uSampler: Texture.EMPTY._source.style,\n                textureUniforms: {\n                    uTextureMatrix: { type: 'mat3x3<f32>', value: new Matrix() },\n                }\n            }\n        });\n    }\n\n    public execute(meshPipe: MeshPipe, mesh: Mesh)\n    {\n        const renderer = meshPipe.renderer as WebGPURenderer;\n\n        let shader: Shader = mesh._shader;\n\n        if (!shader)\n        {\n            shader = this._shader;\n\n            shader.groups[2] = renderer.texture.getTextureBindGroup(mesh.texture);\n        }\n        else if (!shader.gpuProgram)\n        {\n            // #if _DEBUG\n            warn('Mesh shader has no gpuProgram', mesh.shader);\n            // #endif\n\n            return;\n        }\n\n        const gpuProgram = shader.gpuProgram;\n        // GPU..\n\n        if (gpuProgram.autoAssignGlobalUniforms)\n        {\n            shader.groups[0] = renderer.globalUniforms.bindGroup;\n        }\n\n        if (gpuProgram.autoAssignLocalUniforms)\n        {\n            const localUniforms = meshPipe.localUniforms;\n\n            shader.groups[1] = (renderer as WebGPURenderer)\n                .renderPipes.uniformBatch.getUniformBindGroup(localUniforms, true);\n        }\n\n        renderer.encoder.draw({\n            geometry: mesh._geometry,\n            shader,\n            state: mesh.state\n        });\n    }\n\n    public destroy(): void\n    {\n        this._shader.destroy(true);\n        this._shader = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../renderers/shared/state/State';\nimport { getTextureBatchBindGroup } from './getTextureBatchBindGroup';\n\nimport type { GpuEncoderSystem } from '../../renderers/gpu/GpuEncoderSystem';\nimport type { WebGPURenderer } from '../../renderers/gpu/WebGPURenderer';\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { Shader } from '../../renderers/shared/shader/Shader';\nimport type { Batch } from '../shared/Batcher';\nimport type { BatcherAdaptor, BatcherPipe } from '../shared/BatcherPipe';\n\nconst tempState = State.for2d();\n\n/**\n * A BatcherAdaptor that uses the GPU to render batches.\n * @memberof rendering\n * @ignore\n */\nexport class GpuBatchAdaptor implements BatcherAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipesAdaptor,\n        ],\n        name: 'batch',\n    } as const;\n\n    private _shader: Shader;\n    private _geometry: Geometry;\n\n    public start(batchPipe: BatcherPipe, geometry: Geometry, shader: Shader): void\n    {\n        const renderer = batchPipe.renderer as WebGPURenderer;\n        const encoder = renderer.encoder as GpuEncoderSystem;\n        const program = shader.gpuProgram;\n\n        this._shader = shader;\n        this._geometry = geometry;\n\n        encoder.setGeometry(geometry, program);\n\n        tempState.blendMode = 'normal';\n\n        // this just initiates the pipeline, so we can then set bind groups on it\n        renderer.pipeline.getPipeline(\n            geometry,\n            program,\n            tempState\n        );\n\n        const globalUniformsBindGroup = renderer.globalUniforms.bindGroup;\n\n        // low level - we need to reset the bind group at location 1 to null\n        // this is because we directly manipulate the bound buffer in the execute function for\n        // performance reasons.\n        // setting it to null ensures that the next bind group we set at location 1 will\n        // be the one we want.\n        encoder.resetBindGroup(1);\n\n        encoder.setBindGroup(0, globalUniformsBindGroup, program);\n    }\n\n    public execute(batchPipe: BatcherPipe, batch: Batch): void\n    {\n        const program = this._shader.gpuProgram;\n        const renderer = batchPipe.renderer as WebGPURenderer;\n        const encoder = renderer.encoder as GpuEncoderSystem;\n\n        if (!batch.bindGroup)\n        {\n            const textureBatch = batch.textures;\n\n            batch.bindGroup = getTextureBatchBindGroup(textureBatch.textures, textureBatch.count);\n        }\n\n        tempState.blendMode = batch.blendMode;\n\n        const gpuBindGroup = renderer.bindGroup.getBindGroup(\n            batch.bindGroup, program, 1\n        );\n\n        const pipeline = renderer.pipeline.getPipeline(\n            this._geometry,\n            program,\n            tempState,\n            batch.topology\n        );\n\n        batch.bindGroup._touch(renderer.textureGC.count);\n\n        encoder.setPipeline(pipeline);\n\n        encoder.renderPassEncoder.setBindGroup(1, gpuBindGroup);\n        encoder.renderPassEncoder.drawIndexed(batch.size, 1, batch.start);\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Buffer } from '../shared/buffer/Buffer';\nimport type { BufferResource } from '../shared/buffer/BufferResource';\nimport type { UniformGroup } from '../shared/shader/UniformGroup';\nimport type { System } from '../shared/system/System';\nimport type { TextureSource } from '../shared/texture/sources/TextureSource';\nimport type { TextureStyle } from '../shared/texture/TextureStyle';\nimport type { GPU } from './GpuDeviceSystem';\nimport type { BindGroup } from './shader/BindGroup';\nimport type { BindResource } from './shader/BindResource';\nimport type { GpuProgram } from './shader/GpuProgram';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\n/**\n * This manages the WebGPU bind groups. this is how data is bound to a shader when rendering\n * @memberof rendering\n */\nexport class BindGroupSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'bindGroup',\n    } as const;\n\n    private readonly _renderer: WebGPURenderer;\n\n    private _hash: Record<string, GPUBindGroup> = Object.create(null);\n    private _gpu: GPU;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_hash');\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this._gpu = gpu;\n    }\n\n    public getBindGroup(bindGroup: BindGroup, program: GpuProgram, groupIndex: number): GPUBindGroup\n    {\n        bindGroup._updateKey();\n\n        const gpuBindGroup = this._hash[bindGroup._key] || this._createBindGroup(bindGroup, program, groupIndex);\n\n        return gpuBindGroup;\n    }\n\n    private _createBindGroup(group: BindGroup, program: GpuProgram, groupIndex: number): GPUBindGroup\n    {\n        const device = this._gpu.device;\n        const groupLayout = program.layout[groupIndex];\n        const entries: GPUBindGroupEntry[] = [];\n        const renderer = this._renderer;\n\n        for (const j in groupLayout)\n        {\n            const resource: BindResource = group.resources[j] ?? group.resources[groupLayout[j]];\n            let gpuResource: GPUSampler | GPUTextureView | GPUExternalTexture | GPUBufferBinding;\n            // TODO make this dynamic..\n\n            if (resource._resourceType === 'uniformGroup')\n            {\n                const uniformGroup = resource as UniformGroup;\n\n                renderer.ubo.updateUniformGroup(uniformGroup as UniformGroup);\n\n                const buffer = uniformGroup.buffer;\n\n                gpuResource = {\n                    buffer: renderer.buffer.getGPUBuffer(buffer),\n                    offset: 0,\n                    size: buffer.descriptor.size,\n                };\n            }\n            else if (resource._resourceType === 'buffer')\n            {\n                const buffer = resource as Buffer;\n\n                gpuResource = {\n                    buffer: renderer.buffer.getGPUBuffer(buffer),\n                    offset: 0,\n                    size: buffer.descriptor.size,\n                };\n            }\n            else if (resource._resourceType === 'bufferResource')\n            {\n                const bufferResource = resource as BufferResource;\n\n                gpuResource = {\n                    buffer: renderer.buffer.getGPUBuffer(bufferResource.buffer),\n                    offset: bufferResource.offset,\n                    size: bufferResource.size,\n                };\n            }\n            else if (resource._resourceType === 'textureSampler')\n            {\n                const sampler = resource as TextureStyle;\n\n                gpuResource = renderer.texture.getGpuSampler(sampler);\n            }\n            else if (resource._resourceType === 'textureSource')\n            {\n                const texture = resource as TextureSource;\n\n                gpuResource = renderer.texture.getGpuSource(texture).createView({\n\n                });\n            }\n\n            entries.push({\n                binding: groupLayout[j],\n                resource: gpuResource,\n            });\n        }\n\n        const layout = renderer.shader.getProgramData(program).bindGroups[groupIndex];\n\n        const gpuBindGroup = device.createBindGroup({\n            layout,\n            entries,\n        });\n\n        this._hash[group._key] = gpuBindGroup;\n\n        return gpuBindGroup;\n    }\n\n    public destroy(): void\n    {\n        for (const key of Object.keys(this._hash))\n        {\n            this._hash[key] = null;\n        }\n\n        this._hash = null;\n\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { fastCopy } from '../../shared/buffer/utils/fastCopy';\n\nimport type { Buffer } from '../../shared/buffer/Buffer';\nimport type { System } from '../../shared/system/System';\nimport type { GPU } from '../GpuDeviceSystem';\nimport type { WebGPURenderer } from '../WebGPURenderer';\n\n/**\n * System plugin to the renderer to manage buffers.\n * @memberof rendering\n */\nexport class GpuBufferSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'buffer',\n    } as const;\n\n    protected CONTEXT_UID: number;\n    private _gpuBuffers: { [key: number]: GPUBuffer } = Object.create(null);\n    private readonly _managedBuffers: Buffer[] = [];\n\n    private _gpu: GPU;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        renderer.renderableGC.addManagedHash(this, '_gpuBuffers');\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this._gpu = gpu;\n    }\n\n    public getGPUBuffer(buffer: Buffer): GPUBuffer\n    {\n        return this._gpuBuffers[buffer.uid] || this.createGPUBuffer(buffer);\n    }\n\n    public updateBuffer(buffer: Buffer): GPUBuffer\n    {\n        const gpuBuffer = this._gpuBuffers[buffer.uid] || this.createGPUBuffer(buffer);\n\n        const data = buffer.data;\n\n        // TODO this can be better...\n        if (buffer._updateID && data)\n        {\n            buffer._updateID = 0;\n\n            // make sure\n            this._gpu.device.queue.writeBuffer(\n                gpuBuffer, 0, data.buffer, 0,\n                // round to the nearest 4 bytes\n                ((buffer._updateSize || data.byteLength) + 3) & ~3\n            );\n        }\n\n        return gpuBuffer;\n    }\n\n    /** dispose all WebGL resources of all managed buffers */\n    public destroyAll(): void\n    {\n        for (const id in this._gpuBuffers)\n        {\n            this._gpuBuffers[id].destroy();\n        }\n\n        this._gpuBuffers = {};\n    }\n\n    public createGPUBuffer(buffer: Buffer): GPUBuffer\n    {\n        if (!this._gpuBuffers[buffer.uid])\n        {\n            buffer.on('update', this.updateBuffer, this);\n            buffer.on('change', this.onBufferChange, this);\n            buffer.on('destroy', this.onBufferDestroy, this);\n\n            this._managedBuffers.push(buffer);\n        }\n\n        const gpuBuffer = this._gpu.device.createBuffer(buffer.descriptor);\n\n        buffer._updateID = 0;\n\n        if (buffer.data)\n        {\n            // TODO if data is static, this can be mapped at creation\n            fastCopy(buffer.data.buffer, gpuBuffer.getMappedRange());\n\n            gpuBuffer.unmap();\n        }\n\n        this._gpuBuffers[buffer.uid] = gpuBuffer;\n\n        return gpuBuffer;\n    }\n\n    protected onBufferChange(buffer: Buffer)\n    {\n        const gpuBuffer = this._gpuBuffers[buffer.uid];\n\n        gpuBuffer.destroy();\n        buffer._updateID = 0;\n        this._gpuBuffers[buffer.uid] = this.createGPUBuffer(buffer);\n    }\n\n    /**\n     * Disposes buffer\n     * @param buffer - buffer with data\n     */\n    protected onBufferDestroy(buffer: Buffer): void\n    {\n        this._managedBuffers.splice(this._managedBuffers.indexOf(buffer), 1);\n\n        this._destroyBuffer(buffer);\n    }\n\n    public destroy(): void\n    {\n        this._managedBuffers.forEach((buffer) => this._destroyBuffer(buffer));\n\n        (this._managedBuffers as null) = null;\n\n        this._gpuBuffers = null;\n    }\n\n    private _destroyBuffer(buffer: Buffer): void\n    {\n        const gpuBuffer = this._gpuBuffers[buffer.uid];\n\n        gpuBuffer.destroy();\n\n        buffer.off('update', this.updateBuffer, this);\n        buffer.off('change', this.onBufferChange, this);\n        buffer.off('destroy', this.onBufferDestroy, this);\n\n        this._gpuBuffers[buffer.uid] = null;\n    }\n}\n\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { System } from '../shared/system/System';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\n/**\n * The system that handles color masking for the GPU.\n * @memberof rendering\n */\nexport class GpuColorMaskSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'colorMask',\n    } as const;\n\n    private readonly _renderer: WebGPURenderer;\n\n    private _colorMaskCache = 0b1111;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public setMask(colorMask: number)\n    {\n        if (this._colorMaskCache === colorMask) return;\n        this._colorMaskCache = colorMask;\n\n        this._renderer.pipeline.setColorMask(colorMask);\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n        this._colorMaskCache = null;\n    }\n}\n","import { DOMAdapter } from '../../../environment/adapter';\nimport { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { System } from '../shared/system/System';\nimport type { GpuPowerPreference } from '../types';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\n/** The GPU object. */\nexport interface GPU\n{\n    /** The GPU adapter */\n    adapter: GPUAdapter;\n    /** The GPU device */\n    device: GPUDevice;\n}\n\n/**\n * Options for the WebGPU context.\n * @property {GpuPowerPreference} [powerPreference=default] - An optional hint indicating what configuration of GPU\n * is suitable for the WebGPU context, can be `'high-performance'` or `'low-power'`.\n * Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n * while setting to `'low-power'` will prioritize power saving over rendering performance.\n * @property {boolean} [forceFallbackAdapter=false] - Force the use of the fallback adapter\n * @memberof rendering\n */\nexport interface GpuContextOptions\n{\n    /**\n     * An optional hint indicating what configuration of GPU is suitable for the WebGPU context,\n     * can be `'high-performance'` or `'low-power'`.\n     * Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n     * while setting to `'low-power'` will prioritize power saving over rendering performance.\n     * @default undefined\n     * @memberof rendering.WebGPUOptions\n     */\n    powerPreference?: GpuPowerPreference;\n    /**\n     * Force the use of the fallback adapter\n     * @default false\n     * @memberof rendering.WebGPUOptions\n     */\n    forceFallbackAdapter: boolean;\n}\n\n/**\n * System plugin to the renderer to manage the context.\n * @class\n * @memberof rendering\n */\nexport class GpuDeviceSystem implements System<GpuContextOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'device',\n    } as const;\n\n    /** The default options for the GpuDeviceSystem. */\n    public static defaultOptions: GpuContextOptions = {\n        /**\n         * {@link WebGPUOptions.powerPreference}\n         * @default default\n         */\n        powerPreference: undefined,\n        /**\n         * Force the use of the fallback adapter\n         * @default false\n         */\n        forceFallbackAdapter: false,\n    };\n\n    /** The GPU device */\n    public gpu: GPU;\n\n    private _renderer: WebGPURenderer;\n    private _initPromise: Promise<void>;\n\n    /**\n     * @param {WebGPURenderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public async init(options: GpuContextOptions): Promise<void>\n    {\n        if (this._initPromise) return this._initPromise;\n\n        this._initPromise = this._createDeviceAndAdaptor(options)\n            .then((gpu) =>\n            {\n                this.gpu = gpu;\n\n                this._renderer.runners.contextChange.emit(this.gpu);\n            });\n\n        return this._initPromise;\n    }\n\n    /**\n     * Handle the context change event\n     * @param gpu\n     */\n    protected contextChange(gpu: GPU): void\n    {\n        this._renderer.gpu = gpu;\n    }\n\n    /**\n     * Helper class to create a WebGL Context\n     * @param {object} options - An options object that gets passed in to the canvas element containing the\n     *    context attributes\n     * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\n     * @returns {WebGLRenderingContext} the WebGL context\n     */\n    private async _createDeviceAndAdaptor(options: GpuContextOptions): Promise<GPU>\n    {\n        // TODO we only need one of these..\n        const adapter = await DOMAdapter.get().getNavigator().gpu.requestAdapter({\n            powerPreference: options.powerPreference,\n            forceFallbackAdapter: options.forceFallbackAdapter,\n        });\n\n        const requiredFeatures = [\n            'texture-compression-bc',\n            'texture-compression-astc',\n            'texture-compression-etc2',\n        ].filter((feature) => adapter.features.has(feature)) as GPUFeatureName[];\n\n        // TODO and one of these!\n        const device = await adapter.requestDevice({\n            requiredFeatures\n        });\n\n        return { adapter, device };\n    }\n\n    public destroy(): void\n    {\n        this.gpu = null;\n        this._renderer = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Rectangle } from '../../../maths/shapes/Rectangle';\nimport type { Buffer } from '../shared/buffer/Buffer';\nimport type { Topology } from '../shared/geometry/const';\nimport type { Geometry } from '../shared/geometry/Geometry';\nimport type { Shader } from '../shared/shader/Shader';\nimport type { UniformGroup } from '../shared/shader/UniformGroup';\nimport type { State } from '../shared/state/State';\nimport type { System } from '../shared/system/System';\nimport type { GPU } from './GpuDeviceSystem';\nimport type { GpuRenderTarget } from './renderTarget/GpuRenderTarget';\nimport type { GpuRenderTargetAdaptor } from './renderTarget/GpuRenderTargetAdaptor';\nimport type { BindGroup } from './shader/BindGroup';\nimport type { GpuProgram } from './shader/GpuProgram';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\n/**\n * The system that handles encoding commands for the GPU.\n * @memberof rendering\n */\nexport class GpuEncoderSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGPUSystem],\n        name: 'encoder',\n        priority: 1\n    } as const;\n\n    public commandEncoder: GPUCommandEncoder;\n    public renderPassEncoder: GPURenderPassEncoder;\n    public commandFinished: Promise<void>;\n\n    private _resolveCommandFinished: (value: void) => void;\n\n    private _gpu: GPU;\n    private _boundBindGroup: Record<number, BindGroup> = Object.create(null);\n    private _boundVertexBuffer: Record<number, Buffer> = Object.create(null);\n    private _boundIndexBuffer: Buffer;\n    private _boundPipeline: GPURenderPipeline;\n\n    private readonly _renderer: WebGPURenderer;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public renderStart(): void\n    {\n        this.commandFinished = new Promise((resolve) =>\n        {\n            this._resolveCommandFinished = resolve;\n        });\n\n        // generate a render pass description..\n        // create an encoder..\n        this.commandEncoder = this._renderer.gpu.device.createCommandEncoder();\n    }\n\n    public beginRenderPass(gpuRenderTarget: GpuRenderTarget)\n    {\n        this.endRenderPass();\n\n        this._clearCache();\n\n        this.renderPassEncoder = this.commandEncoder.beginRenderPass(gpuRenderTarget.descriptor);\n    }\n\n    public endRenderPass()\n    {\n        if (this.renderPassEncoder)\n        {\n            this.renderPassEncoder.end();\n        }\n\n        this.renderPassEncoder = null;\n    }\n\n    public setViewport(viewport: Rectangle): void\n    {\n        this.renderPassEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n    }\n\n    public setPipelineFromGeometryProgramAndState(\n        geometry: Geometry,\n        program: GpuProgram,\n        state: any,\n        topology?: Topology,\n    ): void\n    {\n        const pipeline = this._renderer.pipeline.getPipeline(geometry, program, state, topology);\n\n        this.setPipeline(pipeline);\n    }\n\n    public setPipeline(pipeline: GPURenderPipeline)\n    {\n        if (this._boundPipeline === pipeline) return;\n        this._boundPipeline = pipeline;\n\n        this.renderPassEncoder.setPipeline(pipeline);\n    }\n\n    private _setVertexBuffer(index: number, buffer: Buffer)\n    {\n        if (this._boundVertexBuffer[index] === buffer) return;\n\n        this._boundVertexBuffer[index] = buffer;\n\n        this.renderPassEncoder.setVertexBuffer(index, this._renderer.buffer.updateBuffer(buffer));\n    }\n\n    private _setIndexBuffer(buffer: Buffer)\n    {\n        if (this._boundIndexBuffer === buffer) return;\n\n        this._boundIndexBuffer = buffer;\n\n        const indexFormat = buffer.data.BYTES_PER_ELEMENT === 2 ? 'uint16' : 'uint32';\n\n        this.renderPassEncoder.setIndexBuffer(this._renderer.buffer.updateBuffer(buffer), indexFormat);\n    }\n\n    public resetBindGroup(index: number)\n    {\n        this._boundBindGroup[index] = null;\n    }\n\n    public setBindGroup(index: number, bindGroup: BindGroup, program: GpuProgram)\n    {\n        if (this._boundBindGroup[index] === bindGroup) return;\n        this._boundBindGroup[index] = bindGroup;\n\n        bindGroup._touch(this._renderer.textureGC.count);\n\n        // TODO getting the bind group works as it looks at th e assets and generates a key\n        // should this just be hidden behind a dirty flag?\n        const gpuBindGroup = this._renderer.bindGroup.getBindGroup(bindGroup, program, index);\n\n        // mark each item as having been used..\n        this.renderPassEncoder.setBindGroup(index, gpuBindGroup);\n    }\n\n    public setGeometry(geometry: Geometry, program: GpuProgram)\n    {\n        // when binding a buffers for geometry, there is no need to bind a buffer more than once if it is interleaved.\n        // which is often the case for Pixi. This is a performance optimisation.\n        // Instead of looping through the attributes, we instead call getBufferNamesToBind\n        // which returns a list of buffer names that need to be bound.\n        // we can then loop through this list and bind the buffers.\n        // essentially only binding a single time for any buffers that are interleaved.\n        const buffersToBind = this._renderer.pipeline.getBufferNamesToBind(geometry, program);\n\n        for (const i in buffersToBind)\n        {\n            this._setVertexBuffer(i as any as number, geometry.attributes[buffersToBind[i]].buffer);\n        }\n\n        if (geometry.indexBuffer)\n        {\n            this._setIndexBuffer(geometry.indexBuffer);\n        }\n    }\n\n    private _setShaderBindGroups(shader: Shader, skipSync?: boolean)\n    {\n        for (const i in shader.groups)\n        {\n            const bindGroup = shader.groups[i] as BindGroup;\n\n            // update any uniforms?\n            if (!skipSync)\n            {\n                this._syncBindGroup(bindGroup);\n            }\n\n            this.setBindGroup(i as unknown as number, bindGroup, shader.gpuProgram);\n        }\n    }\n\n    private _syncBindGroup(bindGroup: BindGroup)\n    {\n        for (const j in bindGroup.resources)\n        {\n            const resource = bindGroup.resources[j];\n\n            if ((resource as UniformGroup).isUniformGroup)\n            {\n                this._renderer.ubo.updateUniformGroup(resource as UniformGroup);\n            }\n        }\n    }\n\n    public draw(options: {\n        geometry: Geometry;\n        shader: Shader;\n        state?: State;\n        topology?: Topology;\n        size?: number;\n        start?: number;\n        instanceCount?: number;\n        skipSync?: boolean;\n    })\n    {\n        const { geometry, shader, state, topology, size, start, instanceCount, skipSync } = options;\n\n        this.setPipelineFromGeometryProgramAndState(geometry, shader.gpuProgram, state, topology);\n        this.setGeometry(geometry, shader.gpuProgram);\n        this._setShaderBindGroups(shader, skipSync);\n\n        if (geometry.indexBuffer)\n        {\n            this.renderPassEncoder.drawIndexed(\n                size || geometry.indexBuffer.data.length,\n                instanceCount ?? geometry.instanceCount,\n                start || 0\n            );\n        }\n        else\n        {\n            this.renderPassEncoder.draw(size || geometry.getSize(), instanceCount ?? geometry.instanceCount, start || 0);\n        }\n    }\n\n    public finishRenderPass()\n    {\n        if (this.renderPassEncoder)\n        {\n            this.renderPassEncoder.end();\n            this.renderPassEncoder = null;\n        }\n    }\n\n    public postrender()\n    {\n        this.finishRenderPass();\n\n        this._gpu.device.queue.submit([this.commandEncoder.finish()]);\n\n        this._resolveCommandFinished();\n\n        this.commandEncoder = null;\n    }\n\n    // restores a render pass if finishRenderPass was called\n    // not optimised as really used for debugging!\n    // used when we want to stop drawing and log a texture..\n    public restoreRenderPass()\n    {\n        const descriptor = (this._renderer.renderTarget.adaptor as GpuRenderTargetAdaptor).getDescriptor(\n            this._renderer.renderTarget.renderTarget,\n            false,\n            [0, 0, 0, 1],\n        );\n\n        this.renderPassEncoder = this.commandEncoder.beginRenderPass(descriptor);\n\n        const boundPipeline = this._boundPipeline;\n        const boundVertexBuffer = { ...this._boundVertexBuffer };\n        const boundIndexBuffer = this._boundIndexBuffer;\n        const boundBindGroup = { ...this._boundBindGroup };\n\n        this._clearCache();\n\n        const viewport = this._renderer.renderTarget.viewport;\n\n        this.renderPassEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n\n        // reinstate the cache...\n\n        this.setPipeline(boundPipeline);\n\n        for (const i in boundVertexBuffer)\n        {\n            this._setVertexBuffer(i as unknown as number, boundVertexBuffer[i]);\n        }\n\n        for (const i in boundBindGroup)\n        {\n            this.setBindGroup(i as unknown as number, boundBindGroup[i], null);\n        }\n\n        this._setIndexBuffer(boundIndexBuffer);\n    }\n\n    private _clearCache()\n    {\n        for (let i = 0; i < 16; i++)\n        {\n            this._boundBindGroup[i] = null;\n            this._boundVertexBuffer[i] = null;\n        }\n\n        this._boundIndexBuffer = null;\n        this._boundPipeline = null;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n        this._gpu = null;\n        this._boundBindGroup = null;\n        this._boundVertexBuffer = null;\n        this._boundIndexBuffer = null;\n        this._boundPipeline = null;\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this._gpu = gpu;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { STENCIL_MODES } from '../shared/state/const';\n\nimport type { RenderTarget } from '../shared/renderTarget/RenderTarget';\nimport type { System } from '../shared/system/System';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\n/**\n * This manages the stencil buffer. Used primarily for masking\n * @memberof rendering\n */\nexport class GpuStencilSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'stencil',\n    } as const;\n\n    private readonly _renderer: WebGPURenderer;\n\n    private _renderTargetStencilState: Record<number, {\n        stencilMode: STENCIL_MODES;\n        stencilReference: number;\n    }> = Object.create(null);\n\n    private _activeRenderTarget: RenderTarget;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n\n        renderer.renderTarget.onRenderTargetChange.add(this);\n    }\n\n    protected onRenderTargetChange(renderTarget: RenderTarget)\n    {\n        let stencilState = this._renderTargetStencilState[renderTarget.uid];\n\n        if (!stencilState)\n        {\n            stencilState = this._renderTargetStencilState[renderTarget.uid] = {\n                stencilMode: STENCIL_MODES.DISABLED,\n                stencilReference: 0,\n            };\n        }\n\n        this._activeRenderTarget = renderTarget;\n\n        this.setStencilMode(stencilState.stencilMode, stencilState.stencilReference);\n    }\n\n    public setStencilMode(stencilMode: STENCIL_MODES, stencilReference: number)\n    {\n        const stencilState = this._renderTargetStencilState[this._activeRenderTarget.uid];\n\n        stencilState.stencilMode = stencilMode;\n        stencilState.stencilReference = stencilReference;\n\n        const renderer = this._renderer;\n\n        renderer.pipeline.setStencilMode(stencilMode);\n        renderer.encoder.renderPassEncoder.setStencilReference(stencilReference);\n    }\n\n    public destroy()\n    {\n        this._renderer.renderTarget.onRenderTargetChange.remove(this);\n\n        (this._renderer as null) = null;\n\n        this._activeRenderTarget = null;\n        this._renderTargetStencilState = null;\n    }\n}\n","import type { UboElement, UboLayout, UNIFORM_TYPES, UniformData } from '../../../shared/shader/types';\n\nexport const WGSL_ALIGN_SIZE_DATA: Record<UNIFORM_TYPES | string, {align: number, size: number}> = {\n    i32: { align: 4, size: 4 },\n    u32: { align: 4, size: 4 },\n    f32: { align: 4, size: 4 },\n    f16: { align: 2, size: 2 },\n    'vec2<i32>': { align: 8, size: 8 },\n    'vec2<u32>': { align: 8, size: 8 },\n    'vec2<f32>': { align: 8, size: 8 },\n    'vec2<f16>': { align: 4, size: 4 },\n    'vec3<i32>': { align: 16, size: 12 },\n    'vec3<u32>': { align: 16, size: 12 },\n    'vec3<f32>': { align: 16, size: 12 },\n    'vec3<f16>': { align: 8, size: 6 },\n    'vec4<i32>': { align: 16, size: 16 },\n    'vec4<u32>': { align: 16, size: 16 },\n    'vec4<f32>': { align: 16, size: 16 },\n    'vec4<f16>': { align: 8, size: 8 },\n    'mat2x2<f32>': { align: 8, size: 16 },\n    'mat2x2<f16>': { align: 4, size: 8 },\n    'mat3x2<f32>': { align: 8, size: 24 },\n    'mat3x2<f16>': { align: 4, size: 12 },\n    'mat4x2<f32>': { align: 8, size: 32 },\n    'mat4x2<f16>': { align: 4, size: 16 },\n    'mat2x3<f32>': { align: 16, size: 32 },\n    'mat2x3<f16>': { align: 8, size: 16 },\n    'mat3x3<f32>': { align: 16, size: 48 },\n    'mat3x3<f16>': { align: 8, size: 24 },\n    'mat4x3<f32>': { align: 16, size: 64 },\n    'mat4x3<f16>': { align: 8, size: 32 },\n    'mat2x4<f32>': { align: 16, size: 32 },\n    'mat2x4<f16>': { align: 8, size: 16 },\n    'mat3x4<f32>': { align: 16, size: 48 },\n    'mat3x4<f16>': { align: 8, size: 24 },\n    'mat4x4<f32>': { align: 16, size: 64 },\n    'mat4x4<f16>': { align: 8, size: 32 },\n};\n\nexport function createUboElementsWGSL(uniformData: UniformData[]): UboLayout\n{\n    const uboElements: UboElement[] = uniformData.map((data: UniformData) =>\n        ({\n            data,\n            offset: 0,\n            size: 0,\n        }));\n\n    let offset = 0;\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n\n        let size = WGSL_ALIGN_SIZE_DATA[uboElement.data.type].size;\n        const align = WGSL_ALIGN_SIZE_DATA[uboElement.data.type].align;\n\n        if (!WGSL_ALIGN_SIZE_DATA[uboElement.data.type])\n        {\n            throw new Error(`[Pixi.js] WebGPU UniformBuffer: Unknown type ${uboElement.data.type}`);\n        }\n\n        if (uboElement.data.size > 1)\n        {\n            size = Math.max(size, align) * uboElement.data.size;\n        }\n\n        offset = Math.ceil((offset) / align) * align;\n\n        // TODO deal with Arrays\n        uboElement.size = size;\n\n        uboElement.offset = offset;\n\n        offset += size;\n    }\n\n    // must align to 16 bits!\n    offset = Math.ceil(offset / 16) * 16;\n\n    return { uboElements, size: offset };\n}\n\n","import { WGSL_ALIGN_SIZE_DATA } from './createUboElementsWGSL';\n\nimport type { UboElement } from '../../../shared/shader/types';\n\n/**\n * This generates a function that will sync an array to the uniform buffer\n * following the wgsl layout\n * @param uboElement - the element to generate the array sync for\n * @param offsetToAdd - the offset to append at the start of the code\n * @returns - the generated code\n */\nexport function generateArraySyncWGSL(uboElement: UboElement, offsetToAdd: number): string\n{\n    // this is in byte..\n    const { size, align } = WGSL_ALIGN_SIZE_DATA[uboElement.data.type];\n\n    const remainder = (align - size) / 4;\n    const data = uboElement.data.type.indexOf('i32') >= 0 ? 'dataInt32' : 'data';\n\n    return `\n         v = uv.${uboElement.data.name};\n         ${offsetToAdd !== 0 ? `offset += ${offsetToAdd};` : ''}\n\n         arrayOffset = offset;\n\n         t = 0;\n\n         for(var i=0; i < ${uboElement.data.size * (size / 4)}; i++)\n         {\n             for(var j = 0; j < ${size / 4}; j++)\n             {\n                 ${data}[arrayOffset++] = v[t++];\n             }\n             ${remainder !== 0 ? `arrayOffset += ${remainder};` : ''}\n         }\n     `;\n}\n","import { createUboSyncFunction } from '../../../shared/shader/utils/createUboSyncFunction';\nimport { uboSyncFunctionsWGSL } from '../../../shared/shader/utils/uboSyncFunctions';\nimport { generateArraySyncWGSL } from './generateArraySyncWGSL';\n\nimport type { UboElement, UniformsSyncCallback } from '../../../shared/shader/types';\n\nexport function createUboSyncFunctionWGSL(\n    uboElements: UboElement[],\n): UniformsSyncCallback\n{\n    return createUboSyncFunction(\n        uboElements,\n        'uboWgsl',\n        generateArraySyncWGSL,\n        uboSyncFunctionsWGSL,\n    );\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { UboSystem } from '../shared/shader/UboSystem';\nimport { createUboElementsWGSL } from './shader/utils/createUboElementsWGSL';\nimport { createUboSyncFunctionWGSL } from './shader/utils/createUboSyncFunctionWGSL';\n\n/**\n * System plugin to the renderer to manage uniform buffers. With a WGSL twist!\n * @memberof rendering\n */\nexport class GpuUboSystem extends UboSystem\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGPUSystem],\n        name: 'ubo',\n    } as const;\n\n    constructor()\n    {\n        super({\n            createUboElements: createUboElementsWGSL,\n            generateUboSync: createUboSyncFunctionWGSL,\n        });\n    }\n}\n","export class UboBatch\n{\n    public data: Float32Array;\n    private readonly _minUniformOffsetAlignment: number = 256;\n\n    public byteIndex = 0;\n\n    constructor({ minUniformOffsetAlignment }: {minUniformOffsetAlignment: number})\n    {\n        this._minUniformOffsetAlignment = minUniformOffsetAlignment;\n        this.data = new Float32Array(65535);\n    }\n\n    public clear(): void\n    {\n        this.byteIndex = 0;\n    }\n\n    public addEmptyGroup(size: number): number\n    {\n        // update the buffer.. only float32 for now!\n        if (size > this._minUniformOffsetAlignment / 4)\n        {\n            throw new Error(`UniformBufferBatch: array is too large: ${size * 4}`);\n        }\n\n        const start = this.byteIndex;\n\n        let newSize = start + (size * 4);\n\n        newSize = Math.ceil(newSize / this._minUniformOffsetAlignment) * this._minUniformOffsetAlignment;\n\n        if (newSize > this.data.length * 4)\n        {\n            // TODO push a new buffer\n            throw new Error('UniformBufferBatch: ubo batch got too big');\n        }\n\n        this.byteIndex = newSize;\n\n        return start;\n    }\n\n    public addGroup(array: Float32Array): number\n    {\n        const offset = this.addEmptyGroup(array.length);\n\n        for (let i = 0; i < array.length; i++)\n        {\n            this.data[(offset / 4) + i] = array[i];\n        }\n\n        return offset;\n    }\n\n    public destroy()\n    {\n        this.data = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Buffer } from '../shared/buffer/Buffer';\nimport { BufferResource } from '../shared/buffer/BufferResource';\nimport { BufferUsage } from '../shared/buffer/const';\nimport { UboBatch } from './buffer/UboBatch';\nimport { BindGroup } from './shader/BindGroup';\n\nimport type { UniformGroup } from '../shared/shader/UniformGroup';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\nconst minUniformOffsetAlignment = 128;// 256 / 2;\n\n// TODO renderStart and renderFinish - perhaps just make them instructions to fit the architecture of the\n// rest of the system\nexport class GpuUniformBatchPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipes,\n        ],\n        name: 'uniformBatch',\n    } as const;\n\n    private _renderer: WebGPURenderer;\n\n    private _bindGroupHash: Record<number, BindGroup> = Object.create(null);\n    private readonly _batchBuffer: UboBatch;\n\n    // number of buffers..\n    private _buffers: Buffer[] = [];\n\n    private _bindGroups: BindGroup[] = [];\n    private _bufferResources: BufferResource[] = [];\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_bindGroupHash');\n\n        this._batchBuffer = new UboBatch({ minUniformOffsetAlignment });\n\n        const totalBuffers = (256 / minUniformOffsetAlignment);\n\n        for (let i = 0; i < totalBuffers; i++)\n        {\n            let usage = BufferUsage.UNIFORM | BufferUsage.COPY_DST;\n\n            if (i === 0) usage |= BufferUsage.COPY_SRC;\n\n            this._buffers.push(new Buffer({\n                data: this._batchBuffer.data,\n                usage\n            }));\n        }\n    }\n\n    public renderEnd()\n    {\n        this._uploadBindGroups();\n        this._resetBindGroups();\n    }\n\n    private _resetBindGroups()\n    {\n        for (const i in this._bindGroupHash)\n        {\n            this._bindGroupHash[i] = null;\n        }\n\n        this._batchBuffer.clear();\n    }\n\n    // just works for single bind groups for now\n    public getUniformBindGroup(group: UniformGroup<any>, duplicate: boolean): BindGroup\n    {\n        if (!duplicate && this._bindGroupHash[group.uid])\n        {\n            return this._bindGroupHash[group.uid];\n        }\n\n        this._renderer.ubo.ensureUniformGroup(group);\n\n        const data = group.buffer.data as Float32Array;\n\n        const offset = this._batchBuffer.addEmptyGroup(data.length);\n\n        this._renderer.ubo.syncUniformGroup(group, this._batchBuffer.data, offset / 4);\n\n        this._bindGroupHash[group.uid] = this._getBindGroup(offset / minUniformOffsetAlignment);\n\n        return this._bindGroupHash[group.uid];\n    }\n\n    public getUboResource(group: UniformGroup<any>): BufferResource\n    {\n        this._renderer.ubo.updateUniformGroup(group);\n\n        const data = group.buffer.data as Float32Array;\n\n        const offset = this._batchBuffer.addGroup(data);\n\n        return this._getBufferResource(offset / minUniformOffsetAlignment);\n    }\n\n    public getArrayBindGroup(data: Float32Array): BindGroup\n    {\n        const offset = this._batchBuffer.addGroup(data);\n\n        return this._getBindGroup(offset / minUniformOffsetAlignment);\n    }\n\n    public getArrayBufferResource(data: Float32Array): BufferResource\n    {\n        const offset = this._batchBuffer.addGroup(data);\n\n        const index = offset / minUniformOffsetAlignment;\n\n        return this._getBufferResource(index);\n    }\n\n    private _getBufferResource(index: number): BufferResource\n    {\n        if (!this._bufferResources[index])\n        {\n            const buffer = this._buffers[index % 2];\n\n            this._bufferResources[index] = new BufferResource({\n                buffer,\n                offset: ((index / 2) | 0) * 256,\n                size: minUniformOffsetAlignment\n            });\n        }\n\n        return this._bufferResources[index];\n    }\n\n    private _getBindGroup(index: number): BindGroup\n    {\n        if (!this._bindGroups[index])\n        {\n            // even!\n            const bindGroup = new BindGroup({\n                0: this._getBufferResource(index),\n            });\n\n            this._bindGroups[index] = bindGroup;\n        }\n\n        return this._bindGroups[index];\n    }\n\n    private _uploadBindGroups()\n    {\n        const bufferSystem = this._renderer.buffer;\n\n        const firstBuffer = this._buffers[0];\n\n        firstBuffer.update(this._batchBuffer.byteIndex);\n\n        bufferSystem.updateBuffer(firstBuffer);\n\n        const commandEncoder = this._renderer.gpu.device.createCommandEncoder();\n\n        for (let i = 1; i < this._buffers.length; i++)\n        {\n            const buffer = this._buffers[i];\n\n            commandEncoder.copyBufferToBuffer(\n                bufferSystem.getGPUBuffer(firstBuffer),\n                minUniformOffsetAlignment,\n                bufferSystem.getGPUBuffer(buffer),\n                0,\n                this._batchBuffer.byteIndex\n            );\n        }\n\n        // TODO make a system that will que up all commands in to one array?\n        this._renderer.gpu.device.queue.submit([commandEncoder.finish()]);\n    }\n\n    public destroy()\n    {\n        for (let i = 0; i < this._bindGroups.length; i++)\n        {\n            this._bindGroups[i].destroy();\n        }\n\n        this._bindGroups = null;\n        this._bindGroupHash = null;\n\n        for (let i = 0; i < this._buffers.length; i++)\n        {\n            this._buffers[i].destroy();\n        }\n        this._buffers = null;\n\n        for (let i = 0; i < this._bufferResources.length; i++)\n        {\n            this._bufferResources[i].destroy();\n        }\n\n        this._bufferResources = null;\n\n        this._batchBuffer.destroy();\n        this._bindGroupHash = null;\n\n        this._renderer = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { warn } from '../../../../utils/logging/warn';\nimport { ensureAttributes } from '../../gl/shader/program/ensureAttributes';\nimport { STENCIL_MODES } from '../../shared/state/const';\nimport { createIdFromString } from '../../shared/utils/createIdFromString';\nimport { GpuStencilModesToPixi } from '../state/GpuStencilModesToPixi';\n\nimport type { Topology } from '../../shared/geometry/const';\nimport type { Geometry } from '../../shared/geometry/Geometry';\nimport type { State } from '../../shared/state/State';\nimport type { System } from '../../shared/system/System';\nimport type { GPU } from '../GpuDeviceSystem';\nimport type { GpuRenderTarget } from '../renderTarget/GpuRenderTarget';\nimport type { GpuProgram } from '../shader/GpuProgram';\nimport type { StencilState } from '../state/GpuStencilModesToPixi';\nimport type { WebGPURenderer } from '../WebGPURenderer';\n\nconst topologyStringToId = {\n    'point-list': 0,\n    'line-list': 1,\n    'line-strip': 2,\n    'triangle-list': 3,\n    'triangle-strip': 4,\n};\n\n// geometryLayouts = 256; // 8 bits // 256 states // value 0-255;\n// shaderKeys = 256; // 8 bits // 256 states // value 0-255;\n// state = 64; // 6 bits // 64 states // value 0-63;\n// blendMode = 32; // 5 bits // 32 states // value 0-31;\n// topology = 8; // 3 bits // 8 states // value 0-7;\nfunction getGraphicsStateKey(\n    geometryLayout: number,\n    shaderKey: number,\n    state: number,\n    blendMode: number,\n    topology: number,\n): number\n{\n    return (geometryLayout << 24) // Allocate the 8 bits for geometryLayouts at the top\n         | (shaderKey << 16) // Next 8 bits for shaderKeys\n         | (state << 10) // 6 bits for state\n         | (blendMode << 5) // 5 bits for blendMode\n         | topology; // And 3 bits for topology at the least significant position\n}\n\n// colorMask = 16;// 4 bits // 16 states // value 0-15;\n// stencilState = 8; // 3 bits // 8 states // value 0-7;\n// renderTarget = 1; // 2 bit // 3 states // value 0-3; // none, stencil, depth, depth-stencil\n// multiSampleCount = 1; // 1 bit // 2 states // value 0-1;\nfunction getGlobalStateKey(\n    stencilStateId: number,\n    multiSampleCount: number,\n    colorMask: number,\n    renderTarget: number,\n): number\n{\n    return (colorMask << 6) // Allocate the 4 bits for colorMask at the top\n         | (stencilStateId << 3) // Next 3 bits for stencilStateId\n         | (renderTarget << 1) // 2 bits for renderTarget\n         | multiSampleCount; // And 1 bit for multiSampleCount at the least significant position\n}\n\ntype PipeHash = Record<number, GPURenderPipeline>;\n\n/**\n * A system that creates and manages the GPU pipelines.\n *\n * Caching Mechanism: At its core, the system employs a two-tiered caching strategy to minimize\n * the redundant creation of GPU pipelines (or \"pipes\"). This strategy is based on generating unique\n * keys that represent the state of the graphics settings and the specific requirements of the\n * item being rendered. By caching these pipelines, subsequent draw calls with identical configurations\n * can reuse existing pipelines instead of generating new ones.\n *\n * State Management: The system differentiates between \"global\" state properties (like color masks\n * and stencil masks, which do not change frequently) and properties that may vary between draw calls\n * (such as geometry, shaders, and blend modes). Unique keys are generated for both these categories\n * using getStateKey for global state and getGraphicsStateKey for draw-specific settings. These keys are\n * then then used to caching the pipe. The next time we need a pipe we can check\n * the cache by first looking at the state cache and then the pipe cache.\n * @memberof rendering\n */\nexport class PipelineSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGPUSystem],\n        name: 'pipeline',\n    } as const;\n    private readonly _renderer: WebGPURenderer;\n\n    protected CONTEXT_UID: number;\n\n    private _moduleCache: Record<string, GPUShaderModule> = Object.create(null);\n    private _bufferLayoutsCache: Record<number, GPUVertexBufferLayout[]> = Object.create(null);\n    private readonly _bindingNamesCache: Record<string, Record<string, string>> = Object.create(null);\n\n    private _pipeCache: PipeHash = Object.create(null);\n    private readonly _pipeStateCaches: Record<number, PipeHash> = Object.create(null);\n\n    private _gpu: GPU;\n    private _stencilState: StencilState;\n\n    private _stencilMode: STENCIL_MODES;\n    private _colorMask = 0b1111;\n    private _multisampleCount = 1;\n    private _depthStencilAttachment: 0 | 1;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this._gpu = gpu;\n        this.setStencilMode(STENCIL_MODES.DISABLED);\n\n        this._updatePipeHash();\n    }\n\n    public setMultisampleCount(multisampleCount: number): void\n    {\n        if (this._multisampleCount === multisampleCount) return;\n\n        this._multisampleCount = multisampleCount;\n\n        this._updatePipeHash();\n    }\n\n    public setRenderTarget(renderTarget: GpuRenderTarget)\n    {\n        this._multisampleCount = renderTarget.msaaSamples;\n        this._depthStencilAttachment = renderTarget.descriptor.depthStencilAttachment ? 1 : 0;\n\n        this._updatePipeHash();\n    }\n\n    public setColorMask(colorMask: number): void\n    {\n        if (this._colorMask === colorMask) return;\n\n        this._colorMask = colorMask;\n\n        this._updatePipeHash();\n    }\n\n    public setStencilMode(stencilMode: STENCIL_MODES): void\n    {\n        if (this._stencilMode === stencilMode) return;\n\n        this._stencilMode = stencilMode;\n        this._stencilState = GpuStencilModesToPixi[stencilMode];\n\n        this._updatePipeHash();\n    }\n\n    public setPipeline(geometry: Geometry, program: GpuProgram, state: State, passEncoder: GPURenderPassEncoder): void\n    {\n        const pipeline = this.getPipeline(geometry, program, state);\n\n        passEncoder.setPipeline(pipeline);\n    }\n\n    public getPipeline(\n        geometry: Geometry,\n        program: GpuProgram,\n        state: State,\n        topology?: Topology,\n    ): GPURenderPipeline\n    {\n        if (!geometry._layoutKey)\n        {\n            ensureAttributes(geometry, program.attributeData);\n\n            // prepare the geometry for the pipeline\n            this._generateBufferKey(geometry);\n        }\n\n        topology ||= geometry.topology;\n\n        // now we have set the Ids - the key is different...\n        const key = getGraphicsStateKey(\n            geometry._layoutKey,\n            program._layoutKey,\n            state.data,\n            state._blendModeId,\n            topologyStringToId[topology],\n        );\n\n        if (this._pipeCache[key]) return this._pipeCache[key];\n\n        this._pipeCache[key] = this._createPipeline(geometry, program, state, topology);\n\n        return this._pipeCache[key];\n    }\n\n    private _createPipeline(geometry: Geometry, program: GpuProgram, state: State, topology: Topology): GPURenderPipeline\n    {\n        const device = this._gpu.device;\n\n        const buffers = this._createVertexBufferLayouts(geometry, program);\n\n        const blendModes = this._renderer.state.getColorTargets(state);\n\n        blendModes[0].writeMask = this._stencilMode === STENCIL_MODES.RENDERING_MASK_ADD ? 0 : this._colorMask;\n\n        const layout = this._renderer.shader.getProgramData(program).pipeline;\n\n        const descriptor: GPURenderPipelineDescriptor = {\n            // TODO later check if its helpful to create..\n            // layout,\n            vertex: {\n                module: this._getModule(program.vertex.source),\n                entryPoint: program.vertex.entryPoint,\n                // geometry..\n                buffers,\n            },\n            fragment: {\n                module: this._getModule(program.fragment.source),\n                entryPoint: program.fragment.entryPoint,\n                targets: blendModes,\n            },\n            primitive: {\n                topology,\n                cullMode: state.cullMode,\n            },\n            layout,\n            multisample: {\n                count: this._multisampleCount,\n            },\n            // depthStencil,\n            label: `PIXI Pipeline`,\n        };\n\n        // only apply if the texture has stencil or depth\n        if (this._depthStencilAttachment)\n        {\n            // mask states..\n            descriptor.depthStencil = {\n                ...this._stencilState,\n                format: 'depth24plus-stencil8',\n                depthWriteEnabled: state.depthTest,\n                depthCompare: state.depthTest ? 'less' : 'always',\n            };\n        }\n\n        const pipeline = device.createRenderPipeline(descriptor);\n\n        return pipeline;\n    }\n\n    private _getModule(code: string): GPUShaderModule\n    {\n        return this._moduleCache[code] || this._createModule(code);\n    }\n\n    private _createModule(code: string): GPUShaderModule\n    {\n        const device = this._gpu.device;\n\n        this._moduleCache[code] = device.createShaderModule({\n            code,\n        });\n\n        return this._moduleCache[code];\n    }\n\n    private _generateBufferKey(geometry: Geometry): number\n    {\n        const keyGen = [];\n        let index = 0;\n        // generate a key..\n\n        const attributeKeys = Object.keys(geometry.attributes).sort();\n\n        for (let i = 0; i < attributeKeys.length; i++)\n        {\n            const attribute = geometry.attributes[attributeKeys[i]];\n\n            keyGen[index++] = attribute.offset;\n            keyGen[index++] = attribute.format;\n            keyGen[index++] = attribute.stride;\n            keyGen[index++] = attribute.instance;\n        }\n\n        const stringKey = keyGen.join('|');\n\n        geometry._layoutKey = createIdFromString(stringKey, 'geometry');\n\n        return geometry._layoutKey;\n    }\n\n    private _generateAttributeLocationsKey(program: GpuProgram): number\n    {\n        const keyGen = [];\n        let index = 0;\n        // generate a key..\n\n        const attributeKeys = Object.keys(program.attributeData).sort();\n\n        for (let i = 0; i < attributeKeys.length; i++)\n        {\n            const attribute = program.attributeData[attributeKeys[i]];\n\n            keyGen[index++] = attribute.location;\n        }\n\n        const stringKey = keyGen.join('|');\n\n        program._attributeLocationsKey = createIdFromString(stringKey, 'programAttributes');\n\n        return program._attributeLocationsKey;\n    }\n\n    /**\n     * Returns a hash of buffer names mapped to bind locations.\n     * This is used to bind the correct buffer to the correct location in the shader.\n     * @param geometry - The geometry where to get the buffer names\n     * @param program - The program where to get the buffer names\n     * @returns An object of buffer names mapped to the bind location.\n     */\n    public getBufferNamesToBind(geometry: Geometry, program: GpuProgram): Record<string, string>\n    {\n        const key = (geometry._layoutKey << 16) | program._attributeLocationsKey;\n\n        if (this._bindingNamesCache[key]) return this._bindingNamesCache[key];\n\n        const data = this._createVertexBufferLayouts(geometry, program);\n\n        // now map the data to the buffers..\n        const bufferNamesToBind: Record<string, string> = Object.create(null);\n\n        const attributeData = program.attributeData;\n\n        for (let i = 0; i < data.length; i++)\n        {\n            const attributes = Object.values(data[i].attributes);\n\n            const shaderLocation = attributes[0].shaderLocation;\n\n            for (const j in attributeData)\n            {\n                if (attributeData[j].location === shaderLocation)\n                {\n                    bufferNamesToBind[i] = j;\n                    break;\n                }\n            }\n        }\n\n        this._bindingNamesCache[key] = bufferNamesToBind;\n\n        return bufferNamesToBind;\n    }\n\n    private _createVertexBufferLayouts(geometry: Geometry, program: GpuProgram): GPUVertexBufferLayout[]\n    {\n        if (!program._attributeLocationsKey) this._generateAttributeLocationsKey(program);\n\n        const key = (geometry._layoutKey << 16) | program._attributeLocationsKey;\n\n        if (this._bufferLayoutsCache[key])\n        {\n            return this._bufferLayoutsCache[key];\n        }\n\n        const vertexBuffersLayout: GPUVertexBufferLayout[] = [];\n\n        geometry.buffers.forEach((buffer) =>\n        {\n            const bufferEntry: GPUVertexBufferLayout = {\n                arrayStride: 0,\n                stepMode: 'vertex',\n                attributes: [],\n            };\n\n            const bufferEntryAttributes = bufferEntry.attributes as GPUVertexAttribute[];\n\n            for (const i in program.attributeData)\n            {\n                const attribute = geometry.attributes[i];\n\n                if ((attribute.divisor ?? 1) !== 1)\n                {\n                    // TODO: Maybe emulate divisor with storage_buffers/float_textures?\n                    // For now just issue a warning\n                    warn(`Attribute ${i} has an invalid divisor value of '${attribute.divisor}'. `\n                        + 'WebGPU only supports a divisor value of 1');\n                }\n\n                if (attribute.buffer === buffer)\n                {\n                    bufferEntry.arrayStride = attribute.stride;\n                    bufferEntry.stepMode = attribute.instance ? 'instance' : 'vertex';\n\n                    bufferEntryAttributes.push({\n                        shaderLocation: program.attributeData[i].location,\n                        offset: attribute.offset,\n                        format: attribute.format,\n                    });\n                }\n            }\n\n            if (bufferEntryAttributes.length)\n            {\n                vertexBuffersLayout.push(bufferEntry);\n            }\n        });\n\n        this._bufferLayoutsCache[key] = vertexBuffersLayout;\n\n        return vertexBuffersLayout;\n    }\n\n    private _updatePipeHash(): void\n    {\n        const key = getGlobalStateKey(\n            this._stencilMode,\n            this._multisampleCount,\n            this._colorMask,\n            this._depthStencilAttachment\n        );\n\n        if (!this._pipeStateCaches[key])\n        {\n            this._pipeStateCaches[key] = Object.create(null);\n        }\n\n        this._pipeCache = this._pipeStateCaches[key];\n    }\n\n    public destroy(): void\n    {\n        (this._renderer as null) = null;\n        this._bufferLayoutsCache = null;\n    }\n}\n","import type { TextureSource } from '../../shared/texture/sources/TextureSource';\n\n/**\n * A class which holds the canvas contexts and textures for a render target.\n * @memberof rendering\n * @ignore\n */\nexport class GpuRenderTarget\n{\n    public contexts: GPUCanvasContext[] = [];\n    public msaaTextures: TextureSource[] = [];\n    public msaa: boolean;\n    public msaaSamples = 1;\n    public width: number;\n    public height: number;\n    public descriptor: GPURenderPassDescriptor;\n}\n","import { CLEAR } from '../../gl/const';\nimport { CanvasSource } from '../../shared/texture/sources/CanvasSource';\nimport { TextureSource } from '../../shared/texture/sources/TextureSource';\nimport { GpuRenderTarget } from './GpuRenderTarget';\n\nimport type { RgbaArray } from '../../../../color/Color';\nimport type { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport type { CLEAR_OR_BOOL } from '../../gl/const';\nimport type { RenderTarget } from '../../shared/renderTarget/RenderTarget';\nimport type { RenderTargetAdaptor, RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem';\nimport type { Texture } from '../../shared/texture/Texture';\nimport type { WebGPURenderer } from '../WebGPURenderer';\n\n/**\n * The WebGPU adaptor for the render target system. Allows the Render Target System to\n * be used with the WebGPU renderer\n * @memberof rendering\n * @ignore\n */\nexport class GpuRenderTargetAdaptor implements RenderTargetAdaptor<GpuRenderTarget>\n{\n    private _renderTargetSystem: RenderTargetSystem<GpuRenderTarget>;\n    private _renderer: WebGPURenderer<HTMLCanvasElement>;\n\n    public init(renderer: WebGPURenderer, renderTargetSystem: RenderTargetSystem<GpuRenderTarget>): void\n    {\n        this._renderer = renderer;\n        this._renderTargetSystem = renderTargetSystem;\n    }\n\n    public copyToTexture(\n        sourceRenderSurfaceTexture: RenderTarget,\n        destinationTexture: Texture,\n        originSrc: { x: number; y: number; },\n        size: { width: number; height: number; },\n        originDest: { x: number; y: number; },\n    )\n    {\n        const renderer = this._renderer;\n\n        const baseGpuTexture = this._getGpuColorTexture(\n            sourceRenderSurfaceTexture\n        );\n\n        const backGpuTexture = renderer.texture.getGpuSource(\n            destinationTexture.source\n        );\n\n        renderer.encoder.commandEncoder.copyTextureToTexture(\n            {\n                texture: baseGpuTexture,\n                origin: originSrc,\n            },\n            {\n                texture: backGpuTexture,\n                origin: originDest,\n            },\n            size\n        );\n\n        return destinationTexture;\n    }\n\n    public startRenderPass(\n        renderTarget: RenderTarget,\n        clear: CLEAR_OR_BOOL = true,\n        clearColor?: RgbaArray,\n        viewport?: Rectangle\n    )\n    {\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        const descriptor = this.getDescriptor(renderTarget, clear, clearColor);\n\n        gpuRenderTarget.descriptor = descriptor;\n\n        // TODO we should not finish a render pass each time we bind\n        // for example filters - we would want to push / pop render targets\n        this._renderer.pipeline.setRenderTarget(gpuRenderTarget);\n        this._renderer.encoder.beginRenderPass(gpuRenderTarget);\n        this._renderer.encoder.setViewport(viewport);\n    }\n\n    public finishRenderPass()\n    {\n        this._renderer.encoder.endRenderPass();\n    }\n\n    /**\n     * returns the gpu texture for the first color texture in the render target\n     * mainly used by the filter manager to get copy the texture for blending\n     * @param renderTarget\n     * @returns a gpu texture\n     */\n    private _getGpuColorTexture(renderTarget: RenderTarget): GPUTexture\n    {\n        const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        if (gpuRenderTarget.contexts[0])\n        {\n            return gpuRenderTarget.contexts[0].getCurrentTexture();\n        }\n\n        return this._renderer.texture.getGpuSource(\n            renderTarget.colorTextures[0].source\n        );\n    }\n\n    public getDescriptor(\n        renderTarget: RenderTarget,\n        clear: CLEAR_OR_BOOL,\n        clearValue: RgbaArray\n    ): GPURenderPassDescriptor\n    {\n        if (typeof clear === 'boolean')\n        {\n            clear = clear ? CLEAR.ALL : CLEAR.NONE;\n        }\n\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        const colorAttachments = renderTarget.colorTextures.map(\n            (texture, i) =>\n            {\n                const context = gpuRenderTarget.contexts[i];\n\n                let view: GPUTextureView;\n                let resolveTarget: GPUTextureView;\n\n                if (context)\n                {\n                    const currentTexture = context.getCurrentTexture();\n\n                    const canvasTextureView = currentTexture.createView();\n\n                    view = canvasTextureView;\n                }\n                else\n                {\n                    view = this._renderer.texture.getGpuSource(texture).createView({\n                        mipLevelCount: 1,\n                    });\n                }\n\n                if (gpuRenderTarget.msaaTextures[i])\n                {\n                    resolveTarget = view;\n                    view = this._renderer.texture.getTextureView(\n                        gpuRenderTarget.msaaTextures[i]\n                    );\n                }\n\n                const loadOp = ((clear as CLEAR) & CLEAR.COLOR ? 'clear' : 'load') as GPULoadOp;\n\n                clearValue ??= renderTargetSystem.defaultClearColor;\n\n                return {\n                    view,\n                    resolveTarget,\n                    clearValue,\n                    storeOp: 'store',\n                    loadOp\n                };\n            }\n        ) as GPURenderPassColorAttachment[];\n\n        let depthStencilAttachment: GPURenderPassDepthStencilAttachment;\n\n        // if we have a depth or stencil buffer, we need to ensure we have a texture for it\n        // this is WebGPU specific - as WebGL does not require textures to run a depth / stencil buffer\n        if ((renderTarget.stencil || renderTarget.depth) && !renderTarget.depthStencilTexture)\n        {\n            renderTarget.ensureDepthStencilTexture();\n            renderTarget.depthStencilTexture.source.sampleCount = gpuRenderTarget.msaa ? 4 : 1;\n        }\n\n        if (renderTarget.depthStencilTexture)\n        {\n            const stencilLoadOp = (clear & CLEAR.STENCIL ? 'clear' : 'load') as GPULoadOp;\n            const depthLoadOp = (clear & CLEAR.DEPTH ? 'clear' : 'load') as GPULoadOp;\n\n            depthStencilAttachment = {\n                view: this._renderer.texture\n                    .getGpuSource(renderTarget.depthStencilTexture.source)\n                    .createView(),\n                stencilStoreOp: 'store',\n                stencilLoadOp,\n                depthClearValue: 1.0,\n                depthLoadOp,\n                depthStoreOp: 'store',\n            };\n        }\n\n        const descriptor: GPURenderPassDescriptor = {\n            colorAttachments,\n            depthStencilAttachment,\n        };\n\n        return descriptor;\n    }\n\n    public clear(renderTarget: RenderTarget, clear: CLEAR_OR_BOOL = true, clearColor?: RgbaArray, viewport?: Rectangle)\n    {\n        if (!clear) return;\n\n        const { gpu, encoder } = this._renderer;\n\n        const device = gpu.device;\n\n        const standAlone = encoder.commandEncoder === null;\n\n        if (standAlone)\n        {\n            const commandEncoder = device.createCommandEncoder();\n            const renderPassDescriptor = this.getDescriptor(renderTarget, clear, clearColor);\n\n            const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n\n            passEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n\n            passEncoder.end();\n\n            const gpuCommands = commandEncoder.finish();\n\n            device.queue.submit([gpuCommands]);\n        }\n        else\n        {\n            this.startRenderPass(renderTarget, clear, clearColor, viewport);\n        }\n    }\n\n    public initGpuRenderTarget(renderTarget: RenderTarget): GpuRenderTarget\n    {\n        // always false for WebGPU\n        renderTarget.isRoot = true;\n\n        const gpuRenderTarget = new GpuRenderTarget();\n\n        // create a context...\n        // is a canvas...\n        renderTarget.colorTextures.forEach((colorTexture, i) =>\n        {\n            if (CanvasSource.test(colorTexture.resource))\n            {\n                const context = colorTexture.resource.getContext(\n                    'webgpu'\n                ) as unknown as GPUCanvasContext;\n\n                const alphaMode = (colorTexture as CanvasSource).transparent ? 'premultiplied' : 'opaque';\n\n                try\n                {\n                    context.configure({\n                        device: this._renderer.gpu.device,\n                        usage: GPUTextureUsage.TEXTURE_BINDING\n                            | GPUTextureUsage.COPY_DST\n                            | GPUTextureUsage.RENDER_ATTACHMENT\n                            | GPUTextureUsage.COPY_SRC,\n                        format: 'bgra8unorm',\n                        alphaMode,\n                    });\n                }\n                catch (e)\n                {\n                    console.error(e);\n                }\n\n                gpuRenderTarget.contexts[i] = context;\n            }\n\n            gpuRenderTarget.msaa = colorTexture.source.antialias;\n\n            if (colorTexture.source.antialias)\n            {\n                const msaaTexture = new TextureSource({\n                    width: 0,\n                    height: 0,\n                    sampleCount: 4,\n                });\n\n                gpuRenderTarget.msaaTextures[i] = msaaTexture;\n            }\n        });\n\n        if (gpuRenderTarget.msaa)\n        {\n            gpuRenderTarget.msaaSamples = 4;\n\n            if (renderTarget.depthStencilTexture)\n            {\n                renderTarget.depthStencilTexture.source.sampleCount = 4;\n            }\n        }\n\n        return gpuRenderTarget;\n    }\n\n    public destroyGpuRenderTarget(gpuRenderTarget: GpuRenderTarget)\n    {\n        gpuRenderTarget.contexts.forEach((context) =>\n        {\n            context.unconfigure();\n        });\n\n        gpuRenderTarget.msaaTextures.forEach((texture) =>\n        {\n            texture.destroy();\n        });\n\n        gpuRenderTarget.msaaTextures.length = 0;\n        gpuRenderTarget.contexts.length = 0;\n    }\n\n    public ensureDepthStencilTexture(renderTarget: RenderTarget)\n    {\n        // TODO This function will be more useful once we cache the descriptors\n        const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        if (renderTarget.depthStencilTexture && gpuRenderTarget.msaa)\n        {\n            renderTarget.depthStencilTexture.source.sampleCount = 4;\n        }\n    }\n\n    public resizeGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        gpuRenderTarget.width = renderTarget.width;\n        gpuRenderTarget.height = renderTarget.height;\n\n        if (gpuRenderTarget.msaa)\n        {\n            renderTarget.colorTextures.forEach((colorTexture, i) =>\n            {\n                const msaaTexture = gpuRenderTarget.msaaTextures[i];\n\n                msaaTexture?.resize(\n                    colorTexture.source.width,\n                    colorTexture.source.height,\n                    colorTexture.source._resolution\n                );\n            });\n        }\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem';\nimport { GpuRenderTargetAdaptor } from './GpuRenderTargetAdaptor';\n\nimport type { WebGPURenderer } from '../WebGPURenderer';\nimport type { GpuRenderTarget } from './GpuRenderTarget';\n\n/**\n * The WebGL adaptor for the render target system. Allows the Render Target System to be used with the WebGl renderer\n * @memberof rendering\n */\nexport class GpuRenderTargetSystem extends RenderTargetSystem<GpuRenderTarget>\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGPUSystem],\n        name: 'renderTarget',\n    } as const;\n\n    public adaptor = new GpuRenderTargetAdaptor();\n\n    constructor(renderer: WebGPURenderer)\n    {\n        super(renderer);\n\n        this.adaptor.init(renderer, this);\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { ShaderSystem } from '../../shared/shader/ShaderSystem';\nimport type { GPU } from '../GpuDeviceSystem';\nimport type { GpuProgram } from './GpuProgram';\n\nexport interface GPUProgramData\n{\n    bindGroups: GPUBindGroupLayout[]\n    pipeline: GPUPipelineLayout\n}\n\n/**\n * A system that manages the rendering of GpuPrograms.\n * @memberof rendering\n */\nexport class GpuShaderSystem implements ShaderSystem\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'shader',\n    } as const;\n\n    public maxTextures: number;\n\n    private _gpu: GPU;\n\n    private readonly _gpuProgramData: Record<number, GPUProgramData> = Object.create(null);\n\n    protected contextChange(gpu: GPU): void\n    {\n        this._gpu = gpu;\n\n        this.maxTextures = gpu.device.limits.maxSampledTexturesPerShaderStage;\n    }\n\n    public getProgramData(program: GpuProgram)\n    {\n        return this._gpuProgramData[program._layoutKey] || this._createGPUProgramData(program);\n    }\n\n    private _createGPUProgramData(program: GpuProgram)\n    {\n        const device = this._gpu.device;\n\n        const bindGroups = program.gpuLayout.map((group) => device.createBindGroupLayout({ entries: group }));\n\n        const pipelineLayoutDesc = { bindGroupLayouts: bindGroups };\n\n        this._gpuProgramData[program._layoutKey] = {\n            bindGroups,\n            pipeline: device.createPipelineLayout(pipelineLayoutDesc),\n        };\n\n        // generally we avoid having to make this automatically\n        // keeping this for a reminder, if any issues popup\n        // program._gpuLayout = {\n        //     bindGroups: null,\n        //     pipeline: 'auto',\n        // };\n\n        return this._gpuProgramData[program._layoutKey];\n    }\n\n    public destroy(): void\n    {\n        // TODO destroy the _gpuProgramData\n        this._gpu = null;\n        (this._gpuProgramData as null) = null;\n    }\n}\n","import type { BLEND_MODES } from '../../shared/state/const';\n\nexport const GpuBlendModesToPixi: Partial<Record<BLEND_MODES, GPUBlendState>> = {};\n\nGpuBlendModesToPixi.normal = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi.add = {\n    alpha: {\n        srcFactor: 'src-alpha',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'one',\n        dstFactor: 'one',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi.multiply = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'dst',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi.screen = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi.overlay = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi.none = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'zero',\n        dstFactor: 'zero',\n        operation: 'add',\n    },\n};\n\n// not-premultiplied blend modes\nGpuBlendModesToPixi['normal-npm'] = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'src-alpha',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi['add-npm'] = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'src-alpha',\n        dstFactor: 'one',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi['screen-npm'] = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'src-alpha',\n        dstFactor: 'one-minus-src',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi.erase = {\n    alpha: {\n        srcFactor: 'zero',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n    },\n    color: {\n        srcFactor: 'zero',\n        dstFactor: 'one-minus-src',\n        operation: 'add',\n    },\n};\n\nGpuBlendModesToPixi.min = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one',\n        operation: 'min',\n    },\n    color: {\n        srcFactor: 'one',\n        dstFactor: 'one',\n        operation: 'min',\n    },\n};\n\nGpuBlendModesToPixi.max = {\n    alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one',\n        operation: 'max',\n    },\n    color: {\n        srcFactor: 'one',\n        dstFactor: 'one',\n        operation: 'max',\n    },\n};\n\n// composite operations\n// GpuBlendModesToPixi[BLEND_MODES.SRC_IN] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'dst-alpha',\n//         dstFactor: 'zero',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.SRC_OUT] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'one-minus-dst-alpha',\n//         dstFactor: 'zero',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.SRC_ATOP] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'dst-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.DST_OVER] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'one-minus-dst-alpha',\n//         dstFactor: 'one',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.DST_IN] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'zero',\n//         dstFactor: 'src-alpha',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.DST_OUT] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'zero',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.DST_ATOP] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'one-minus-dst-alpha',\n//         dstFactor: 'src-alpha',\n//         operation: 'add',\n//     },\n// };\n\n// GpuBlendModesToPixi[BLEND_MODES.XOR] = {\n//     alpha: {\n//         srcFactor: 'src-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'one-minus-dst-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n// };\n\n// TODO - fix me\n// GLBlendModesToPixi[BLEND_MODES.SUBTRACT] = {\n//     alpha: {\n//         srcFactor: 'one',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n//     color: {\n//         srcFactor: 'one-minus-dst-alpha',\n//         dstFactor: 'one-minus-src-alpha',\n//         operation: 'add',\n//     },\n// };\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { State } from '../../shared/state/State';\nimport { GpuBlendModesToPixi } from './GpuBlendModesToPixi';\n\nimport type { BLEND_MODES } from '../../shared/state/const';\nimport type { System } from '../../shared/system/System';\nimport type { GPU } from '../GpuDeviceSystem';\n\n/**\n * System plugin to the renderer to manage WebGL state machines.\n * @memberof rendering\n */\nexport class GpuStateSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'state',\n    } as const;\n    /**\n     * State ID\n     * @readonly\n     */\n    public stateId: number;\n\n    /**\n     * Polygon offset\n     * @readonly\n     */\n    public polygonOffset: number;\n\n    /**\n     * Blend mode\n     * @default 'none'\n     * @readonly\n     */\n    public blendMode: BLEND_MODES;\n\n    /** Whether current blend equation is different */\n    protected _blendEq: boolean;\n\n    /**\n     * GL context\n     * @member {WebGLRenderingContext}\n     * @readonly\n     */\n    protected gpu: GPU;\n\n    /**\n     * Default WebGL State\n     * @readonly\n     */\n    protected defaultState: State;\n\n    constructor()\n    {\n        this.defaultState = new State();\n        this.defaultState.blend = true;\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this.gpu = gpu;\n    }\n\n    /**\n     * Gets the blend mode data for the current state\n     * @param state - The state to get the blend mode from\n     */\n    public getColorTargets(state: State): GPUColorTargetState[]\n    {\n        const blend = GpuBlendModesToPixi[state.blendMode] || GpuBlendModesToPixi.normal;\n\n        return [\n            {\n                format: 'bgra8unorm',\n                writeMask: 0,\n                blend,\n            },\n        ];\n    }\n\n    public destroy(): void\n    {\n        this.gpu = null;\n    }\n}\n","import type { BufferImageSource } from '../../../shared/texture/sources/BufferImageSource';\nimport type { GPU } from '../../GpuDeviceSystem';\nimport type { GpuTextureUploader } from './GpuTextureUploader';\n\nexport const gpuUploadBufferImageResource = {\n\n    type: 'image',\n\n    upload(source: BufferImageSource, gpuTexture: GPUTexture, gpu: GPU)\n    {\n        const resource = source.resource;\n\n        const total = (source.pixelWidth | 0) * (source.pixelHeight | 0);\n\n        const bytesPerPixel = resource.byteLength / total;\n\n        gpu.device.queue.writeTexture(\n            { texture: gpuTexture },\n            resource,\n            {\n                offset: 0,\n                rowsPerImage: source.pixelHeight,\n                bytesPerRow: source.pixelHeight * bytesPerPixel,\n            },\n            {\n                width: source.pixelWidth,\n                height: source.pixelHeight,\n                depthOrArrayLayers: 1,\n            }\n        );\n    }\n} as GpuTextureUploader<BufferImageSource>;\n\n","import type { CompressedSource } from '../../../shared/texture/sources/CompressedSource';\nimport type { GPU } from '../../GpuDeviceSystem';\nimport type { GpuTextureUploader } from './GpuTextureUploader';\n\nexport const blockDataMap: Record<string, {blockBytes: number, blockWidth: number, blockHeight: number}> = {\n    'bc1-rgba-unorm': { blockBytes: 8, blockWidth: 4, blockHeight: 4 },\n    'bc2-rgba-unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n    'bc3-rgba-unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n    'bc7-rgba-unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n    'etc1-rgb-unorm': { blockBytes: 8, blockWidth: 4, blockHeight: 4 },\n    'etc2-rgba8unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n    'astc-4x4-unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n};\n\nconst defaultBlockData = { blockBytes: 4, blockWidth: 1, blockHeight: 1 };\n\nexport const gpuUploadCompressedTextureResource = {\n\n    type: 'compressed',\n\n    upload(source: CompressedSource, gpuTexture: GPUTexture, gpu: GPU)\n    {\n        let mipWidth = source.pixelWidth;\n        let mipHeight = source.pixelHeight;\n\n        const blockData = blockDataMap[source.format] || defaultBlockData;\n\n        for (let i = 0; i < source.resource.length; i++)\n        {\n            const levelBuffer = source.resource[i];\n\n            const bytesPerRow = Math.ceil(mipWidth / blockData.blockWidth) * blockData.blockBytes;\n\n            gpu.device.queue.writeTexture(\n                {\n                    texture: gpuTexture,\n                    mipLevel: i\n                },\n                levelBuffer,\n                {\n                    offset: 0,\n                    bytesPerRow,\n                },\n                {\n                    width: Math.ceil(mipWidth / blockData.blockWidth) * blockData.blockWidth,\n                    height: Math.ceil(mipHeight / blockData.blockHeight) * blockData.blockHeight,\n                    depthOrArrayLayers: 1,\n                }\n            );\n\n            mipWidth = Math.max(mipWidth >> 1, 1);\n            mipHeight = Math.max(mipHeight >> 1, 1);\n        }\n    }\n} as GpuTextureUploader<CompressedSource>;\n\n","import type { TextureSource } from '../../../shared/texture/sources/TextureSource';\nimport type { GPU } from '../../GpuDeviceSystem';\nimport type { GpuTextureUploader } from './GpuTextureUploader';\n\nexport const gpuUploadImageResource = {\n\n    type: 'image',\n\n    upload(source: TextureSource, gpuTexture: GPUTexture, gpu: GPU)\n    {\n        const resource = source.resource as ImageBitmap | HTMLCanvasElement | OffscreenCanvas;\n\n        if (!resource) return;\n\n        const width = Math.min(gpuTexture.width, source.resourceWidth || source.pixelWidth);\n        const height = Math.min(gpuTexture.height, source.resourceHeight || source.pixelHeight);\n\n        const premultipliedAlpha = source.alphaMode === 'premultiply-alpha-on-upload';\n\n        gpu.device.queue.copyExternalImageToTexture(\n            { source: resource },\n            { texture: gpuTexture, premultipliedAlpha },\n            {\n                width,\n                height,\n            }\n        );\n    }\n} as GpuTextureUploader<TextureSource>;\n\n","import { gpuUploadImageResource } from './gpuUploadImageSource';\n\nimport type { VideoSource } from '../../../shared/texture/sources/VideoSource';\nimport type { GPU } from '../../GpuDeviceSystem';\nimport type { GpuTextureUploader } from './GpuTextureUploader';\n\nexport const gpuUploadVideoResource = {\n\n    type: 'video',\n\n    upload(source: VideoSource, gpuTexture: GPUTexture, gpu: GPU)\n    {\n        gpuUploadImageResource.upload(source, gpuTexture, gpu);\n    }\n} as GpuTextureUploader<VideoSource>;\n\n","/**\n * A class which generates mipmaps for a GPUTexture.\n * Thanks to @toji for the original implementation\n * https://github.com/toji/web-texture-tool/blob/main/src/webgpu-mipmap-generator.js\n * @memberof rendering\n * @ignore\n */\nexport class GpuMipmapGenerator\n{\n    public device: GPUDevice;\n    public sampler: GPUSampler;\n    public pipelines: Record<string, GPURenderPipeline>;\n\n    public mipmapShaderModule: any;\n\n    constructor(device: GPUDevice)\n    {\n        this.device = device;\n        this.sampler = device.createSampler({ minFilter: 'linear' });\n        // We'll need a new pipeline for every texture format used.\n        this.pipelines = {};\n    }\n\n    private _getMipmapPipeline(format: GPUTextureFormat)\n    {\n        let pipeline = this.pipelines[format];\n\n        if (!pipeline)\n        {\n            // Shader modules is shared between all pipelines, so only create once.\n            if (!this.mipmapShaderModule)\n            {\n                this.mipmapShaderModule = this.device.createShaderModule({\n                    code: /* wgsl */ `\n                        var<private> pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n                        vec2<f32>(-1.0, -1.0), vec2<f32>(-1.0, 3.0), vec2<f32>(3.0, -1.0));\n\n                        struct VertexOutput {\n                        @builtin(position) position : vec4<f32>,\n                        @location(0) texCoord : vec2<f32>,\n                        };\n\n                        @vertex\n                        fn vertexMain(@builtin(vertex_index) vertexIndex : u32) -> VertexOutput {\n                        var output : VertexOutput;\n                        output.texCoord = pos[vertexIndex] * vec2<f32>(0.5, -0.5) + vec2<f32>(0.5);\n                        output.position = vec4<f32>(pos[vertexIndex], 0.0, 1.0);\n                        return output;\n                        }\n\n                        @group(0) @binding(0) var imgSampler : sampler;\n                        @group(0) @binding(1) var img : texture_2d<f32>;\n\n                        @fragment\n                        fn fragmentMain(@location(0) texCoord : vec2<f32>) -> @location(0) vec4<f32> {\n                        return textureSample(img, imgSampler, texCoord);\n                        }\n                    `,\n                });\n            }\n\n            pipeline = this.device.createRenderPipeline({\n                layout: 'auto',\n                vertex: {\n                    module: this.mipmapShaderModule,\n                    entryPoint: 'vertexMain',\n                },\n                fragment: {\n                    module: this.mipmapShaderModule,\n                    entryPoint: 'fragmentMain',\n                    targets: [{ format }],\n                }\n            });\n\n            this.pipelines[format] = pipeline;\n        }\n\n        return pipeline;\n    }\n\n    /**\n     * Generates mipmaps for the given GPUTexture from the data in level 0.\n     * @param {module:External.GPUTexture} texture - Texture to generate mipmaps for.\n     * @returns {module:External.GPUTexture} - The originally passed texture\n     */\n    public generateMipmap(texture: GPUTexture)\n    {\n        const pipeline = this._getMipmapPipeline(texture.format);\n\n        if (texture.dimension === '3d' || texture.dimension === '1d')\n        {\n            throw new Error('Generating mipmaps for non-2d textures is currently unsupported!');\n        }\n\n        let mipTexture = texture;\n        const arrayLayerCount = texture.depthOrArrayLayers || 1; // Only valid for 2D textures.\n\n        // If the texture was created with RENDER_ATTACHMENT usage we can render directly between mip levels.\n        const renderToSource = texture.usage & GPUTextureUsage.RENDER_ATTACHMENT;\n\n        if (!renderToSource)\n        {\n            // Otherwise we have to use a separate texture to render into. It can be one mip level smaller than the source\n            // texture, since we already have the top level.\n            const mipTextureDescriptor = {\n                size: {\n                    width: Math.ceil(texture.width / 2),\n                    height: Math.ceil(texture.height / 2),\n                    depthOrArrayLayers: arrayLayerCount,\n                },\n                format: texture.format,\n                usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n                mipLevelCount: texture.mipLevelCount - 1,\n            };\n\n            mipTexture = this.device.createTexture(mipTextureDescriptor);\n        }\n\n        const commandEncoder = this.device.createCommandEncoder({});\n        // TODO: Consider making this static.\n        const bindGroupLayout = pipeline.getBindGroupLayout(0);\n\n        for (let arrayLayer = 0; arrayLayer < arrayLayerCount; ++arrayLayer)\n        {\n            let srcView = texture.createView({\n                baseMipLevel: 0,\n                mipLevelCount: 1,\n                dimension: '2d',\n                baseArrayLayer: arrayLayer,\n                arrayLayerCount: 1,\n            });\n\n            let dstMipLevel = renderToSource ? 1 : 0;\n\n            for (let i = 1; i < texture.mipLevelCount; ++i)\n            {\n                const dstView = mipTexture.createView({\n                    baseMipLevel: dstMipLevel++,\n                    mipLevelCount: 1,\n                    dimension: '2d',\n                    baseArrayLayer: arrayLayer,\n                    arrayLayerCount: 1,\n                });\n\n                const passEncoder = commandEncoder.beginRenderPass({\n                    colorAttachments: [{\n                        view: dstView,\n                        storeOp: 'store',\n                        loadOp: 'clear',\n                        clearValue: { r: 0, g: 0, b: 0, a: 0 },\n                    }],\n                });\n\n                const bindGroup = this.device.createBindGroup({\n                    layout: bindGroupLayout,\n                    entries: [{\n                        binding: 0,\n                        resource: this.sampler,\n                    }, {\n                        binding: 1,\n                        resource: srcView,\n                    }],\n                });\n\n                passEncoder.setPipeline(pipeline);\n                passEncoder.setBindGroup(0, bindGroup);\n                passEncoder.draw(3, 1, 0, 0);\n\n                passEncoder.end();\n\n                srcView = dstView;\n            }\n        }\n\n        // If we didn't render to the source texture, finish by copying the mip results from the temporary mipmap texture\n        // to the source.\n        if (!renderToSource)\n        {\n            const mipLevelSize = {\n                width: Math.ceil(texture.width / 2),\n                height: Math.ceil(texture.height / 2),\n                depthOrArrayLayers: arrayLayerCount,\n            };\n\n            for (let i = 1; i < texture.mipLevelCount; ++i)\n            {\n                commandEncoder.copyTextureToTexture({\n                    texture: mipTexture,\n                    mipLevel: i - 1,\n                }, {\n                    texture,\n                    mipLevel: i,\n                }, mipLevelSize);\n\n                mipLevelSize.width = Math.ceil(mipLevelSize.width / 2);\n                mipLevelSize.height = Math.ceil(mipLevelSize.height / 2);\n            }\n        }\n\n        this.device.queue.submit([commandEncoder.finish()]);\n\n        if (!renderToSource)\n        {\n            mipTexture.destroy();\n        }\n\n        return texture;\n    }\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { UniformGroup } from '../../shared/shader/UniformGroup';\nimport { CanvasPool } from '../../shared/texture/CanvasPool';\nimport { BindGroup } from '../shader/BindGroup';\nimport { gpuUploadBufferImageResource } from './uploaders/gpuUploadBufferImageResource';\nimport { blockDataMap, gpuUploadCompressedTextureResource } from './uploaders/gpuUploadCompressedTextureResource';\nimport { gpuUploadImageResource } from './uploaders/gpuUploadImageSource';\nimport { gpuUploadVideoResource } from './uploaders/gpuUploadVideoSource';\nimport { GpuMipmapGenerator } from './utils/GpuMipmapGenerator';\n\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { System } from '../../shared/system/System';\nimport type { CanvasGenerator, GetPixelsOutput } from '../../shared/texture/GenerateCanvas';\nimport type { TextureSource } from '../../shared/texture/sources/TextureSource';\nimport type { BindableTexture, Texture } from '../../shared/texture/Texture';\nimport type { TextureStyle } from '../../shared/texture/TextureStyle';\nimport type { GPU } from '../GpuDeviceSystem';\nimport type { WebGPURenderer } from '../WebGPURenderer';\nimport type { GpuTextureUploader } from './uploaders/GpuTextureUploader';\n\n/**\n * The system that handles textures for the GPU.\n * @memberof rendering\n */\nexport class GpuTextureSystem implements System, CanvasGenerator\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'texture',\n    } as const;\n\n    public readonly managedTextures: TextureSource[] = [];\n\n    protected CONTEXT_UID: number;\n    private _gpuSources: Record<number, GPUTexture> = Object.create(null);\n    private _gpuSamplers: Record<string, GPUSampler> = Object.create(null);\n    private _bindGroupHash: Record<string, BindGroup> = Object.create(null);\n    private _textureViewHash: Record<string, GPUTextureView> = Object.create(null);\n\n    private readonly _uploads: Record<string, GpuTextureUploader> = {\n        image: gpuUploadImageResource,\n        buffer: gpuUploadBufferImageResource,\n        video: gpuUploadVideoResource,\n        compressed: gpuUploadCompressedTextureResource\n    };\n\n    private _gpu: GPU;\n    private _mipmapGenerator?: GpuMipmapGenerator;\n\n    private readonly _renderer: WebGPURenderer;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n        renderer.renderableGC.addManagedHash(this, '_gpuSources');\n        renderer.renderableGC.addManagedHash(this, '_gpuSamplers');\n        renderer.renderableGC.addManagedHash(this, '_bindGroupHash');\n        renderer.renderableGC.addManagedHash(this, '_textureViewHash');\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this._gpu = gpu;\n    }\n\n    public initSource(source: TextureSource): GPUTexture\n    {\n        if (source.autoGenerateMipmaps)\n        {\n            const biggestDimension = Math.max(source.pixelWidth, source.pixelHeight);\n\n            source.mipLevelCount = Math.floor(Math.log2(biggestDimension)) + 1;\n        }\n\n        let usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n\n        if (source.uploadMethodId !== 'compressed')\n        {\n            usage |= GPUTextureUsage.RENDER_ATTACHMENT;\n            usage |= GPUTextureUsage.COPY_SRC;\n        }\n\n        const blockData = blockDataMap[source.format] || { blockBytes: 4, blockWidth: 1, blockHeight: 1 };\n\n        const width = Math.ceil(source.pixelWidth / blockData.blockWidth) * blockData.blockWidth;\n        const height = Math.ceil(source.pixelHeight / blockData.blockHeight) * blockData.blockHeight;\n\n        const textureDescriptor: GPUTextureDescriptor = {\n            label: source.label,\n            size: { width, height },\n            format: source.format,\n            sampleCount: source.sampleCount,\n            mipLevelCount: source.mipLevelCount,\n            dimension: source.dimension,\n            usage\n        };\n\n        const gpuTexture = this._gpu.device.createTexture(textureDescriptor);\n\n        this._gpuSources[source.uid] = gpuTexture;\n\n        if (!this.managedTextures.includes(source))\n        {\n            source.on('update', this.onSourceUpdate, this);\n            source.on('resize', this.onSourceResize, this);\n            source.on('destroy', this.onSourceDestroy, this);\n            source.on('unload', this.onSourceUnload, this);\n            source.on('updateMipmaps', this.onUpdateMipmaps, this);\n\n            this.managedTextures.push(source);\n        }\n\n        this.onSourceUpdate(source);\n\n        return gpuTexture;\n    }\n\n    protected onSourceUpdate(source: TextureSource): void\n    {\n        const gpuTexture = this.getGpuSource(source);\n\n        // destroyed!\n        if (!gpuTexture) return;\n\n        if (this._uploads[source.uploadMethodId])\n        {\n            this._uploads[source.uploadMethodId].upload(source, gpuTexture, this._gpu);\n        }\n\n        if (source.autoGenerateMipmaps && source.mipLevelCount > 1)\n        {\n            this.onUpdateMipmaps(source);\n        }\n    }\n\n    protected onSourceUnload(source: TextureSource): void\n    {\n        const gpuTexture = this._gpuSources[source.uid];\n\n        if (gpuTexture)\n        {\n            this._gpuSources[source.uid] = null;\n\n            gpuTexture.destroy();\n        }\n    }\n\n    protected onUpdateMipmaps(source: TextureSource): void\n    {\n        if (!this._mipmapGenerator)\n        {\n            this._mipmapGenerator = new GpuMipmapGenerator(this._gpu.device);\n        }\n\n        const gpuTexture = this.getGpuSource(source);\n\n        this._mipmapGenerator.generateMipmap(gpuTexture);\n    }\n\n    protected onSourceDestroy(source: TextureSource): void\n    {\n        source.off('update', this.onSourceUpdate, this);\n        source.off('unload', this.onSourceUnload, this);\n        source.off('destroy', this.onSourceDestroy, this);\n        source.off('resize', this.onSourceResize, this);\n        source.off('updateMipmaps', this.onUpdateMipmaps, this);\n\n        this.managedTextures.splice(this.managedTextures.indexOf(source), 1);\n\n        this.onSourceUnload(source);\n    }\n\n    protected onSourceResize(source: TextureSource): void\n    {\n        const gpuTexture = this._gpuSources[source.uid];\n\n        if (!gpuTexture)\n        {\n            this.initSource(source);\n        }\n        else if (gpuTexture.width !== source.pixelWidth || gpuTexture.height !== source.pixelHeight)\n        {\n            this._textureViewHash[source.uid] = null;\n            this._bindGroupHash[source.uid] = null;\n\n            this.onSourceUnload(source);\n            this.initSource(source);\n        }\n    }\n\n    private _initSampler(sampler: TextureStyle): GPUSampler\n    {\n        this._gpuSamplers[sampler._resourceId] = this._gpu.device.createSampler(sampler);\n\n        return this._gpuSamplers[sampler._resourceId];\n    }\n\n    public getGpuSampler(sampler: TextureStyle): GPUSampler\n    {\n        return this._gpuSamplers[sampler._resourceId] || this._initSampler(sampler);\n    }\n\n    public getGpuSource(source: TextureSource): GPUTexture\n    {\n        return this._gpuSources[source.uid] || this.initSource(source);\n    }\n\n    /**\n     * this returns s bind group for a specific texture, the bind group contains\n     * - the texture source\n     * - the texture style\n     * - the texture matrix\n     * This is cached so the bind group should only be created once per texture\n     * @param texture - the texture you want the bindgroup for\n     * @returns the bind group for the texture\n     */\n    public getTextureBindGroup(texture: Texture)\n    {\n        return this._bindGroupHash[texture.uid] ?? this._createTextureBindGroup(texture);\n    }\n\n    private _createTextureBindGroup(texture: Texture)\n    {\n        const source = texture.source;\n\n        this._bindGroupHash[texture.uid] = new BindGroup({\n            0: source,\n            1: source.style,\n            2: new UniformGroup({\n                uTextureMatrix: { type: 'mat3x3<f32>', value: texture.textureMatrix.mapCoord },\n            })\n        });\n\n        return this._bindGroupHash[texture.uid];\n    }\n\n    public getTextureView(texture: BindableTexture)\n    {\n        const source = texture.source;\n\n        return this._textureViewHash[source.uid] ?? this._createTextureView(source);\n    }\n\n    private _createTextureView(texture: TextureSource)\n    {\n        this._textureViewHash[texture.uid] = this.getGpuSource(texture).createView();\n\n        return this._textureViewHash[texture.uid];\n    }\n\n    public generateCanvas(texture: Texture): ICanvas\n    {\n        const renderer = this._renderer;\n\n        const commandEncoder = renderer.gpu.device.createCommandEncoder();\n\n        // create canvas\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = texture.source.pixelWidth;\n        canvas.height = texture.source.pixelHeight;\n\n        const context = canvas.getContext('webgpu') as unknown as GPUCanvasContext;\n\n        context.configure({\n            device: renderer.gpu.device,\n\n            usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n            format: DOMAdapter.get().getNavigator().gpu.getPreferredCanvasFormat(),\n            alphaMode: 'premultiplied',\n        });\n\n        commandEncoder.copyTextureToTexture({\n            texture: renderer.texture.getGpuSource(texture.source),\n            origin: {\n                x: 0,\n                y: 0,\n            },\n        }, {\n            texture: context.getCurrentTexture(),\n        }, {\n            width: canvas.width,\n            height: canvas.height,\n        });\n\n        renderer.gpu.device.queue.submit([commandEncoder.finish()]);\n\n        return canvas;\n    }\n\n    public getPixels(texture: Texture): GetPixelsOutput\n    {\n        const webGPUCanvas = this.generateCanvas(texture);\n\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(webGPUCanvas.width, webGPUCanvas.height);\n\n        const context = canvasAndContext.context;\n\n        context.drawImage(webGPUCanvas, 0, 0);\n\n        const { width, height } = webGPUCanvas;\n\n        const imageData = context.getImageData(0, 0, width, height);\n\n        const pixels = new Uint8ClampedArray(imageData.data.buffer);\n\n        CanvasPool.returnCanvasAndContext(canvasAndContext);\n\n        return { pixels, width, height };\n    }\n\n    public destroy(): void\n    {\n        // we copy the array as the aarry with a slice as onSourceDestroy\n        // will remove the source from the real managedTextures array\n        this.managedTextures\n            .slice()\n            .forEach((source) => this.onSourceDestroy(source));\n\n        (this.managedTextures as null) = null;\n\n        for (const k of Object.keys(this._bindGroupHash))\n        {\n            const key = Number(k);\n            const bindGroup = this._bindGroupHash[key];\n\n            bindGroup?.destroy();\n            this._bindGroupHash[key] = null;\n        }\n\n        this._gpu = null;\n        this._mipmapGenerator = null;\n        this._gpuSources = null;\n        this._bindGroupHash = null;\n        this._textureViewHash = null;\n        this._gpuSamplers = null;\n    }\n}\n","import { extensions, ExtensionType } from '../../../extensions/Extensions';\nimport { GpuGraphicsAdaptor } from '../../../scene/graphics/gpu/GpuGraphicsAdaptor';\nimport { GpuMeshAdapter } from '../../../scene/mesh/gpu/GpuMeshAdapter';\nimport { GpuBatchAdaptor } from '../../batcher/gpu/GpuBatchAdaptor';\nimport { AbstractRenderer } from '../shared/system/AbstractRenderer';\nimport { SharedRenderPipes, SharedSystems } from '../shared/system/SharedSystems';\nimport { RendererType } from '../types';\nimport { BindGroupSystem } from './BindGroupSystem';\nimport { GpuBufferSystem } from './buffer/GpuBufferSystem';\nimport { GpuColorMaskSystem } from './GpuColorMaskSystem';\nimport { type GPU, GpuDeviceSystem } from './GpuDeviceSystem';\nimport { GpuEncoderSystem } from './GpuEncoderSystem';\nimport { GpuStencilSystem } from './GpuStencilSystem';\nimport { GpuUboSystem } from './GpuUboSystem';\nimport { GpuUniformBatchPipe } from './GpuUniformBatchPipe';\nimport { PipelineSystem } from './pipeline/PipelineSystem';\nimport { GpuRenderTargetSystem } from './renderTarget/GpuRenderTargetSystem';\nimport { GpuShaderSystem } from './shader/GpuShaderSystem';\nimport { GpuStateSystem } from './state/GpuStateSystem';\nimport { GpuTextureSystem } from './texture/GpuTextureSystem';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { PipeConstructor } from '../shared/instructions/RenderPipe';\nimport type { SharedRendererOptions } from '../shared/system/SharedSystems';\nimport type { SystemConstructor } from '../shared/system/System';\nimport type { ExtractRendererOptions, ExtractSystemTypes } from '../shared/system/utils/typeUtils';\n\nconst DefaultWebGPUSystems = [\n    ...SharedSystems,\n    GpuUboSystem,\n    GpuEncoderSystem,\n    GpuDeviceSystem,\n    GpuBufferSystem,\n    GpuTextureSystem,\n    GpuRenderTargetSystem,\n    GpuShaderSystem,\n    GpuStateSystem,\n    PipelineSystem,\n    GpuColorMaskSystem,\n    GpuStencilSystem,\n    BindGroupSystem,\n];\nconst DefaultWebGPUPipes = [...SharedRenderPipes, GpuUniformBatchPipe];\nconst DefaultWebGPUAdapters = [GpuBatchAdaptor, GpuMeshAdapter, GpuGraphicsAdaptor];\n\n// installed systems will bbe added to this array by the extensions manager..\nconst systems: { name: string; value: SystemConstructor }[] = [];\nconst renderPipes: { name: string; value: PipeConstructor }[] = [];\nconst renderPipeAdaptors: { name: string; value: any }[] = [];\n\nextensions.handleByNamedList(ExtensionType.WebGPUSystem, systems);\nextensions.handleByNamedList(ExtensionType.WebGPUPipes, renderPipes);\nextensions.handleByNamedList(ExtensionType.WebGPUPipesAdaptor, renderPipeAdaptors);\n\n// add all the default systems as well as any user defined ones from the extensions\nextensions.add(...DefaultWebGPUSystems, ...DefaultWebGPUPipes, ...DefaultWebGPUAdapters);\n\ntype WebGPUSystems = ExtractSystemTypes<typeof DefaultWebGPUSystems> &\nPixiMixins.RendererSystems &\nPixiMixins.WebGPUSystems;\n\nexport type WebGPUPipes = ExtractSystemTypes<typeof DefaultWebGPUPipes> &\nPixiMixins.RendererPipes &\nPixiMixins.WebGPUPipes;\n\n/**\n * Options for WebGPURenderer.\n * @memberof rendering\n */\nexport interface WebGPUOptions extends\n    SharedRendererOptions,\n    ExtractRendererOptions<typeof DefaultWebGPUSystems>,\n    PixiMixins.WebGPUOptions{}\n\nexport interface WebGPURenderer<T extends ICanvas = HTMLCanvasElement>\n    extends AbstractRenderer<WebGPUPipes, WebGPUOptions, T>,\n    WebGPUSystems {}\n\n/* eslint-disable max-len */\n/**\n * The WebGPU PixiJS Renderer. This renderer allows you to use the next-generation graphics API, WebGPU.\n * ```ts\n * // Create a new renderer\n * const renderer = new WebGPURenderer();\n * await renderer.init();\n *\n * // Add the renderer to the stage\n * document.body.appendChild(renderer.canvas);\n *\n * // Create a new stage\n * const stage = new Container();\n *\n * // Render the stage\n * renderer.render(stage);\n * ```\n *\n * You can use {@link rendering.autoDetectRenderer} to create a renderer that will automatically detect the best\n * renderer for the environment.\n * ```ts\n * // Create a new renderer\n * const renderer = await rendering.autoDetectRenderer();\n * ```\n *\n * The renderer is composed of systems that manage specific tasks. The following systems are added by default\n * whenever you create a WebGPU renderer:\n *\n * | WebGPU Core Systems                      | Systems that are specific to the WebGL renderer                               |\n * | ---------------------------------------- | ----------------------------------------------------------------------------- |\n * | {@link rendering.GpuUboSystem}           | This manages WebGPU uniform buffer objects feature for shaders                |\n * | {@link rendering.GpuEncoderSystem}       | This manages the WebGPU command encoder                                       |\n * | {@link rendering.GpuDeviceSystem}        | This manages the WebGPU Device and its extensions                             |\n * | {@link rendering.GpuBufferSystem}        | This manages buffers and their GPU resources, keeps everything in sync        |\n * | {@link rendering.GpuTextureSystem}       | This manages textures and their GPU resources, keeps everything in sync       |\n * | {@link rendering.GpuRenderTargetSystem}  | This manages what we render too. For example the screen, or another texture   |\n * | {@link rendering.GpuShaderSystem}        | This manages shaders, programs that run on the GPU to output lovely pixels    |\n * | {@link rendering.GpuStateSystem}         | This manages the state of the WebGPU Pipelines. eg the various flags that can be set blend modes / depthTesting etc |\n * | {@link rendering.PipelineSystem}         | This manages the WebGPU pipelines, used for rendering                         |\n * | {@link rendering.GpuColorMaskSystem}     | This manages the color mask. Used for color masking                           |\n * | {@link rendering.GpuStencilSystem}       | This manages the stencil buffer. Used primarily for masking                   |\n * | {@link rendering.BindGroupSystem}        | This manages the WebGPU bind groups. this is how data is bound to a shader when rendering |\n *\n * The breadth of the API surface provided by the renderer is contained within these systems.\n * @memberof rendering\n * @property {rendering.GpuUboSystem} ubo - UboSystem instance.\n * @property {rendering.GpuEncoderSystem} encoder - EncoderSystem instance.\n * @property {rendering.GpuDeviceSystem} device - DeviceSystem instance.\n * @property {rendering.GpuBufferSystem} buffer - BufferSystem instance.\n * @property {rendering.GpuTextureSystem} texture - TextureSystem instance.\n * @property {rendering.GpuRenderTargetSystem} renderTarget - RenderTargetSystem instance.\n * @property {rendering.GpuShaderSystem} shader - ShaderSystem instance.\n * @property {rendering.GpuStateSystem} state - StateSystem instance.\n * @property {rendering.PipelineSystem} pipeline - PipelineSystem instance.\n * @property {rendering.GpuColorMaskSystem} colorMask - ColorMaskSystem instance.\n * @property {rendering.GpuStencilSystem} stencil - StencilSystem instance.\n * @property {rendering.BindGroupSystem} bindGroup - BindGroupSystem instance.\n * @extends rendering.AbstractRenderer\n */\nexport class WebGPURenderer<T extends ICanvas = HTMLCanvasElement>\n    extends AbstractRenderer<WebGPUPipes, WebGPUOptions, T>\n    implements WebGPUSystems\n{\n    /** The WebGPU Device. */\n    public gpu: GPU;\n\n    constructor()\n    {\n        const systemConfig = {\n            name: 'webgpu',\n            type: RendererType.WEBGPU,\n            systems,\n            renderPipes,\n            renderPipeAdaptors,\n        };\n\n        super(systemConfig);\n    }\n}\n"],"names":["GpuGraphicsAdaptor","init","localUniforms","UniformGroup","uTransformMatrix","value","Matrix","type","uColor","Float32Array","uRound","gpuProgram","compileHighShaderGpuProgram","name","bits","colorBit","generateTextureBatchBit","getMaxTexturesPerBatch","localUniformBitGroup2","roundPixelsBit","shader","Shader","resources","execute","graphicsPipe","renderable","context","customShader","this","renderer","contextSystem","graphicsContext","batcher","instructions","getContextRenderData","encoder","setGeometry","geometry","globalUniformsBindGroup","globalUniforms","bindGroup","setBindGroup","localBindGroup","renderPipes","uniformBatch","getUniformBindGroup","batches","topology","i","instructionSize","batch","setPipelineFromGeometryProgramAndState","state","groups","gpuBindGroup","textureBatch","textures","getTextureBatchBindGroup","count","getBindGroup","renderPassEncoder","drawIndexed","size","start","destroy","extension","ExtensionType","WebGPUPipesAdaptor","GpuMeshAdapter","localUniformBit","textureBit","_shader","uTexture","Texture","EMPTY","_source","uSampler","style","textureUniforms","uTextureMatrix","meshPipe","mesh","warn","texture","getTextureBindGroup","autoAssignGlobalUniforms","autoAssignLocalUniforms","draw","_geometry","tempState","State","for2d","GpuBatchAdaptor","batchPipe","program","blendMode","pipeline","getPipeline","resetBindGroup","_touch","textureGC","setPipeline","BindGroupSystem","constructor","_hash","Object","create","_renderer","renderableGC","addManagedHash","contextChange","gpu","_gpu","groupIndex","_updateKey","_key","_createBindGroup","group","device","groupLayout","layout","entries","j","_group$resources$j","resource","gpuResource","_resourceType","uniformGroup","ubo","updateUniformGroup","buffer","getGPUBuffer","offset","descriptor","bufferResource","sampler","getGpuSampler","getGpuSource","createView","push","binding","getProgramData","bindGroups","createBindGroup","key","keys","WebGPUSystem","GpuBufferSystem","_gpuBuffers","_managedBuffers","uid","createGPUBuffer","updateBuffer","gpuBuffer","data","_updateID","queue","writeBuffer","_updateSize","byteLength","destroyAll","id","on","onBufferChange","onBufferDestroy","createBuffer","fastCopy","getMappedRange","unmap","splice","indexOf","_destroyBuffer","forEach","off","GpuColorMaskSystem","_colorMaskCache","setMask","colorMask","setColorMask","GpuDeviceSystem","options","_initPromise","_createDeviceAndAdaptor","then","runners","emit","adapter","DOMAdapter","get","getNavigator","requestAdapter","powerPreference","forceFallbackAdapter","requiredFeatures","filter","feature","features","has","requestDevice","defaultOptions","GpuEncoderSystem","_boundBindGroup","_boundVertexBuffer","renderStart","commandFinished","Promise","resolve","_resolveCommandFinished","commandEncoder","createCommandEncoder","beginRenderPass","gpuRenderTarget","endRenderPass","_clearCache","end","setViewport","viewport","x","y","width","height","_boundPipeline","_setVertexBuffer","index","setVertexBuffer","_setIndexBuffer","_boundIndexBuffer","indexFormat","BYTES_PER_ELEMENT","setIndexBuffer","buffersToBind","getBufferNamesToBind","attributes","indexBuffer","_setShaderBindGroups","skipSync","_syncBindGroup","isUniformGroup","instanceCount","length","getSize","finishRenderPass","postrender","submit","finish","restoreRenderPass","renderTarget","adaptor","getDescriptor","boundPipeline","boundVertexBuffer","_objectSpread","boundIndexBuffer","boundBindGroup","priority","GpuStencilSystem","_renderTargetStencilState","onRenderTargetChange","add","stencilState","stencilMode","STENCIL_MODES","DISABLED","stencilReference","_activeRenderTarget","setStencilMode","setStencilReference","remove","WGSL_ALIGN_SIZE_DATA","i32","align","u32","f32","f16","createUboElementsWGSL","uniformData","uboElements","map","uboElement","Error","concat","Math","max","ceil","generateArraySyncWGSL","offsetToAdd","remainder","createUboSyncFunctionWGSL","createUboSyncFunction","uboSyncFunctionsWGSL","GpuUboSystem","UboSystem","createUboElements","generateUboSync","UboBatch","_ref","minUniformOffsetAlignment","_minUniformOffsetAlignment","byteIndex","clear","addEmptyGroup","newSize","addGroup","array","GpuUniformBatchPipe","_bindGroupHash","_buffers","_bindGroups","_bufferResources","_batchBuffer","usage","BufferUsage","UNIFORM","COPY_DST","COPY_SRC","Buffer","renderEnd","_uploadBindGroups","_resetBindGroups","duplicate","ensureUniformGroup","syncUniformGroup","_getBindGroup","getUboResource","_getBufferResource","getArrayBindGroup","getArrayBufferResource","BufferResource","BindGroup","bufferSystem","firstBuffer","update","copyBufferToBuffer","WebGPUPipes","topologyStringToId","PipelineSystem","_moduleCache","_bufferLayoutsCache","_bindingNamesCache","_pipeCache","_pipeStateCaches","_colorMask","_multisampleCount","_updatePipeHash","setMultisampleCount","multisampleCount","setRenderTarget","msaaSamples","_depthStencilAttachment","depthStencilAttachment","_stencilMode","_stencilState","GpuStencilModesToPixi","passEncoder","_layoutKey","ensureAttributes","attributeData","_generateBufferKey","geometryLayout","shaderKey","getGraphicsStateKey","_blendModeId","_createPipeline","buffers","_createVertexBufferLayouts","blendModes","getColorTargets","writeMask","RENDERING_MASK_ADD","vertex","module","_getModule","source","entryPoint","fragment","targets","primitive","cullMode","multisample","label","depthStencil","format","depthWriteEnabled","depthTest","depthCompare","createRenderPipeline","code","_createModule","createShaderModule","keyGen","attributeKeys","sort","attribute","stride","instance","stringKey","join","createIdFromString","_generateAttributeLocationsKey","location","_attributeLocationsKey","bufferNamesToBind","shaderLocation","values","vertexBuffersLayout","bufferEntry","arrayStride","stepMode","bufferEntryAttributes","_attribute$divisor","divisor","stencilStateId","multiSampleCount","GpuRenderTarget","contexts","msaaTextures","GpuRenderTargetAdaptor","renderTargetSystem","_renderTargetSystem","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","baseGpuTexture","_getGpuColorTexture","backGpuTexture","copyTextureToTexture","origin","startRenderPass","arguments","undefined","clearColor","getGpuRenderTarget","getCurrentTexture","colorTextures","clearValue","CLEAR","ALL","NONE","colorAttachments","view","resolveTarget","mipLevelCount","getTextureView","loadOp","COLOR","defaultClearColor","storeOp","stencil","depth","depthStencilTexture","ensureDepthStencilTexture","sampleCount","msaa","stencilLoadOp","STENCIL","depthLoadOp","DEPTH","stencilStoreOp","depthClearValue","depthStoreOp","renderPassDescriptor","gpuCommands","initGpuRenderTarget","isRoot","colorTexture","CanvasSource","test","getContext","alphaMode","transparent","configure","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","e","console","error","antialias","msaaTexture","TextureSource","destroyGpuRenderTarget","unconfigure","resizeGpuRenderTarget","resize","_resolution","GpuRenderTargetSystem","RenderTargetSystem","super","GpuShaderSystem","_gpuProgramData","maxTextures","limits","maxSampledTexturesPerShaderStage","_createGPUProgramData","gpuLayout","createBindGroupLayout","pipelineLayoutDesc","bindGroupLayouts","createPipelineLayout","GpuBlendModesToPixi","alpha","srcFactor","dstFactor","operation","color","GpuStateSystem","defaultState","blend","normal","gpuUploadBufferImageResource","upload","gpuTexture","total","pixelWidth","pixelHeight","bytesPerPixel","writeTexture","rowsPerImage","bytesPerRow","depthOrArrayLayers","blockDataMap","blockBytes","blockWidth","blockHeight","defaultBlockData","gpuUploadCompressedTextureResource","mipWidth","mipHeight","blockData","levelBuffer","mipLevel","gpuUploadImageResource","min","resourceWidth","resourceHeight","premultipliedAlpha","copyExternalImageToTexture","gpuUploadVideoResource","GpuMipmapGenerator","createSampler","minFilter","pipelines","_getMipmapPipeline","mipmapShaderModule","generateMipmap","dimension","mipTexture","arrayLayerCount","renderToSource","mipTextureDescriptor","createTexture","bindGroupLayout","getBindGroupLayout","arrayLayer","srcView","baseMipLevel","baseArrayLayer","dstMipLevel","dstView","r","g","b","a","mipLevelSize","GpuTextureSystem","managedTextures","_gpuSources","_gpuSamplers","_textureViewHash","_uploads","image","video","compressed","initSource","autoGenerateMipmaps","biggestDimension","floor","log2","uploadMethodId","textureDescriptor","includes","onSourceUpdate","onSourceResize","onSourceDestroy","onSourceUnload","onUpdateMipmaps","_mipmapGenerator","_initSampler","_resourceId","_this$_bindGroupHash$","_createTextureBindGroup","textureMatrix","mapCoord","_this$_textureViewHas","_createTextureView","generateCanvas","canvas","createCanvas","getPreferredCanvasFormat","getPixels","webGPUCanvas","canvasAndContext","CanvasPool","getOptimalCanvasAndContext","drawImage","imageData","getImageData","pixels","Uint8ClampedArray","returnCanvasAndContext","slice","k","Number","DefaultWebGPUSystems","SharedSystems","DefaultWebGPUPipes","SharedRenderPipes","DefaultWebGPUAdapters","systems","renderPipeAdaptors","extensions","handleByNamedList","WebGPURenderer","AbstractRenderer","RendererType","WEBGPU"],"sourceRoot":""}